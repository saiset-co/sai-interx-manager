// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/recovery/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_RecoveryRecord_FullMethodName           = "/kira.recovery.Query/RecoveryRecord"
	Query_RecoveryToken_FullMethodName            = "/kira.recovery.Query/RecoveryToken"
	Query_RRHolderRewards_FullMethodName          = "/kira.recovery.Query/RRHolderRewards"
	Query_RegisteredRRTokenHolders_FullMethodName = "/kira.recovery.Query/RegisteredRRTokenHolders"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// given KIRA public address as parameter return data from the recovery registrar
	RecoveryRecord(ctx context.Context, in *QueryRecoveryRecordRequest, opts ...grpc.CallOption) (*QueryRecoveryRecordResponse, error)
	RecoveryToken(ctx context.Context, in *QueryRecoveryTokenRequest, opts ...grpc.CallOption) (*QueryRecoveryTokenResponse, error)
	RRHolderRewards(ctx context.Context, in *QueryRRHolderRewardsRequest, opts ...grpc.CallOption) (*QueryRRHolderRewardsResponse, error)
	RegisteredRRTokenHolders(ctx context.Context, in *QueryRegisteredRRTokenHoldersRequest, opts ...grpc.CallOption) (*QueryRegisteredRRTokenHoldersResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RecoveryRecord(ctx context.Context, in *QueryRecoveryRecordRequest, opts ...grpc.CallOption) (*QueryRecoveryRecordResponse, error) {
	out := new(QueryRecoveryRecordResponse)
	err := c.cc.Invoke(ctx, Query_RecoveryRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecoveryToken(ctx context.Context, in *QueryRecoveryTokenRequest, opts ...grpc.CallOption) (*QueryRecoveryTokenResponse, error) {
	out := new(QueryRecoveryTokenResponse)
	err := c.cc.Invoke(ctx, Query_RecoveryToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RRHolderRewards(ctx context.Context, in *QueryRRHolderRewardsRequest, opts ...grpc.CallOption) (*QueryRRHolderRewardsResponse, error) {
	out := new(QueryRRHolderRewardsResponse)
	err := c.cc.Invoke(ctx, Query_RRHolderRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredRRTokenHolders(ctx context.Context, in *QueryRegisteredRRTokenHoldersRequest, opts ...grpc.CallOption) (*QueryRegisteredRRTokenHoldersResponse, error) {
	out := new(QueryRegisteredRRTokenHoldersResponse)
	err := c.cc.Invoke(ctx, Query_RegisteredRRTokenHolders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// given KIRA public address as parameter return data from the recovery registrar
	RecoveryRecord(context.Context, *QueryRecoveryRecordRequest) (*QueryRecoveryRecordResponse, error)
	RecoveryToken(context.Context, *QueryRecoveryTokenRequest) (*QueryRecoveryTokenResponse, error)
	RRHolderRewards(context.Context, *QueryRRHolderRewardsRequest) (*QueryRRHolderRewardsResponse, error)
	RegisteredRRTokenHolders(context.Context, *QueryRegisteredRRTokenHoldersRequest) (*QueryRegisteredRRTokenHoldersResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) RecoveryRecord(context.Context, *QueryRecoveryRecordRequest) (*QueryRecoveryRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoveryRecord not implemented")
}
func (UnimplementedQueryServer) RecoveryToken(context.Context, *QueryRecoveryTokenRequest) (*QueryRecoveryTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoveryToken not implemented")
}
func (UnimplementedQueryServer) RRHolderRewards(context.Context, *QueryRRHolderRewardsRequest) (*QueryRRHolderRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RRHolderRewards not implemented")
}
func (UnimplementedQueryServer) RegisteredRRTokenHolders(context.Context, *QueryRegisteredRRTokenHoldersRequest) (*QueryRegisteredRRTokenHoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredRRTokenHolders not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_RecoveryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecoveryRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecoveryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RecoveryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecoveryRecord(ctx, req.(*QueryRecoveryRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecoveryToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecoveryTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecoveryToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RecoveryToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecoveryToken(ctx, req.(*QueryRecoveryTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RRHolderRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRRHolderRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RRHolderRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RRHolderRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RRHolderRewards(ctx, req.(*QueryRRHolderRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredRRTokenHolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredRRTokenHoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredRRTokenHolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RegisteredRRTokenHolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredRRTokenHolders(ctx, req.(*QueryRegisteredRRTokenHoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.recovery.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecoveryRecord",
			Handler:    _Query_RecoveryRecord_Handler,
		},
		{
			MethodName: "RecoveryToken",
			Handler:    _Query_RecoveryToken_Handler,
		},
		{
			MethodName: "RRHolderRewards",
			Handler:    _Query_RRHolderRewards_Handler,
		},
		{
			MethodName: "RegisteredRRTokenHolders",
			Handler:    _Query_RegisteredRRTokenHolders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/recovery/query.proto",
}
