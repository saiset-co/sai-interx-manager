// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/collectives/tx.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_CreateCollective_FullMethodName     = "/kira.collectives.Msg/CreateCollective"
	Msg_ContributeCollective_FullMethodName = "/kira.collectives.Msg/ContributeCollective"
	Msg_DonateCollective_FullMethodName     = "/kira.collectives.Msg/DonateCollective"
	Msg_WithdrawCollective_FullMethodName   = "/kira.collectives.Msg/WithdrawCollective"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCollective defines a method for creating collective.
	// allow ANY user to create Staking Collective even if they have no roles or
	// permissions enabling that
	CreateCollective(ctx context.Context, in *MsgCreateCollective, opts ...grpc.CallOption) (*MsgCreateCollectiveResponse, error)
	// ContributeCollective defines a method for putting bonds on collective.
	// can be sent by any whitelisted “contributor” account that wants to add
	// tokens to the Staking Collective during or after creation process
	ContributeCollective(ctx context.Context, in *MsgBondCollective, opts ...grpc.CallOption) (*MsgBondCollectiveResponse, error)
	// DonateCollective defines a method to set lock and donation for bonds on the
	// collection - allows to lock staking derivatives for a specific time period
	// and donating a defined percentage of staking rewards to the collective.
	DonateCollective(ctx context.Context, in *MsgDonateCollective, opts ...grpc.CallOption) (*MsgDonateCollectiveResponse, error)
	// WithdrawCollective can be sent by any whitelisted “contributor” to withdraw
	// their tokens (unless locking is enabled)
	WithdrawCollective(ctx context.Context, in *MsgWithdrawCollective, opts ...grpc.CallOption) (*MsgWithdrawCollectiveResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCollective(ctx context.Context, in *MsgCreateCollective, opts ...grpc.CallOption) (*MsgCreateCollectiveResponse, error) {
	out := new(MsgCreateCollectiveResponse)
	err := c.cc.Invoke(ctx, Msg_CreateCollective_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ContributeCollective(ctx context.Context, in *MsgBondCollective, opts ...grpc.CallOption) (*MsgBondCollectiveResponse, error) {
	out := new(MsgBondCollectiveResponse)
	err := c.cc.Invoke(ctx, Msg_ContributeCollective_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DonateCollective(ctx context.Context, in *MsgDonateCollective, opts ...grpc.CallOption) (*MsgDonateCollectiveResponse, error) {
	out := new(MsgDonateCollectiveResponse)
	err := c.cc.Invoke(ctx, Msg_DonateCollective_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawCollective(ctx context.Context, in *MsgWithdrawCollective, opts ...grpc.CallOption) (*MsgWithdrawCollectiveResponse, error) {
	out := new(MsgWithdrawCollectiveResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawCollective_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// CreateCollective defines a method for creating collective.
	// allow ANY user to create Staking Collective even if they have no roles or
	// permissions enabling that
	CreateCollective(context.Context, *MsgCreateCollective) (*MsgCreateCollectiveResponse, error)
	// ContributeCollective defines a method for putting bonds on collective.
	// can be sent by any whitelisted “contributor” account that wants to add
	// tokens to the Staking Collective during or after creation process
	ContributeCollective(context.Context, *MsgBondCollective) (*MsgBondCollectiveResponse, error)
	// DonateCollective defines a method to set lock and donation for bonds on the
	// collection - allows to lock staking derivatives for a specific time period
	// and donating a defined percentage of staking rewards to the collective.
	DonateCollective(context.Context, *MsgDonateCollective) (*MsgDonateCollectiveResponse, error)
	// WithdrawCollective can be sent by any whitelisted “contributor” to withdraw
	// their tokens (unless locking is enabled)
	WithdrawCollective(context.Context, *MsgWithdrawCollective) (*MsgWithdrawCollectiveResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateCollective(context.Context, *MsgCreateCollective) (*MsgCreateCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollective not implemented")
}
func (UnimplementedMsgServer) ContributeCollective(context.Context, *MsgBondCollective) (*MsgBondCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContributeCollective not implemented")
}
func (UnimplementedMsgServer) DonateCollective(context.Context, *MsgDonateCollective) (*MsgDonateCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DonateCollective not implemented")
}
func (UnimplementedMsgServer) WithdrawCollective(context.Context, *MsgWithdrawCollective) (*MsgWithdrawCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCollective not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateCollective_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCollective(ctx, req.(*MsgCreateCollective))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ContributeCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBondCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ContributeCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ContributeCollective_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ContributeCollective(ctx, req.(*MsgBondCollective))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DonateCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDonateCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DonateCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DonateCollective_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DonateCollective(ctx, req.(*MsgDonateCollective))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawCollective_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawCollective(ctx, req.(*MsgWithdrawCollective))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.collectives.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollective",
			Handler:    _Msg_CreateCollective_Handler,
		},
		{
			MethodName: "ContributeCollective",
			Handler:    _Msg_ContributeCollective_Handler,
		},
		{
			MethodName: "DonateCollective",
			Handler:    _Msg_DonateCollective_Handler,
		},
		{
			MethodName: "WithdrawCollective",
			Handler:    _Msg_WithdrawCollective_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/collectives/tx.proto",
}
