// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/collectives/collective.proto

package types

import (
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CollectiveStatus int32

const (
	// Active status
	CollectiveStatus_ACTIVE CollectiveStatus = 0
	// Inactive status
	CollectiveStatus_INACTIVE CollectiveStatus = 1
	// Paused status
	CollectiveStatus_PAUSED CollectiveStatus = 2
)

// Enum value maps for CollectiveStatus.
var (
	CollectiveStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
		2: "PAUSED",
	}
	CollectiveStatus_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
		"PAUSED":   2,
	}
)

func (x CollectiveStatus) Enum() *CollectiveStatus {
	p := new(CollectiveStatus)
	*p = x
	return p
}

func (x CollectiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_collectives_collective_proto_enumTypes[0].Descriptor()
}

func (CollectiveStatus) Type() protoreflect.EnumType {
	return &file_kira_collectives_collective_proto_enumTypes[0]
}

func (x CollectiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectiveStatus.Descriptor instead.
func (CollectiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_kira_collectives_collective_proto_rawDescGZIP(), []int{0}
}

type DepositWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any      bool     `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`            // allow/prevent anyone who is not explicitly specified by role or address to bond to this collective
	Roles    []uint64 `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"` // list of specific roles allowed to deposit to this collective
	Accounts []string `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`   // addresses allowed to deposit to this collective
}

func (x *DepositWhitelist) Reset() {
	*x = DepositWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_collectives_collective_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositWhitelist) ProtoMessage() {}

func (x *DepositWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_kira_collectives_collective_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositWhitelist.ProtoReflect.Descriptor instead.
func (*DepositWhitelist) Descriptor() ([]byte, []int) {
	return file_kira_collectives_collective_proto_rawDescGZIP(), []int{0}
}

func (x *DepositWhitelist) GetAny() bool {
	if x != nil {
		return x.Any
	}
	return false
}

func (x *DepositWhitelist) GetRoles() []uint64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *DepositWhitelist) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type OwnersWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles    []uint64 `protobuf:"varint,1,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Accounts []string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *OwnersWhitelist) Reset() {
	*x = OwnersWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_collectives_collective_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnersWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnersWhitelist) ProtoMessage() {}

func (x *OwnersWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_kira_collectives_collective_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnersWhitelist.ProtoReflect.Descriptor instead.
func (*OwnersWhitelist) Descriptor() ([]byte, []int) {
	return file_kira_collectives_collective_proto_rawDescGZIP(), []int{1}
}

func (x *OwnersWhitelist) GetRoles() []uint64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *OwnersWhitelist) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type WeightedSpendingPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     // spending pool to which staking rewards will be sent
	Weight string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"` // A decimal (0-1) defining what percentage of all rewards should be sent to this specific spending pool
}

func (x *WeightedSpendingPool) Reset() {
	*x = WeightedSpendingPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_collectives_collective_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedSpendingPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedSpendingPool) ProtoMessage() {}

func (x *WeightedSpendingPool) ProtoReflect() protoreflect.Message {
	mi := &file_kira_collectives_collective_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedSpendingPool.ProtoReflect.Descriptor instead.
func (*WeightedSpendingPool) Descriptor() ([]byte, []int) {
	return file_kira_collectives_collective_proto_rawDescGZIP(), []int{2}
}

func (x *WeightedSpendingPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WeightedSpendingPool) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

type Collective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                     // max 256 characters
	Status           CollectiveStatus        `protobuf:"varint,3,opt,name=status,proto3,enum=kira.collectives.CollectiveStatus" json:"status,omitempty"`       // defines whether or not a collective should actively collect and distribute rewards or not
	DepositWhitelist *DepositWhitelist       `protobuf:"bytes,4,opt,name=deposit_whitelist,json=depositWhitelist,proto3" json:"deposit_whitelist,omitempty"`   // deposit-whitelist defines who is allowed to bond tokens
	OwnersWhitelist  *OwnersWhitelist        `protobuf:"bytes,5,opt,name=owners_whitelist,json=ownersWhitelist,proto3" json:"owners_whitelist,omitempty"`      // list of accounts/roles controlling the collective via “governance-like” proposals
	SpendingPools    []*WeightedSpendingPool `protobuf:"bytes,6,rep,name=spending_pools,json=spendingPools,proto3" json:"spending_pools,omitempty"`            // list of spending pools to which share of rewards
	ClaimStart       uint64                  `protobuf:"varint,7,opt,name=claim_start,json=claimStart,proto3" json:"claim_start,omitempty"`                    // (optional) timestamp defining when rewards claiming should start
	ClaimPeriod      uint64                  `protobuf:"varint,8,opt,name=claim_period,json=claimPeriod,proto3" json:"claim_period,omitempty"`                 // (optional) period in seconds defining every what period of time reward claim should be triggered
	ClaimEnd         uint64                  `protobuf:"varint,9,opt,name=claim_end,json=claimEnd,proto3" json:"claim_end,omitempty"`                          // (optional) timestamp defining when rewards claiming should end
	VoteQuorum       string                  `protobuf:"bytes,10,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`                    // percentage - default: 51%, collective-specific % of owner accounts that must vote YES or NO for any of the collective proposals to be valid
	VotePeriod       uint64                  `protobuf:"varint,11,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`                   // seconds - default: 600s, period of time in seconds that any of the collective proposals must last before passing or being rejected
	VoteEnactment    uint64                  `protobuf:"varint,12,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`          // seconds - default: 300s, period of time that must pass before any of the collective proposals is enacted
	Donations        []string                `protobuf:"bytes,13,rep,name=donations,proto3" json:"donations,omitempty"`                                        // rewards that the collective can control (e.g. transfer)
	Rewards          []string                `protobuf:"bytes,14,rep,name=rewards,proto3" json:"rewards,omitempty"`                                            // rewards waiting to be distributed to the spending pool once the claim-period elapses
	LastDistribution uint64                  `protobuf:"varint,15,opt,name=last_distribution,json=lastDistribution,proto3" json:"last_distribution,omitempty"` // timestamp of the block in which tokens were last distributed
	Bonds            []string                `protobuf:"bytes,16,rep,name=bonds,proto3" json:"bonds,omitempty"`                                                // total bonds put on the collective
	CreationTime     uint64                  `protobuf:"varint,17,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`             // collective creation time
}

func (x *Collective) Reset() {
	*x = Collective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_collectives_collective_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collective) ProtoMessage() {}

func (x *Collective) ProtoReflect() protoreflect.Message {
	mi := &file_kira_collectives_collective_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collective.ProtoReflect.Descriptor instead.
func (*Collective) Descriptor() ([]byte, []int) {
	return file_kira_collectives_collective_proto_rawDescGZIP(), []int{3}
}

func (x *Collective) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collective) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collective) GetStatus() CollectiveStatus {
	if x != nil {
		return x.Status
	}
	return CollectiveStatus_ACTIVE
}

func (x *Collective) GetDepositWhitelist() *DepositWhitelist {
	if x != nil {
		return x.DepositWhitelist
	}
	return nil
}

func (x *Collective) GetOwnersWhitelist() *OwnersWhitelist {
	if x != nil {
		return x.OwnersWhitelist
	}
	return nil
}

func (x *Collective) GetSpendingPools() []*WeightedSpendingPool {
	if x != nil {
		return x.SpendingPools
	}
	return nil
}

func (x *Collective) GetClaimStart() uint64 {
	if x != nil {
		return x.ClaimStart
	}
	return 0
}

func (x *Collective) GetClaimPeriod() uint64 {
	if x != nil {
		return x.ClaimPeriod
	}
	return 0
}

func (x *Collective) GetClaimEnd() uint64 {
	if x != nil {
		return x.ClaimEnd
	}
	return 0
}

func (x *Collective) GetVoteQuorum() string {
	if x != nil {
		return x.VoteQuorum
	}
	return ""
}

func (x *Collective) GetVotePeriod() uint64 {
	if x != nil {
		return x.VotePeriod
	}
	return 0
}

func (x *Collective) GetVoteEnactment() uint64 {
	if x != nil {
		return x.VoteEnactment
	}
	return 0
}

func (x *Collective) GetDonations() []string {
	if x != nil {
		return x.Donations
	}
	return nil
}

func (x *Collective) GetRewards() []string {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Collective) GetLastDistribution() uint64 {
	if x != nil {
		return x.LastDistribution
	}
	return 0
}

func (x *Collective) GetBonds() []string {
	if x != nil {
		return x.Bonds
	}
	return nil
}

func (x *Collective) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

type CollectiveContributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bonds        []string `protobuf:"bytes,3,rep,name=bonds,proto3" json:"bonds,omitempty"`                                    // list of staking DERIVATIVE tokens sent alongside tx (those tokens will be deduced from the user account)
	Locking      uint64   `protobuf:"varint,4,opt,name=locking,proto3" json:"locking,omitempty"`                               // time at which deposited tokens will become transferable
	Donation     string   `protobuf:"bytes,5,opt,name=donation,proto3" json:"donation,omitempty"`                              // a percentage of rewards that will be re-deposited to the collective
	DonationLock bool     `protobuf:"varint,6,opt,name=donation_lock,json=donationLock,proto3" json:"donation_lock,omitempty"` // defines if changing the donation percentage should not be allowed during the locking period
}

func (x *CollectiveContributor) Reset() {
	*x = CollectiveContributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_collectives_collective_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectiveContributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectiveContributor) ProtoMessage() {}

func (x *CollectiveContributor) ProtoReflect() protoreflect.Message {
	mi := &file_kira_collectives_collective_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectiveContributor.ProtoReflect.Descriptor instead.
func (*CollectiveContributor) Descriptor() ([]byte, []int) {
	return file_kira_collectives_collective_proto_rawDescGZIP(), []int{4}
}

func (x *CollectiveContributor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CollectiveContributor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectiveContributor) GetBonds() []string {
	if x != nil {
		return x.Bonds
	}
	return nil
}

func (x *CollectiveContributor) GetLocking() uint64 {
	if x != nil {
		return x.Locking
	}
	return 0
}

func (x *CollectiveContributor) GetDonation() string {
	if x != nil {
		return x.Donation
	}
	return ""
}

func (x *CollectiveContributor) GetDonationLock() bool {
	if x != nil {
		return x.DonationLock
	}
	return false
}

var File_kira_collectives_collective_proto protoreflect.FileDescriptor

var file_kira_collectives_collective_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01,
	0x22, 0x49, 0x0a, 0x0f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x78, 0x0a, 0x14, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
	0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xb1, 0x07, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a,
	0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x45, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x76, 0x6f,
	0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76,
	0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x49, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x05, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x05, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x08, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x08, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x6b, 0x2a, 0x82, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x00, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x20, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x14, 0x8a, 0x9d,
	0x20, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f,
	0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kira_collectives_collective_proto_rawDescOnce sync.Once
	file_kira_collectives_collective_proto_rawDescData = file_kira_collectives_collective_proto_rawDesc
)

func file_kira_collectives_collective_proto_rawDescGZIP() []byte {
	file_kira_collectives_collective_proto_rawDescOnce.Do(func() {
		file_kira_collectives_collective_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_collectives_collective_proto_rawDescData)
	})
	return file_kira_collectives_collective_proto_rawDescData
}

var file_kira_collectives_collective_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kira_collectives_collective_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_kira_collectives_collective_proto_goTypes = []interface{}{
	(CollectiveStatus)(0),         // 0: kira.collectives.CollectiveStatus
	(*DepositWhitelist)(nil),      // 1: kira.collectives.DepositWhitelist
	(*OwnersWhitelist)(nil),       // 2: kira.collectives.OwnersWhitelist
	(*WeightedSpendingPool)(nil),  // 3: kira.collectives.WeightedSpendingPool
	(*Collective)(nil),            // 4: kira.collectives.Collective
	(*CollectiveContributor)(nil), // 5: kira.collectives.CollectiveContributor
}
var file_kira_collectives_collective_proto_depIdxs = []int32{
	0, // 0: kira.collectives.Collective.status:type_name -> kira.collectives.CollectiveStatus
	1, // 1: kira.collectives.Collective.deposit_whitelist:type_name -> kira.collectives.DepositWhitelist
	2, // 2: kira.collectives.Collective.owners_whitelist:type_name -> kira.collectives.OwnersWhitelist
	3, // 3: kira.collectives.Collective.spending_pools:type_name -> kira.collectives.WeightedSpendingPool
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kira_collectives_collective_proto_init() }
func file_kira_collectives_collective_proto_init() {
	if File_kira_collectives_collective_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kira_collectives_collective_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_collectives_collective_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnersWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_collectives_collective_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedSpendingPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_collectives_collective_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_collectives_collective_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectiveContributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_collectives_collective_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_collectives_collective_proto_goTypes,
		DependencyIndexes: file_kira_collectives_collective_proto_depIdxs,
		EnumInfos:         file_kira_collectives_collective_proto_enumTypes,
		MessageInfos:      file_kira_collectives_collective_proto_msgTypes,
	}.Build()
	File_kira_collectives_collective_proto = out.File
	file_kira_collectives_collective_proto_rawDesc = nil
	file_kira_collectives_collective_proto_goTypes = nil
	file_kira_collectives_collective_proto_depIdxs = nil
}
