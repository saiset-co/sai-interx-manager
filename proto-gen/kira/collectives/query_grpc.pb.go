// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/collectives/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Collective_FullMethodName           = "/kira.collectives.Query/Collective"
	Query_Collectives_FullMethodName          = "/kira.collectives.Query/Collectives"
	Query_CollectivesProposals_FullMethodName = "/kira.collectives.Query/CollectivesProposals"
	Query_CollectivesByAccount_FullMethodName = "/kira.collectives.Query/CollectivesByAccount"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Collective queries a collective
	Collective(ctx context.Context, in *CollectiveRequest, opts ...grpc.CallOption) (*CollectiveResponse, error)
	// Collectives query list of all staking collectives (output list of names),
	// if `name` / `id` is specified then output full details of a single collective.
	Collectives(ctx context.Context, in *CollectivesRequest, opts ...grpc.CallOption) (*CollectivesResponse, error)
	// list id of all proposals in regards to staking collectives,
	// (or proposals in regards to a specific collective if `name` / `id` is specified in the query)
	CollectivesProposals(ctx context.Context, in *CollectivesProposalsRequest, opts ...grpc.CallOption) (*CollectivesProposalsResponse, error)
	// query list of staking collectives by an individual KIRA address
	CollectivesByAccount(ctx context.Context, in *CollectivesByAccountRequest, opts ...grpc.CallOption) (*CollectivesByAccountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Collective(ctx context.Context, in *CollectiveRequest, opts ...grpc.CallOption) (*CollectiveResponse, error) {
	out := new(CollectiveResponse)
	err := c.cc.Invoke(ctx, Query_Collective_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Collectives(ctx context.Context, in *CollectivesRequest, opts ...grpc.CallOption) (*CollectivesResponse, error) {
	out := new(CollectivesResponse)
	err := c.cc.Invoke(ctx, Query_Collectives_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectivesProposals(ctx context.Context, in *CollectivesProposalsRequest, opts ...grpc.CallOption) (*CollectivesProposalsResponse, error) {
	out := new(CollectivesProposalsResponse)
	err := c.cc.Invoke(ctx, Query_CollectivesProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectivesByAccount(ctx context.Context, in *CollectivesByAccountRequest, opts ...grpc.CallOption) (*CollectivesByAccountResponse, error) {
	out := new(CollectivesByAccountResponse)
	err := c.cc.Invoke(ctx, Query_CollectivesByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Collective queries a collective
	Collective(context.Context, *CollectiveRequest) (*CollectiveResponse, error)
	// Collectives query list of all staking collectives (output list of names),
	// if `name` / `id` is specified then output full details of a single collective.
	Collectives(context.Context, *CollectivesRequest) (*CollectivesResponse, error)
	// list id of all proposals in regards to staking collectives,
	// (or proposals in regards to a specific collective if `name` / `id` is specified in the query)
	CollectivesProposals(context.Context, *CollectivesProposalsRequest) (*CollectivesProposalsResponse, error)
	// query list of staking collectives by an individual KIRA address
	CollectivesByAccount(context.Context, *CollectivesByAccountRequest) (*CollectivesByAccountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Collective(context.Context, *CollectiveRequest) (*CollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collective not implemented")
}
func (UnimplementedQueryServer) Collectives(context.Context, *CollectivesRequest) (*CollectivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collectives not implemented")
}
func (UnimplementedQueryServer) CollectivesProposals(context.Context, *CollectivesProposalsRequest) (*CollectivesProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectivesProposals not implemented")
}
func (UnimplementedQueryServer) CollectivesByAccount(context.Context, *CollectivesByAccountRequest) (*CollectivesByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectivesByAccount not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Collective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Collective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Collective_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Collective(ctx, req.(*CollectiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Collectives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Collectives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Collectives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Collectives(ctx, req.(*CollectivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectivesProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectivesProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectivesProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollectivesProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectivesProposals(ctx, req.(*CollectivesProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectivesByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectivesByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectivesByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CollectivesByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectivesByAccount(ctx, req.(*CollectivesByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.collectives.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collective",
			Handler:    _Query_Collective_Handler,
		},
		{
			MethodName: "Collectives",
			Handler:    _Query_Collectives_Handler,
		},
		{
			MethodName: "CollectivesProposals",
			Handler:    _Query_CollectivesProposals_Handler,
		},
		{
			MethodName: "CollectivesByAccount",
			Handler:    _Query_CollectivesByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/collectives/query.proto",
}
