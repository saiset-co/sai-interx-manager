// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/multistaking/tx.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpsertStakingPool_FullMethodName         = "/kira.multistaking.Msg/UpsertStakingPool"
	Msg_Delegate_FullMethodName                  = "/kira.multistaking.Msg/Delegate"
	Msg_Undelegate_FullMethodName                = "/kira.multistaking.Msg/Undelegate"
	Msg_SetCompoundInfo_FullMethodName           = "/kira.multistaking.Msg/SetCompoundInfo"
	Msg_ClaimRewards_FullMethodName              = "/kira.multistaking.Msg/ClaimRewards"
	Msg_ClaimUndelegation_FullMethodName         = "/kira.multistaking.Msg/ClaimUndelegation"
	Msg_ClaimMaturedUndelegations_FullMethodName = "/kira.multistaking.Msg/ClaimMaturedUndelegations"
	Msg_RegisterDelegator_FullMethodName         = "/kira.multistaking.Msg/RegisterDelegator"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	UpsertStakingPool(ctx context.Context, in *MsgUpsertStakingPool, opts ...grpc.CallOption) (*MsgUpsertStakingPoolResponse, error)
	Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error)
	Undelegate(ctx context.Context, in *MsgUndelegate, opts ...grpc.CallOption) (*MsgUndelegateResponse, error)
	SetCompoundInfo(ctx context.Context, in *MsgSetCompoundInfo, opts ...grpc.CallOption) (*MsgSetCompoundInfoResponse, error)
	ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error)
	ClaimUndelegation(ctx context.Context, in *MsgClaimUndelegation, opts ...grpc.CallOption) (*MsgClaimUndelegationResponse, error)
	ClaimMaturedUndelegations(ctx context.Context, in *MsgClaimMaturedUndelegations, opts ...grpc.CallOption) (*MsgClaimMaturedUndelegationsResponse, error)
	RegisterDelegator(ctx context.Context, in *MsgRegisterDelegator, opts ...grpc.CallOption) (*MsgRegisterDelegatorResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpsertStakingPool(ctx context.Context, in *MsgUpsertStakingPool, opts ...grpc.CallOption) (*MsgUpsertStakingPoolResponse, error) {
	out := new(MsgUpsertStakingPoolResponse)
	err := c.cc.Invoke(ctx, Msg_UpsertStakingPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error) {
	out := new(MsgDelegateResponse)
	err := c.cc.Invoke(ctx, Msg_Delegate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Undelegate(ctx context.Context, in *MsgUndelegate, opts ...grpc.CallOption) (*MsgUndelegateResponse, error) {
	out := new(MsgUndelegateResponse)
	err := c.cc.Invoke(ctx, Msg_Undelegate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCompoundInfo(ctx context.Context, in *MsgSetCompoundInfo, opts ...grpc.CallOption) (*MsgSetCompoundInfoResponse, error) {
	out := new(MsgSetCompoundInfoResponse)
	err := c.cc.Invoke(ctx, Msg_SetCompoundInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error) {
	out := new(MsgClaimRewardsResponse)
	err := c.cc.Invoke(ctx, Msg_ClaimRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimUndelegation(ctx context.Context, in *MsgClaimUndelegation, opts ...grpc.CallOption) (*MsgClaimUndelegationResponse, error) {
	out := new(MsgClaimUndelegationResponse)
	err := c.cc.Invoke(ctx, Msg_ClaimUndelegation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimMaturedUndelegations(ctx context.Context, in *MsgClaimMaturedUndelegations, opts ...grpc.CallOption) (*MsgClaimMaturedUndelegationsResponse, error) {
	out := new(MsgClaimMaturedUndelegationsResponse)
	err := c.cc.Invoke(ctx, Msg_ClaimMaturedUndelegations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterDelegator(ctx context.Context, in *MsgRegisterDelegator, opts ...grpc.CallOption) (*MsgRegisterDelegatorResponse, error) {
	out := new(MsgRegisterDelegatorResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterDelegator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	UpsertStakingPool(context.Context, *MsgUpsertStakingPool) (*MsgUpsertStakingPoolResponse, error)
	Delegate(context.Context, *MsgDelegate) (*MsgDelegateResponse, error)
	Undelegate(context.Context, *MsgUndelegate) (*MsgUndelegateResponse, error)
	SetCompoundInfo(context.Context, *MsgSetCompoundInfo) (*MsgSetCompoundInfoResponse, error)
	ClaimRewards(context.Context, *MsgClaimRewards) (*MsgClaimRewardsResponse, error)
	ClaimUndelegation(context.Context, *MsgClaimUndelegation) (*MsgClaimUndelegationResponse, error)
	ClaimMaturedUndelegations(context.Context, *MsgClaimMaturedUndelegations) (*MsgClaimMaturedUndelegationsResponse, error)
	RegisterDelegator(context.Context, *MsgRegisterDelegator) (*MsgRegisterDelegatorResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpsertStakingPool(context.Context, *MsgUpsertStakingPool) (*MsgUpsertStakingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStakingPool not implemented")
}
func (UnimplementedMsgServer) Delegate(context.Context, *MsgDelegate) (*MsgDelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}
func (UnimplementedMsgServer) Undelegate(context.Context, *MsgUndelegate) (*MsgUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Undelegate not implemented")
}
func (UnimplementedMsgServer) SetCompoundInfo(context.Context, *MsgSetCompoundInfo) (*MsgSetCompoundInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompoundInfo not implemented")
}
func (UnimplementedMsgServer) ClaimRewards(context.Context, *MsgClaimRewards) (*MsgClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}
func (UnimplementedMsgServer) ClaimUndelegation(context.Context, *MsgClaimUndelegation) (*MsgClaimUndelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimUndelegation not implemented")
}
func (UnimplementedMsgServer) ClaimMaturedUndelegations(context.Context, *MsgClaimMaturedUndelegations) (*MsgClaimMaturedUndelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimMaturedUndelegations not implemented")
}
func (UnimplementedMsgServer) RegisterDelegator(context.Context, *MsgRegisterDelegator) (*MsgRegisterDelegatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDelegator not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpsertStakingPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpsertStakingPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpsertStakingPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpsertStakingPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpsertStakingPool(ctx, req.(*MsgUpsertStakingPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Delegate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delegate(ctx, req.(*MsgDelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Undelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Undelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Undelegate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Undelegate(ctx, req.(*MsgUndelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCompoundInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCompoundInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCompoundInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetCompoundInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCompoundInfo(ctx, req.(*MsgSetCompoundInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ClaimRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRewards(ctx, req.(*MsgClaimRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimUndelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimUndelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimUndelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ClaimUndelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimUndelegation(ctx, req.(*MsgClaimUndelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimMaturedUndelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimMaturedUndelegations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimMaturedUndelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ClaimMaturedUndelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimMaturedUndelegations(ctx, req.(*MsgClaimMaturedUndelegations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterDelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDelegator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterDelegator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDelegator(ctx, req.(*MsgRegisterDelegator))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.multistaking.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertStakingPool",
			Handler:    _Msg_UpsertStakingPool_Handler,
		},
		{
			MethodName: "Delegate",
			Handler:    _Msg_Delegate_Handler,
		},
		{
			MethodName: "Undelegate",
			Handler:    _Msg_Undelegate_Handler,
		},
		{
			MethodName: "SetCompoundInfo",
			Handler:    _Msg_SetCompoundInfo_Handler,
		},
		{
			MethodName: "ClaimRewards",
			Handler:    _Msg_ClaimRewards_Handler,
		},
		{
			MethodName: "ClaimUndelegation",
			Handler:    _Msg_ClaimUndelegation_Handler,
		},
		{
			MethodName: "ClaimMaturedUndelegations",
			Handler:    _Msg_ClaimMaturedUndelegations_Handler,
		},
		{
			MethodName: "RegisterDelegator",
			Handler:    _Msg_RegisterDelegator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/multistaking/tx.proto",
}
