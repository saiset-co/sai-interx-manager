// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/multistaking/multistaking.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StakingPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Validator          string   `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Enabled            bool     `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Slashed            string   `protobuf:"bytes,4,opt,name=slashed,proto3" json:"slashed,omitempty"`
	TotalStakingTokens []string `protobuf:"bytes,5,rep,name=total_staking_tokens,json=totalStakingTokens,proto3" json:"total_staking_tokens,omitempty"`
	TotalShareTokens   []string `protobuf:"bytes,6,rep,name=total_share_tokens,json=totalShareTokens,proto3" json:"total_share_tokens,omitempty"`
	TotalRewards       []string `protobuf:"bytes,7,rep,name=total_rewards,json=totalRewards,proto3" json:"total_rewards,omitempty"`
	// percentage (e.g. 0.1 == 10%) commission that the validator charges from all block reward
	Commission string `protobuf:"bytes,8,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *StakingPool) Reset() {
	*x = StakingPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_multistaking_multistaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPool) ProtoMessage() {}

func (x *StakingPool) ProtoReflect() protoreflect.Message {
	mi := &file_kira_multistaking_multistaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPool.ProtoReflect.Descriptor instead.
func (*StakingPool) Descriptor() ([]byte, []int) {
	return file_kira_multistaking_multistaking_proto_rawDescGZIP(), []int{0}
}

func (x *StakingPool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StakingPool) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *StakingPool) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *StakingPool) GetSlashed() string {
	if x != nil {
		return x.Slashed
	}
	return ""
}

func (x *StakingPool) GetTotalStakingTokens() []string {
	if x != nil {
		return x.TotalStakingTokens
	}
	return nil
}

func (x *StakingPool) GetTotalShareTokens() []string {
	if x != nil {
		return x.TotalShareTokens
	}
	return nil
}

func (x *StakingPool) GetTotalRewards() []string {
	if x != nil {
		return x.TotalRewards
	}
	return nil
}

func (x *StakingPool) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

type Undelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address    string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ValAddress string   `protobuf:"bytes,3,opt,name=val_address,json=valAddress,proto3" json:"val_address,omitempty"`
	Expiry     uint64   `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	Amount     []string `protobuf:"bytes,5,rep,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Undelegation) Reset() {
	*x = Undelegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_multistaking_multistaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Undelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Undelegation) ProtoMessage() {}

func (x *Undelegation) ProtoReflect() protoreflect.Message {
	mi := &file_kira_multistaking_multistaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Undelegation.ProtoReflect.Descriptor instead.
func (*Undelegation) Descriptor() ([]byte, []int) {
	return file_kira_multistaking_multistaking_proto_rawDescGZIP(), []int{1}
}

func (x *Undelegation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Undelegation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Undelegation) GetValAddress() string {
	if x != nil {
		return x.ValAddress
	}
	return ""
}

func (x *Undelegation) GetExpiry() uint64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Undelegation) GetAmount() []string {
	if x != nil {
		return x.Amount
	}
	return nil
}

type Rewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegator string   `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Rewards   []string `protobuf:"bytes,2,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *Rewards) Reset() {
	*x = Rewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_multistaking_multistaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rewards) ProtoMessage() {}

func (x *Rewards) ProtoReflect() protoreflect.Message {
	mi := &file_kira_multistaking_multistaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rewards.ProtoReflect.Descriptor instead.
func (*Rewards) Descriptor() ([]byte, []int) {
	return file_kira_multistaking_multistaking_proto_rawDescGZIP(), []int{2}
}

func (x *Rewards) GetDelegator() string {
	if x != nil {
		return x.Delegator
	}
	return ""
}

func (x *Rewards) GetRewards() []string {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type CompoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegator      string   `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	AllDenom       bool     `protobuf:"varint,2,opt,name=all_denom,json=allDenom,proto3" json:"all_denom,omitempty"`
	CompoundDenoms []string `protobuf:"bytes,3,rep,name=compound_denoms,json=compoundDenoms,proto3" json:"compound_denoms,omitempty"`
	LastExecBlock  uint64   `protobuf:"varint,4,opt,name=last_exec_block,json=lastExecBlock,proto3" json:"last_exec_block,omitempty"`
}

func (x *CompoundInfo) Reset() {
	*x = CompoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_multistaking_multistaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundInfo) ProtoMessage() {}

func (x *CompoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kira_multistaking_multistaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundInfo.ProtoReflect.Descriptor instead.
func (*CompoundInfo) Descriptor() ([]byte, []int) {
	return file_kira_multistaking_multistaking_proto_rawDescGZIP(), []int{3}
}

func (x *CompoundInfo) GetDelegator() string {
	if x != nil {
		return x.Delegator
	}
	return ""
}

func (x *CompoundInfo) GetAllDenom() bool {
	if x != nil {
		return x.AllDenom
	}
	return false
}

func (x *CompoundInfo) GetCompoundDenoms() []string {
	if x != nil {
		return x.CompoundDenoms
	}
	return nil
}

func (x *CompoundInfo) GetLastExecBlock() uint64 {
	if x != nil {
		return x.LastExecBlock
	}
	return 0
}

var File_kira_multistaking_multistaking_proto protoreflect.FileDescriptor

var file_kira_multistaking_multistaking_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x87, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x61, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x47,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x34, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f,
	0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa8, 0xe2, 0x1e, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_multistaking_multistaking_proto_rawDescOnce sync.Once
	file_kira_multistaking_multistaking_proto_rawDescData = file_kira_multistaking_multistaking_proto_rawDesc
)

func file_kira_multistaking_multistaking_proto_rawDescGZIP() []byte {
	file_kira_multistaking_multistaking_proto_rawDescOnce.Do(func() {
		file_kira_multistaking_multistaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_multistaking_multistaking_proto_rawDescData)
	})
	return file_kira_multistaking_multistaking_proto_rawDescData
}

var file_kira_multistaking_multistaking_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kira_multistaking_multistaking_proto_goTypes = []interface{}{
	(*StakingPool)(nil),  // 0: kira.multistaking.StakingPool
	(*Undelegation)(nil), // 1: kira.multistaking.Undelegation
	(*Rewards)(nil),      // 2: kira.multistaking.Rewards
	(*CompoundInfo)(nil), // 3: kira.multistaking.CompoundInfo
}
var file_kira_multistaking_multistaking_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_kira_multistaking_multistaking_proto_init() }
func file_kira_multistaking_multistaking_proto_init() {
	if File_kira_multistaking_multistaking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kira_multistaking_multistaking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_multistaking_multistaking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Undelegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_multistaking_multistaking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_multistaking_multistaking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_multistaking_multistaking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_multistaking_multistaking_proto_goTypes,
		DependencyIndexes: file_kira_multistaking_multistaking_proto_depIdxs,
		MessageInfos:      file_kira_multistaking_multistaking_proto_msgTypes,
	}.Build()
	File_kira_multistaking_multistaking_proto = out.File
	file_kira_multistaking_multistaking_proto_rawDesc = nil
	file_kira_multistaking_multistaking_proto_goTypes = nil
	file_kira_multistaking_multistaking_proto_depIdxs = nil
}
