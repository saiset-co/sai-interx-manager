// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/basket/basket.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Basket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                   // basket identifier
	Suffix          string         `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`                                            // denom suffix, resulting token denom would be B1_usd when the value is "usd"
	Description     string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                  // basket description
	Amount          string         `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`                                            // total supply of all minted basket tokens
	SwapFee         string         `protobuf:"bytes,5,opt,name=swap_fee,json=swapFee,proto3" json:"swap_fee,omitempty"`                           // range of 0 to 1, default 0.0015 (0.15%) - percentage fee to be paid for swapping tokens
	SlipppageFeeMin string         `protobuf:"bytes,6,opt,name=slipppage_fee_min,json=slipppageFeeMin,proto3" json:"slipppage_fee_min,omitempty"` // range of 0 to 1, default 0.0015 (0.15%) - minimum percentage to be paid as penalty for disbalancing the basket
	TokensCap       string         `protobuf:"bytes,7,opt,name=tokens_cap,json=tokensCap,proto3" json:"tokens_cap,omitempty"`                     // range of 0 to 1, E.g: fail mint/burn/swap tx if more than 90% supply would end up being represented by a single token
	LimitsPeriod    uint64         `protobuf:"varint,8,opt,name=limits_period,json=limitsPeriod,proto3" json:"limits_period,omitempty"`           // // in seconds, period after which all mint/burns limits are reset (default 1 day)
	MintsMin        string         `protobuf:"bytes,9,opt,name=mints_min,json=mintsMin,proto3" json:"mints_min,omitempty"`                        // minimum amount tokens that must be minted in a single tx
	MintsMax        string         `protobuf:"bytes,10,opt,name=mints_max,json=mintsMax,proto3" json:"mints_max,omitempty"`                       // maximum daily issuance limit tokens
	MintsDisabled   bool           `protobuf:"varint,11,opt,name=mints_disabled,json=mintsDisabled,proto3" json:"mints_disabled,omitempty"`
	BurnsMin        string         `protobuf:"bytes,12,opt,name=burns_min,json=burnsMin,proto3" json:"burns_min,omitempty"` // minimum amount tokens that must be burned in a single tx
	BurnsMax        string         `protobuf:"bytes,13,opt,name=burns_max,json=burnsMax,proto3" json:"burns_max,omitempty"` // maximum daily burn amount (resulting in aggregate tokens redemptions)
	BurnsDisabled   bool           `protobuf:"varint,14,opt,name=burns_disabled,json=burnsDisabled,proto3" json:"burns_disabled,omitempty"`
	SwapsMin        string         `protobuf:"bytes,15,opt,name=swaps_min,json=swapsMin,proto3" json:"swaps_min,omitempty"` // minimum value of aggregate tokens expressed in B1_usd that must be swapped in a single tx
	SwapsMax        string         `protobuf:"bytes,16,opt,name=swaps_max,json=swapsMax,proto3" json:"swaps_max,omitempty"` // maximum daily swap amount of aggregate tokens (resulting in aggregate tokens redemptions)
	SwapsDisabled   bool           `protobuf:"varint,17,opt,name=swaps_disabled,json=swapsDisabled,proto3" json:"swaps_disabled,omitempty"`
	Tokens          []*BasketToken `protobuf:"bytes,18,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Surplus         []string       `protobuf:"bytes,19,rep,name=surplus,proto3" json:"surplus,omitempty"` // list of excess tokens deposited as result of rewards and/or swaps (that did not resulted in minting)
}

func (x *Basket) Reset() {
	*x = Basket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_basket_basket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Basket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Basket) ProtoMessage() {}

func (x *Basket) ProtoReflect() protoreflect.Message {
	mi := &file_kira_basket_basket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Basket.ProtoReflect.Descriptor instead.
func (*Basket) Descriptor() ([]byte, []int) {
	return file_kira_basket_basket_proto_rawDescGZIP(), []int{0}
}

func (x *Basket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Basket) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *Basket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Basket) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Basket) GetSwapFee() string {
	if x != nil {
		return x.SwapFee
	}
	return ""
}

func (x *Basket) GetSlipppageFeeMin() string {
	if x != nil {
		return x.SlipppageFeeMin
	}
	return ""
}

func (x *Basket) GetTokensCap() string {
	if x != nil {
		return x.TokensCap
	}
	return ""
}

func (x *Basket) GetLimitsPeriod() uint64 {
	if x != nil {
		return x.LimitsPeriod
	}
	return 0
}

func (x *Basket) GetMintsMin() string {
	if x != nil {
		return x.MintsMin
	}
	return ""
}

func (x *Basket) GetMintsMax() string {
	if x != nil {
		return x.MintsMax
	}
	return ""
}

func (x *Basket) GetMintsDisabled() bool {
	if x != nil {
		return x.MintsDisabled
	}
	return false
}

func (x *Basket) GetBurnsMin() string {
	if x != nil {
		return x.BurnsMin
	}
	return ""
}

func (x *Basket) GetBurnsMax() string {
	if x != nil {
		return x.BurnsMax
	}
	return ""
}

func (x *Basket) GetBurnsDisabled() bool {
	if x != nil {
		return x.BurnsDisabled
	}
	return false
}

func (x *Basket) GetSwapsMin() string {
	if x != nil {
		return x.SwapsMin
	}
	return ""
}

func (x *Basket) GetSwapsMax() string {
	if x != nil {
		return x.SwapsMax
	}
	return ""
}

func (x *Basket) GetSwapsDisabled() bool {
	if x != nil {
		return x.SwapsDisabled
	}
	return false
}

func (x *Basket) GetTokens() []*BasketToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Basket) GetSurplus() []string {
	if x != nil {
		return x.Surplus
	}
	return nil
}

type BasketToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom     string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`          // denom of one of the aggregate tokens
	Weight    string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`        // relative value of the token to its underlying derivative 100 deposit should result in 99 issuance
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`        // total deposited amount of usdt available for withdrawl
	Deposits  bool   `protobuf:"varint,4,opt,name=deposits,proto3" json:"deposits,omitempty"`   // defines if deposits of usdt resulting in minting are allowed
	Withdraws bool   `protobuf:"varint,5,opt,name=withdraws,proto3" json:"withdraws,omitempty"` // defines if withdraws of usdt as result of burns are allowed
	Swaps     bool   `protobuf:"varint,6,opt,name=swaps,proto3" json:"swaps,omitempty"`         // defines if swaps of usdt for other tokens are allowed
}

func (x *BasketToken) Reset() {
	*x = BasketToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_basket_basket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasketToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasketToken) ProtoMessage() {}

func (x *BasketToken) ProtoReflect() protoreflect.Message {
	mi := &file_kira_basket_basket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasketToken.ProtoReflect.Descriptor instead.
func (*BasketToken) Descriptor() ([]byte, []int) {
	return file_kira_basket_basket_proto_rawDescGZIP(), []int{1}
}

func (x *BasketToken) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *BasketToken) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *BasketToken) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BasketToken) GetDeposits() bool {
	if x != nil {
		return x.Deposits
	}
	return false
}

func (x *BasketToken) GetWithdraws() bool {
	if x != nil {
		return x.Withdraws
	}
	return false
}

func (x *BasketToken) GetSwaps() bool {
	if x != nil {
		return x.Swaps
	}
	return false
}

// used to record mint, burn, swap actions to prevent actions from exceeding daily limitation
type AmountAtTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BasketId uint64 `protobuf:"varint,1,opt,name=basket_id,json=basketId,proto3" json:"basket_id,omitempty"`
	Time     uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AmountAtTime) Reset() {
	*x = AmountAtTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_basket_basket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountAtTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountAtTime) ProtoMessage() {}

func (x *AmountAtTime) ProtoReflect() protoreflect.Message {
	mi := &file_kira_basket_basket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountAtTime.ProtoReflect.Descriptor instead.
func (*AmountAtTime) Descriptor() ([]byte, []int) {
	return file_kira_basket_basket_proto_rawDescGZIP(), []int{2}
}

func (x *AmountAtTime) GetBasketId() uint64 {
	if x != nil {
		return x.BasketId
	}
	return 0
}

func (x *AmountAtTime) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AmountAtTime) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Params represents the parameters used for by the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_basket_basket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_kira_basket_basket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_kira_basket_basket_proto_rawDescGZIP(), []int{3}
}

var File_kira_basket_basket_proto protoreflect.FileDescriptor

var file_kira_basket_basket_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2f, 0x62, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb,
	0x08, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x73,
	0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x70, 0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x63, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x61,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x73,
	0x4d, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x73, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x62, 0x75, 0x72, 0x6e, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x62, 0x75, 0x72, 0x6e,
	0x73, 0x4d, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x62, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x73, 0x4d, 0x61,
	0x78, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x75, 0x72, 0x6e, 0x73,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x77, 0x61,
	0x70, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x73, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x73, 0x4d,
	0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x22, 0x83, 0x02, 0x0a,
	0x0b, 0x42, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x46, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x77, 0x61, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x77, 0x61,
	0x70, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x08, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x2e, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65,
	0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0xa8, 0xe2, 0x1e, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_basket_basket_proto_rawDescOnce sync.Once
	file_kira_basket_basket_proto_rawDescData = file_kira_basket_basket_proto_rawDesc
)

func file_kira_basket_basket_proto_rawDescGZIP() []byte {
	file_kira_basket_basket_proto_rawDescOnce.Do(func() {
		file_kira_basket_basket_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_basket_basket_proto_rawDescData)
	})
	return file_kira_basket_basket_proto_rawDescData
}

var file_kira_basket_basket_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kira_basket_basket_proto_goTypes = []interface{}{
	(*Basket)(nil),       // 0: kira.basket.Basket
	(*BasketToken)(nil),  // 1: kira.basket.BasketToken
	(*AmountAtTime)(nil), // 2: kira.basket.AmountAtTime
	(*Params)(nil),       // 3: kira.basket.Params
}
var file_kira_basket_basket_proto_depIdxs = []int32{
	1, // 0: kira.basket.Basket.tokens:type_name -> kira.basket.BasketToken
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kira_basket_basket_proto_init() }
func file_kira_basket_basket_proto_init() {
	if File_kira_basket_basket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kira_basket_basket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Basket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_basket_basket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasketToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_basket_basket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountAtTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_basket_basket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_basket_basket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_basket_basket_proto_goTypes,
		DependencyIndexes: file_kira_basket_basket_proto_depIdxs,
		MessageInfos:      file_kira_basket_basket_proto_msgTypes,
	}.Build()
	File_kira_basket_basket_proto = out.File
	file_kira_basket_basket_proto_rawDesc = nil
	file_kira_basket_basket_proto_goTypes = nil
	file_kira_basket_basket_proto_depIdxs = nil
}
