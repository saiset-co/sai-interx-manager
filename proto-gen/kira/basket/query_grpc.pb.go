// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/basket/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_TokenBasketById_FullMethodName       = "/kira.basket.Query/TokenBasketById"
	Query_TokenBasketByDenom_FullMethodName    = "/kira.basket.Query/TokenBasketByDenom"
	Query_TokenBaskets_FullMethodName          = "/kira.basket.Query/TokenBaskets"
	Query_BaksetHistoricalMints_FullMethodName = "/kira.basket.Query/BaksetHistoricalMints"
	Query_BaksetHistoricalBurns_FullMethodName = "/kira.basket.Query/BaksetHistoricalBurns"
	Query_BaksetHistoricalSwaps_FullMethodName = "/kira.basket.Query/BaksetHistoricalSwaps"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// TokenBasketById queries a single basket by id
	TokenBasketById(ctx context.Context, in *QueryTokenBasketByIdRequest, opts ...grpc.CallOption) (*QueryTokenBasketByIdResponse, error)
	// TokenBasketByDenom queries a single basket by denom
	TokenBasketByDenom(ctx context.Context, in *QueryTokenBasketByDenomRequest, opts ...grpc.CallOption) (*QueryTokenBasketByDenomResponse, error)
	// TokenBaskets queries token baskets by filter
	TokenBaskets(ctx context.Context, in *QueryTokenBasketsRequest, opts ...grpc.CallOption) (*QueryTokenBasketsResponse, error)
	// BaksetHistoricalMints queries historical mints on a specific basket
	BaksetHistoricalMints(ctx context.Context, in *QueryBasketHistoricalMintsRequest, opts ...grpc.CallOption) (*QueryBasketHistoricalMintsResponse, error)
	// BaksetHistoricalBurns queries historical burns on a specific basket
	BaksetHistoricalBurns(ctx context.Context, in *QueryBasketHistoricalBurnsRequest, opts ...grpc.CallOption) (*QueryBasketHistoricalBurnsResponse, error)
	// BaksetHistoricalSwaps queries historical swaps on a specific basket
	BaksetHistoricalSwaps(ctx context.Context, in *QueryBasketHistoricalSwapsRequest, opts ...grpc.CallOption) (*QueryBasketHistoricalSwapsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TokenBasketById(ctx context.Context, in *QueryTokenBasketByIdRequest, opts ...grpc.CallOption) (*QueryTokenBasketByIdResponse, error) {
	out := new(QueryTokenBasketByIdResponse)
	err := c.cc.Invoke(ctx, Query_TokenBasketById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenBasketByDenom(ctx context.Context, in *QueryTokenBasketByDenomRequest, opts ...grpc.CallOption) (*QueryTokenBasketByDenomResponse, error) {
	out := new(QueryTokenBasketByDenomResponse)
	err := c.cc.Invoke(ctx, Query_TokenBasketByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenBaskets(ctx context.Context, in *QueryTokenBasketsRequest, opts ...grpc.CallOption) (*QueryTokenBasketsResponse, error) {
	out := new(QueryTokenBasketsResponse)
	err := c.cc.Invoke(ctx, Query_TokenBaskets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BaksetHistoricalMints(ctx context.Context, in *QueryBasketHistoricalMintsRequest, opts ...grpc.CallOption) (*QueryBasketHistoricalMintsResponse, error) {
	out := new(QueryBasketHistoricalMintsResponse)
	err := c.cc.Invoke(ctx, Query_BaksetHistoricalMints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BaksetHistoricalBurns(ctx context.Context, in *QueryBasketHistoricalBurnsRequest, opts ...grpc.CallOption) (*QueryBasketHistoricalBurnsResponse, error) {
	out := new(QueryBasketHistoricalBurnsResponse)
	err := c.cc.Invoke(ctx, Query_BaksetHistoricalBurns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BaksetHistoricalSwaps(ctx context.Context, in *QueryBasketHistoricalSwapsRequest, opts ...grpc.CallOption) (*QueryBasketHistoricalSwapsResponse, error) {
	out := new(QueryBasketHistoricalSwapsResponse)
	err := c.cc.Invoke(ctx, Query_BaksetHistoricalSwaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// TokenBasketById queries a single basket by id
	TokenBasketById(context.Context, *QueryTokenBasketByIdRequest) (*QueryTokenBasketByIdResponse, error)
	// TokenBasketByDenom queries a single basket by denom
	TokenBasketByDenom(context.Context, *QueryTokenBasketByDenomRequest) (*QueryTokenBasketByDenomResponse, error)
	// TokenBaskets queries token baskets by filter
	TokenBaskets(context.Context, *QueryTokenBasketsRequest) (*QueryTokenBasketsResponse, error)
	// BaksetHistoricalMints queries historical mints on a specific basket
	BaksetHistoricalMints(context.Context, *QueryBasketHistoricalMintsRequest) (*QueryBasketHistoricalMintsResponse, error)
	// BaksetHistoricalBurns queries historical burns on a specific basket
	BaksetHistoricalBurns(context.Context, *QueryBasketHistoricalBurnsRequest) (*QueryBasketHistoricalBurnsResponse, error)
	// BaksetHistoricalSwaps queries historical swaps on a specific basket
	BaksetHistoricalSwaps(context.Context, *QueryBasketHistoricalSwapsRequest) (*QueryBasketHistoricalSwapsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) TokenBasketById(context.Context, *QueryTokenBasketByIdRequest) (*QueryTokenBasketByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBasketById not implemented")
}
func (UnimplementedQueryServer) TokenBasketByDenom(context.Context, *QueryTokenBasketByDenomRequest) (*QueryTokenBasketByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBasketByDenom not implemented")
}
func (UnimplementedQueryServer) TokenBaskets(context.Context, *QueryTokenBasketsRequest) (*QueryTokenBasketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBaskets not implemented")
}
func (UnimplementedQueryServer) BaksetHistoricalMints(context.Context, *QueryBasketHistoricalMintsRequest) (*QueryBasketHistoricalMintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaksetHistoricalMints not implemented")
}
func (UnimplementedQueryServer) BaksetHistoricalBurns(context.Context, *QueryBasketHistoricalBurnsRequest) (*QueryBasketHistoricalBurnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaksetHistoricalBurns not implemented")
}
func (UnimplementedQueryServer) BaksetHistoricalSwaps(context.Context, *QueryBasketHistoricalSwapsRequest) (*QueryBasketHistoricalSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaksetHistoricalSwaps not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_TokenBasketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenBasketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBasketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenBasketById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBasketById(ctx, req.(*QueryTokenBasketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenBasketByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenBasketByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBasketByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenBasketByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBasketByDenom(ctx, req.(*QueryTokenBasketByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenBaskets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenBasketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBaskets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenBaskets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBaskets(ctx, req.(*QueryTokenBasketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BaksetHistoricalMints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBasketHistoricalMintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BaksetHistoricalMints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BaksetHistoricalMints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BaksetHistoricalMints(ctx, req.(*QueryBasketHistoricalMintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BaksetHistoricalBurns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBasketHistoricalBurnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BaksetHistoricalBurns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BaksetHistoricalBurns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BaksetHistoricalBurns(ctx, req.(*QueryBasketHistoricalBurnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BaksetHistoricalSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBasketHistoricalSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BaksetHistoricalSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BaksetHistoricalSwaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BaksetHistoricalSwaps(ctx, req.(*QueryBasketHistoricalSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.basket.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenBasketById",
			Handler:    _Query_TokenBasketById_Handler,
		},
		{
			MethodName: "TokenBasketByDenom",
			Handler:    _Query_TokenBasketByDenom_Handler,
		},
		{
			MethodName: "TokenBaskets",
			Handler:    _Query_TokenBaskets_Handler,
		},
		{
			MethodName: "BaksetHistoricalMints",
			Handler:    _Query_BaksetHistoricalMints_Handler,
		},
		{
			MethodName: "BaksetHistoricalBurns",
			Handler:    _Query_BaksetHistoricalBurns_Handler,
		},
		{
			MethodName: "BaksetHistoricalSwaps",
			Handler:    _Query_BaksetHistoricalSwaps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/basket/query.proto",
}
