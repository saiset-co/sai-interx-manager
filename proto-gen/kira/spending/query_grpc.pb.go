// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/spending/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_QueryPoolNames_FullMethodName      = "/kira.spending.Query/QueryPoolNames"
	Query_QueryPoolByName_FullMethodName     = "/kira.spending.Query/QueryPoolByName"
	Query_QueryPoolProposals_FullMethodName  = "/kira.spending.Query/QueryPoolProposals"
	Query_QueryPoolsByAccount_FullMethodName = "/kira.spending.Query/QueryPoolsByAccount"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// query-pools - query list of pool names
	QueryPoolNames(ctx context.Context, in *QueryPoolNamesRequest, opts ...grpc.CallOption) (*QueryPoolNamesResponse, error)
	// query-pool - query pool by name
	QueryPoolByName(ctx context.Context, in *QueryPoolByNameRequest, opts ...grpc.CallOption) (*QueryPoolByNameResponse, error)
	// query-pool-proposals - query pool proposals by name
	QueryPoolProposals(ctx context.Context, in *QueryPoolProposalsRequest, opts ...grpc.CallOption) (*QueryPoolProposalsResponse, error)
	// query-pools-by-account - query list of pool names where specific kira account can register its claim or otherwise claim tokens from
	QueryPoolsByAccount(ctx context.Context, in *QueryPoolsByAccountRequest, opts ...grpc.CallOption) (*QueryPoolsByAccountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryPoolNames(ctx context.Context, in *QueryPoolNamesRequest, opts ...grpc.CallOption) (*QueryPoolNamesResponse, error) {
	out := new(QueryPoolNamesResponse)
	err := c.cc.Invoke(ctx, Query_QueryPoolNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolByName(ctx context.Context, in *QueryPoolByNameRequest, opts ...grpc.CallOption) (*QueryPoolByNameResponse, error) {
	out := new(QueryPoolByNameResponse)
	err := c.cc.Invoke(ctx, Query_QueryPoolByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolProposals(ctx context.Context, in *QueryPoolProposalsRequest, opts ...grpc.CallOption) (*QueryPoolProposalsResponse, error) {
	out := new(QueryPoolProposalsResponse)
	err := c.cc.Invoke(ctx, Query_QueryPoolProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolsByAccount(ctx context.Context, in *QueryPoolsByAccountRequest, opts ...grpc.CallOption) (*QueryPoolsByAccountResponse, error) {
	out := new(QueryPoolsByAccountResponse)
	err := c.cc.Invoke(ctx, Query_QueryPoolsByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// query-pools - query list of pool names
	QueryPoolNames(context.Context, *QueryPoolNamesRequest) (*QueryPoolNamesResponse, error)
	// query-pool - query pool by name
	QueryPoolByName(context.Context, *QueryPoolByNameRequest) (*QueryPoolByNameResponse, error)
	// query-pool-proposals - query pool proposals by name
	QueryPoolProposals(context.Context, *QueryPoolProposalsRequest) (*QueryPoolProposalsResponse, error)
	// query-pools-by-account - query list of pool names where specific kira account can register its claim or otherwise claim tokens from
	QueryPoolsByAccount(context.Context, *QueryPoolsByAccountRequest) (*QueryPoolsByAccountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) QueryPoolNames(context.Context, *QueryPoolNamesRequest) (*QueryPoolNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolNames not implemented")
}
func (UnimplementedQueryServer) QueryPoolByName(context.Context, *QueryPoolByNameRequest) (*QueryPoolByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolByName not implemented")
}
func (UnimplementedQueryServer) QueryPoolProposals(context.Context, *QueryPoolProposalsRequest) (*QueryPoolProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolProposals not implemented")
}
func (UnimplementedQueryServer) QueryPoolsByAccount(context.Context, *QueryPoolsByAccountRequest) (*QueryPoolsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolsByAccount not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_QueryPoolNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPoolNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolNames(ctx, req.(*QueryPoolNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPoolByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolByName(ctx, req.(*QueryPoolByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPoolProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolProposals(ctx, req.(*QueryPoolProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPoolsByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolsByAccount(ctx, req.(*QueryPoolsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.spending.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPoolNames",
			Handler:    _Query_QueryPoolNames_Handler,
		},
		{
			MethodName: "QueryPoolByName",
			Handler:    _Query_QueryPoolByName_Handler,
		},
		{
			MethodName: "QueryPoolProposals",
			Handler:    _Query_QueryPoolProposals_Handler,
		},
		{
			MethodName: "QueryPoolsByAccount",
			Handler:    _Query_QueryPoolsByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/spending/query.proto",
}
