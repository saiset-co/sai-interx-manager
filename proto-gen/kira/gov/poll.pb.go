// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/gov/poll.proto

package types

import (
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PollVoteOption int32

const (
	// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	PollVoteOption_POLL_VOTE_OPTION_UNSPECIFIED PollVoteOption = 0
	// VOTE_OPTION_ABSTAIN defines an abstain vote option.
	PollVoteOption_POLL_VOTE_OPTION_ABSTAIN PollVoteOption = 1
	// VOTE_OPTION_NO defines a no vote option.
	PollVoteOption_POLL_VOTE_OPTION_CUSTOM PollVoteOption = 2
	// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	PollVoteOption_POLL_VOTE_OPTION_NO_WITH_VETO PollVoteOption = 3
)

// Enum value maps for PollVoteOption.
var (
	PollVoteOption_name = map[int32]string{
		0: "POLL_VOTE_OPTION_UNSPECIFIED",
		1: "POLL_VOTE_OPTION_ABSTAIN",
		2: "POLL_VOTE_OPTION_CUSTOM",
		3: "POLL_VOTE_OPTION_NO_WITH_VETO",
	}
	PollVoteOption_value = map[string]int32{
		"POLL_VOTE_OPTION_UNSPECIFIED":  0,
		"POLL_VOTE_OPTION_ABSTAIN":      1,
		"POLL_VOTE_OPTION_CUSTOM":       2,
		"POLL_VOTE_OPTION_NO_WITH_VETO": 3,
	}
)

func (x PollVoteOption) Enum() *PollVoteOption {
	p := new(PollVoteOption)
	*p = x
	return p
}

func (x PollVoteOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PollVoteOption) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_gov_poll_proto_enumTypes[0].Descriptor()
}

func (PollVoteOption) Type() protoreflect.EnumType {
	return &file_kira_gov_poll_proto_enumTypes[0]
}

func (x PollVoteOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PollVoteOption.Descriptor instead.
func (PollVoteOption) EnumDescriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{0}
}

type PollResult int32

const (
	PollResult_POLL_RESULT_UNKNOWN            PollResult = 0
	PollResult_POLL_RESULT_PASSED             PollResult = 1
	PollResult_POLL_RESULT_REJECTED           PollResult = 2
	PollResult_POLL_RESULT_REJECTED_WITH_VETO PollResult = 3
	PollResult_POLL_PENDING                   PollResult = 4
	PollResult_POLL_RESULT_QUORUM_NOT_REACHED PollResult = 5
)

// Enum value maps for PollResult.
var (
	PollResult_name = map[int32]string{
		0: "POLL_RESULT_UNKNOWN",
		1: "POLL_RESULT_PASSED",
		2: "POLL_RESULT_REJECTED",
		3: "POLL_RESULT_REJECTED_WITH_VETO",
		4: "POLL_PENDING",
		5: "POLL_RESULT_QUORUM_NOT_REACHED",
	}
	PollResult_value = map[string]int32{
		"POLL_RESULT_UNKNOWN":            0,
		"POLL_RESULT_PASSED":             1,
		"POLL_RESULT_REJECTED":           2,
		"POLL_RESULT_REJECTED_WITH_VETO": 3,
		"POLL_PENDING":                   4,
		"POLL_RESULT_QUORUM_NOT_REACHED": 5,
	}
)

func (x PollResult) Enum() *PollResult {
	p := new(PollResult)
	*p = x
	return p
}

func (x PollResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PollResult) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_gov_poll_proto_enumTypes[1].Descriptor()
}

func (PollResult) Type() protoreflect.EnumType {
	return &file_kira_gov_poll_proto_enumTypes[1]
}

func (x PollResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PollResult.Descriptor instead.
func (PollResult) EnumDescriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{1}
}

type PollVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollId      uint64         `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Voter       []byte         `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Option      PollVoteOption `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.PollVoteOption" json:"option,omitempty"`
	CustomValue string         `protobuf:"bytes,5,opt,name=custom_value,json=customValue,proto3" json:"custom_value,omitempty"`
}

func (x *PollVote) Reset() {
	*x = PollVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_poll_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollVote) ProtoMessage() {}

func (x *PollVote) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_poll_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollVote.ProtoReflect.Descriptor instead.
func (*PollVote) Descriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{0}
}

func (x *PollVote) GetPollId() uint64 {
	if x != nil {
		return x.PollId
	}
	return 0
}

func (x *PollVote) GetVoter() []byte {
	if x != nil {
		return x.Voter
	}
	return nil
}

func (x *PollVote) GetOption() PollVoteOption {
	if x != nil {
		return x.Option
	}
	return PollVoteOption_POLL_VOTE_OPTION_UNSPECIFIED
}

func (x *PollVote) GetCustomValue() string {
	if x != nil {
		return x.CustomValue
	}
	return ""
}

type PollOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values  []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Count   uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Choices uint64   `protobuf:"varint,4,opt,name=choices,proto3" json:"choices,omitempty"`
}

func (x *PollOptions) Reset() {
	*x = PollOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_poll_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollOptions) ProtoMessage() {}

func (x *PollOptions) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_poll_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollOptions.ProtoReflect.Descriptor instead.
func (*PollOptions) Descriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{1}
}

func (x *PollOptions) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PollOptions) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PollOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PollOptions) GetChoices() uint64 {
	if x != nil {
		return x.Choices
	}
	return 0
}

type AddressPolls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Ids     []uint64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AddressPolls) Reset() {
	*x = AddressPolls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_poll_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPolls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPolls) ProtoMessage() {}

func (x *AddressPolls) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_poll_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPolls.ProtoReflect.Descriptor instead.
func (*AddressPolls) Descriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{2}
}

func (x *AddressPolls) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AddressPolls) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollId        uint64                 `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Creator       []byte                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Reference     string                 `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	Checksum      string                 `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Roles         []uint64               `protobuf:"varint,7,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Options       *PollOptions           `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	VotingEndTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=voting_end_time,json=votingEndTime,proto3" json:"voting_end_time,omitempty"`
	Result        PollResult             `protobuf:"varint,10,opt,name=result,proto3,enum=kira.gov.PollResult" json:"result,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_poll_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_poll_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{3}
}

func (x *Poll) GetPollId() uint64 {
	if x != nil {
		return x.PollId
	}
	return 0
}

func (x *Poll) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *Poll) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Poll) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Poll) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Poll) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *Poll) GetRoles() []uint64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Poll) GetOptions() *PollOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Poll) GetVotingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndTime
	}
	return nil
}

func (x *Poll) GetResult() PollResult {
	if x != nil {
		return x.Result
	}
	return PollResult_POLL_RESULT_UNKNOWN
}

type MsgPollVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollId uint64         `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Voter  []byte         `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Option PollVoteOption `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.PollVoteOption" json:"option,omitempty"`
	Value  string         `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MsgPollVote) Reset() {
	*x = MsgPollVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_poll_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPollVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPollVote) ProtoMessage() {}

func (x *MsgPollVote) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_poll_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPollVote.ProtoReflect.Descriptor instead.
func (*MsgPollVote) Descriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{4}
}

func (x *MsgPollVote) GetPollId() uint64 {
	if x != nil {
		return x.PollId
	}
	return 0
}

func (x *MsgPollVote) GetVoter() []byte {
	if x != nil {
		return x.Voter
	}
	return nil
}

func (x *MsgPollVote) GetOption() PollVoteOption {
	if x != nil {
		return x.Option
	}
	return PollVoteOption_POLL_VOTE_OPTION_UNSPECIFIED
}

func (x *MsgPollVote) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MsgPollCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator         []byte   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Title           string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Reference       string   `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Checksum        string   `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Roles           []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty"`
	PollValues      []string `protobuf:"bytes,7,rep,name=poll_values,json=pollValues,proto3" json:"poll_values,omitempty"`
	ValueCount      uint64   `protobuf:"varint,8,opt,name=value_count,json=valueCount,proto3" json:"value_count,omitempty"`
	ValueType       string   `protobuf:"bytes,9,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	PossibleChoices uint64   `protobuf:"varint,10,opt,name=possible_choices,json=possibleChoices,proto3" json:"possible_choices,omitempty"`
	Duration        string   `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *MsgPollCreate) Reset() {
	*x = MsgPollCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_poll_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPollCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPollCreate) ProtoMessage() {}

func (x *MsgPollCreate) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_poll_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPollCreate.ProtoReflect.Descriptor instead.
func (*MsgPollCreate) Descriptor() ([]byte, []int) {
	return file_kira_gov_poll_proto_rawDescGZIP(), []int{5}
}

func (x *MsgPollCreate) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *MsgPollCreate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MsgPollCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MsgPollCreate) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *MsgPollCreate) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *MsgPollCreate) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MsgPollCreate) GetPollValues() []string {
	if x != nil {
		return x.PollValues
	}
	return nil
}

func (x *MsgPollCreate) GetValueCount() uint64 {
	if x != nil {
		return x.ValueCount
	}
	return 0
}

func (x *MsgPollCreate) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *MsgPollCreate) GetPossibleChoices() uint64 {
	if x != nil {
		return x.PossibleChoices
	}
	return 0
}

func (x *MsgPollCreate) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

var File_kira_gov_poll_proto protoreflect.FileDescriptor

var file_kira_gov_poll_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc1, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x31, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x7f,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x5d,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x43, 0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0xc1, 0x03, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x31, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x22, 0xc8, 0xde,
	0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0d, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x04, 0x88,
	0xa0, 0x1f, 0x00, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x31, 0xfa, 0xde, 0x1f,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x03,
	0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x31, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x04, 0x88, 0xa0,
	0x1f, 0x00, 0x2a, 0xf2, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x1c, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x4f,
	0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x13, 0x8a, 0x9d, 0x20, 0x0f, 0x50, 0x6f, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x18,
	0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x42, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x1a, 0x15, 0x8a, 0x9d, 0x20, 0x11,
	0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x12, 0x31, 0x0a, 0x17, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x1a, 0x14,
	0x8a, 0x9d, 0x20, 0x10, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x1d, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x4f, 0x54,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x56, 0x45, 0x54, 0x4f, 0x10, 0x03, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x50, 0x6f, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65, 0x74,
	0x6f, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xaf, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x13, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x1a,
	0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x12, 0x26, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a, 0x50, 0x6f,
	0x6c, 0x6c, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x10, 0x8a, 0x9d, 0x20, 0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x56, 0x45, 0x54, 0x4f, 0x10, 0x03, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x56, 0x65,
	0x74, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x1a, 0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x50,
	0x6f, 0x6c, 0x6c, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65,
	0x2f, 0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_gov_poll_proto_rawDescOnce sync.Once
	file_kira_gov_poll_proto_rawDescData = file_kira_gov_poll_proto_rawDesc
)

func file_kira_gov_poll_proto_rawDescGZIP() []byte {
	file_kira_gov_poll_proto_rawDescOnce.Do(func() {
		file_kira_gov_poll_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_gov_poll_proto_rawDescData)
	})
	return file_kira_gov_poll_proto_rawDescData
}

var file_kira_gov_poll_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kira_gov_poll_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kira_gov_poll_proto_goTypes = []interface{}{
	(PollVoteOption)(0),           // 0: kira.gov.PollVoteOption
	(PollResult)(0),               // 1: kira.gov.PollResult
	(*PollVote)(nil),              // 2: kira.gov.PollVote
	(*PollOptions)(nil),           // 3: kira.gov.PollOptions
	(*AddressPolls)(nil),          // 4: kira.gov.AddressPolls
	(*Poll)(nil),                  // 5: kira.gov.Poll
	(*MsgPollVote)(nil),           // 6: kira.gov.MsgPollVote
	(*MsgPollCreate)(nil),         // 7: kira.gov.MsgPollCreate
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_kira_gov_poll_proto_depIdxs = []int32{
	0, // 0: kira.gov.PollVote.option:type_name -> kira.gov.PollVoteOption
	3, // 1: kira.gov.Poll.options:type_name -> kira.gov.PollOptions
	8, // 2: kira.gov.Poll.voting_end_time:type_name -> google.protobuf.Timestamp
	1, // 3: kira.gov.Poll.result:type_name -> kira.gov.PollResult
	0, // 4: kira.gov.MsgPollVote.option:type_name -> kira.gov.PollVoteOption
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kira_gov_poll_proto_init() }
func file_kira_gov_poll_proto_init() {
	if File_kira_gov_poll_proto != nil {
		return
	}
	file_kira_gov_role_proto_init()
	file_kira_gov_permission_proto_init()
	file_kira_gov_network_properties_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kira_gov_poll_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_poll_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_poll_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressPolls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_poll_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_poll_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPollVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_poll_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPollCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_gov_poll_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_gov_poll_proto_goTypes,
		DependencyIndexes: file_kira_gov_poll_proto_depIdxs,
		EnumInfos:         file_kira_gov_poll_proto_enumTypes,
		MessageInfos:      file_kira_gov_poll_proto_msgTypes,
	}.Build()
	File_kira_gov_poll_proto = out.File
	file_kira_gov_poll_proto_rawDesc = nil
	file_kira_gov_poll_proto_goTypes = nil
	file_kira_gov_poll_proto_depIdxs = nil
}
