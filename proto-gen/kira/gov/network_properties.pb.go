// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/gov/network_properties.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkProperty int32

const (
	NetworkProperty_MIN_TX_FEE                          NetworkProperty = 0  // minimum transaction fee
	NetworkProperty_MAX_TX_FEE                          NetworkProperty = 1  // maximum transaction fee
	NetworkProperty_VOTE_QUORUM                         NetworkProperty = 2  // vote quorum to reach to move to enactment
	NetworkProperty_MINIMUM_PROPOSAL_END_TIME           NetworkProperty = 3  // the minimum duration to start processing the proposal
	NetworkProperty_PROPOSAL_ENACTMENT_TIME             NetworkProperty = 4  // the duration to wait for enactment after proposal processing
	NetworkProperty_MIN_PROPOSAL_END_BLOCKS             NetworkProperty = 5  // minimum blocks required for proposal voting
	NetworkProperty_MIN_PROPOSAL_ENACTMENT_BLOCKS       NetworkProperty = 6  // min blocks required for proposal enactment
	NetworkProperty_ENABLE_FOREIGN_FEE_PAYMENTS         NetworkProperty = 7  // flag to enable foreign tokens to be used as transaction fee
	NetworkProperty_MISCHANCE_RANK_DECREASE_AMOUNT      NetworkProperty = 8  // rank decrease amount per mischance increase (default 10)
	NetworkProperty_MAX_MISCHANCE                       NetworkProperty = 9  // maximum mischance a validator could be in active status, default 110
	NetworkProperty_MISCHANCE_CONFIDENCE                NetworkProperty = 10 // the number of blocks validator miss to start counting mischance, default 10
	NetworkProperty_INACTIVE_RANK_DECREASE_PERCENT      NetworkProperty = 11 // percentage of decrease per status movement from active to inactive (default 50%)
	NetworkProperty_POOR_NETWORK_MAX_BANK_SEND          NetworkProperty = 12 // maximum amount of transfer on poor network, default 10000ukex
	NetworkProperty_MIN_VALIDATORS                      NetworkProperty = 13 // minimum number of validators to perform full network actions - otherwise, it's called poor network
	NetworkProperty_UNJAIL_MAX_TIME                     NetworkProperty = 14 // maximum jailed status duration in seconds to get back to the validator set again
	NetworkProperty_ENABLE_TOKEN_WHITELIST              NetworkProperty = 15 // TokenWhitelist is valid when enable_token_whitelist is set
	NetworkProperty_ENABLE_TOKEN_BLACKLIST              NetworkProperty = 16 // TokenBlacklist is valid when enable_token_blacklist is set
	NetworkProperty_MIN_IDENTITY_APPROVAL_TIP           NetworkProperty = 17 // minimum amount of tip to be paid to the approver per request
	NetworkProperty_UNIQUE_IDENTITY_KEYS                NetworkProperty = 18 // manages unique identity keys to be used as an address identifier
	NetworkProperty_UBI_HARDCAP                         NetworkProperty = 19 // a maximum amount of additional KEX that can be created per year
	NetworkProperty_VALIDATORS_FEE_SHARE                NetworkProperty = 20 // the percentage that validators get from collected fees
	NetworkProperty_INFLATION_RATE                      NetworkProperty = 21 // KEX inflation percentage X defined as decimal value.
	NetworkProperty_INFLATION_PERIOD                    NetworkProperty = 22 // period of time (in seconds) over which current KEX supply is inflated by a percentage corresponding to the inflation_rate
	NetworkProperty_UNSTAKING_PERIOD                    NetworkProperty = 23 // period of time (in seconds) it takes to unstake any of the staked tokens
	NetworkProperty_MAX_DELEGATORS                      NetworkProperty = 24 // number of delegators limitation on a single pool
	NetworkProperty_MIN_DELEGATION_PUSHOUT              NetworkProperty = 25 // The multiplier (10x) to push out minimum delegation when it exceeds max delegators
	NetworkProperty_SLASHING_PERIOD                     NetworkProperty = 26 // (default 3600s) - slashing_period should be smaller than `unstaking_period`
	NetworkProperty_MAX_JAILED_PERCENTAGE               NetworkProperty = 27 // (default 25%)
	NetworkProperty_MAX_SLASHING_PERCENTAGE             NetworkProperty = 28 // (default 0.5%) 0% - 100%
	NetworkProperty_MIN_CUSTODY_REWARD                  NetworkProperty = 29 // minimum custody reward
	NetworkProperty_MAX_CUSTODY_BUFFER_SIZE             NetworkProperty = 30 // maximum custody buffer size
	NetworkProperty_MAX_CUSTODY_TX_SIZE                 NetworkProperty = 31 // maximum custody tx size to save in buffer
	NetworkProperty_ABSTENTION_RANK_DECREASE_AMOUNT     NetworkProperty = 32 // amount of rank decrease when absent
	NetworkProperty_MAX_ABSTENTION                      NetworkProperty = 33 // max abention count for councilor
	NetworkProperty_MIN_COLLECTIVE_BOND                 NetworkProperty = 34 // minimum bond amount for the collective to be activated, default: 100’000 KEX
	NetworkProperty_MIN_COLLECTIVE_BONDING_TIME         NetworkProperty = 35 // allowed time to reach min_collective_bond default: 86400s
	NetworkProperty_MAX_COLLECTIVE_OUTPUTS              NetworkProperty = 36 // limitation the maximum number of spending pools configuration per collective
	NetworkProperty_MIN_COLLECTIVE_CLAIM_PERIOD         NetworkProperty = 37 // in seconds, default 14400 - 4 hours
	NetworkProperty_VALIDATOR_RECOVERY_BOND             NetworkProperty = 38 // amount of KEX to spend for issuing validator recovery token
	NetworkProperty_MAX_ANNUAL_INFLATION                NetworkProperty = 39 // range of 0 and 0.35
	NetworkProperty_MAX_PROPOSAL_TITLE_SIZE             NetworkProperty = 40 // maximum poll title size
	NetworkProperty_MAX_PROPOSAL_DESCRIPTION_SIZE       NetworkProperty = 41 // maximum poll description size
	NetworkProperty_MAX_PROPOSAL_POLL_OPTION_SIZE       NetworkProperty = 42 // maximum poll option size
	NetworkProperty_MAX_PROPOSAL_POLL_OPTION_COUNT      NetworkProperty = 43 // maximum poll option count
	NetworkProperty_MAX_PROPOSAL_REFERENCE_SIZE         NetworkProperty = 44 // maximum poll reference size
	NetworkProperty_MAX_PROPOSAL_CHECKSUM_SIZE          NetworkProperty = 45 // maximum poll checksum size
	NetworkProperty_MIN_DAPP_BOND                       NetworkProperty = 46 // default 1’000’000 KEX
	NetworkProperty_MAX_DAPP_BOND                       NetworkProperty = 47 // default 10’000’000 KEX
	NetworkProperty_DAPP_LIQUIDATION_THRESHOLD          NetworkProperty = 48 // default 100’000 KEX
	NetworkProperty_DAPP_LIQUIDATION_PERIOD             NetworkProperty = 49 // default 2419200, ~28d
	NetworkProperty_DAPP_BOND_DURATION                  NetworkProperty = 50 // default 7d - 604800s
	NetworkProperty_DAPP_VERIFIER_BOND                  NetworkProperty = 51 // percentage of lp token supply to be put to be the verifier of the dapp by default 0.1%
	NetworkProperty_DAPP_AUTO_DENOUNCE_TIME             NetworkProperty = 52 // in seconds (default 60), time the dapp leader allowed to send `execute-dapp-tx`
	NetworkProperty_DAPP_MISCHANCE_RANK_DECREASE_AMOUNT NetworkProperty = 53
	NetworkProperty_DAPP_MAX_MISCHANCE                  NetworkProperty = 54
	NetworkProperty_DAPP_INACTIVE_RANK_DECREASE_PERCENT NetworkProperty = 55
	NetworkProperty_DAPP_POOL_SLIPPAGE_DEFAULT          NetworkProperty = 56
	NetworkProperty_MINTING_FT_FEE                      NetworkProperty = 57
	NetworkProperty_MINTING_NFT_FEE                     NetworkProperty = 58
	NetworkProperty_VETO_THRESHOLD                      NetworkProperty = 59
	NetworkProperty_AUTOCOMPOUND_INTERVAL_NUM_BLOCKS    NetworkProperty = 60
	NetworkProperty_DOWNTIME_INACTIVE_DURATION          NetworkProperty = 61
	NetworkProperty_BRIDGE_ADDRESS                      NetworkProperty = 62
)

// Enum value maps for NetworkProperty.
var (
	NetworkProperty_name = map[int32]string{
		0:  "MIN_TX_FEE",
		1:  "MAX_TX_FEE",
		2:  "VOTE_QUORUM",
		3:  "MINIMUM_PROPOSAL_END_TIME",
		4:  "PROPOSAL_ENACTMENT_TIME",
		5:  "MIN_PROPOSAL_END_BLOCKS",
		6:  "MIN_PROPOSAL_ENACTMENT_BLOCKS",
		7:  "ENABLE_FOREIGN_FEE_PAYMENTS",
		8:  "MISCHANCE_RANK_DECREASE_AMOUNT",
		9:  "MAX_MISCHANCE",
		10: "MISCHANCE_CONFIDENCE",
		11: "INACTIVE_RANK_DECREASE_PERCENT",
		12: "POOR_NETWORK_MAX_BANK_SEND",
		13: "MIN_VALIDATORS",
		14: "UNJAIL_MAX_TIME",
		15: "ENABLE_TOKEN_WHITELIST",
		16: "ENABLE_TOKEN_BLACKLIST",
		17: "MIN_IDENTITY_APPROVAL_TIP",
		18: "UNIQUE_IDENTITY_KEYS",
		19: "UBI_HARDCAP",
		20: "VALIDATORS_FEE_SHARE",
		21: "INFLATION_RATE",
		22: "INFLATION_PERIOD",
		23: "UNSTAKING_PERIOD",
		24: "MAX_DELEGATORS",
		25: "MIN_DELEGATION_PUSHOUT",
		26: "SLASHING_PERIOD",
		27: "MAX_JAILED_PERCENTAGE",
		28: "MAX_SLASHING_PERCENTAGE",
		29: "MIN_CUSTODY_REWARD",
		30: "MAX_CUSTODY_BUFFER_SIZE",
		31: "MAX_CUSTODY_TX_SIZE",
		32: "ABSTENTION_RANK_DECREASE_AMOUNT",
		33: "MAX_ABSTENTION",
		34: "MIN_COLLECTIVE_BOND",
		35: "MIN_COLLECTIVE_BONDING_TIME",
		36: "MAX_COLLECTIVE_OUTPUTS",
		37: "MIN_COLLECTIVE_CLAIM_PERIOD",
		38: "VALIDATOR_RECOVERY_BOND",
		39: "MAX_ANNUAL_INFLATION",
		40: "MAX_PROPOSAL_TITLE_SIZE",
		41: "MAX_PROPOSAL_DESCRIPTION_SIZE",
		42: "MAX_PROPOSAL_POLL_OPTION_SIZE",
		43: "MAX_PROPOSAL_POLL_OPTION_COUNT",
		44: "MAX_PROPOSAL_REFERENCE_SIZE",
		45: "MAX_PROPOSAL_CHECKSUM_SIZE",
		46: "MIN_DAPP_BOND",
		47: "MAX_DAPP_BOND",
		48: "DAPP_LIQUIDATION_THRESHOLD",
		49: "DAPP_LIQUIDATION_PERIOD",
		50: "DAPP_BOND_DURATION",
		51: "DAPP_VERIFIER_BOND",
		52: "DAPP_AUTO_DENOUNCE_TIME",
		53: "DAPP_MISCHANCE_RANK_DECREASE_AMOUNT",
		54: "DAPP_MAX_MISCHANCE",
		55: "DAPP_INACTIVE_RANK_DECREASE_PERCENT",
		56: "DAPP_POOL_SLIPPAGE_DEFAULT",
		57: "MINTING_FT_FEE",
		58: "MINTING_NFT_FEE",
		59: "VETO_THRESHOLD",
		60: "AUTOCOMPOUND_INTERVAL_NUM_BLOCKS",
		61: "DOWNTIME_INACTIVE_DURATION",
		62: "BRIDGE_ADDRESS",
	}
	NetworkProperty_value = map[string]int32{
		"MIN_TX_FEE":                          0,
		"MAX_TX_FEE":                          1,
		"VOTE_QUORUM":                         2,
		"MINIMUM_PROPOSAL_END_TIME":           3,
		"PROPOSAL_ENACTMENT_TIME":             4,
		"MIN_PROPOSAL_END_BLOCKS":             5,
		"MIN_PROPOSAL_ENACTMENT_BLOCKS":       6,
		"ENABLE_FOREIGN_FEE_PAYMENTS":         7,
		"MISCHANCE_RANK_DECREASE_AMOUNT":      8,
		"MAX_MISCHANCE":                       9,
		"MISCHANCE_CONFIDENCE":                10,
		"INACTIVE_RANK_DECREASE_PERCENT":      11,
		"POOR_NETWORK_MAX_BANK_SEND":          12,
		"MIN_VALIDATORS":                      13,
		"UNJAIL_MAX_TIME":                     14,
		"ENABLE_TOKEN_WHITELIST":              15,
		"ENABLE_TOKEN_BLACKLIST":              16,
		"MIN_IDENTITY_APPROVAL_TIP":           17,
		"UNIQUE_IDENTITY_KEYS":                18,
		"UBI_HARDCAP":                         19,
		"VALIDATORS_FEE_SHARE":                20,
		"INFLATION_RATE":                      21,
		"INFLATION_PERIOD":                    22,
		"UNSTAKING_PERIOD":                    23,
		"MAX_DELEGATORS":                      24,
		"MIN_DELEGATION_PUSHOUT":              25,
		"SLASHING_PERIOD":                     26,
		"MAX_JAILED_PERCENTAGE":               27,
		"MAX_SLASHING_PERCENTAGE":             28,
		"MIN_CUSTODY_REWARD":                  29,
		"MAX_CUSTODY_BUFFER_SIZE":             30,
		"MAX_CUSTODY_TX_SIZE":                 31,
		"ABSTENTION_RANK_DECREASE_AMOUNT":     32,
		"MAX_ABSTENTION":                      33,
		"MIN_COLLECTIVE_BOND":                 34,
		"MIN_COLLECTIVE_BONDING_TIME":         35,
		"MAX_COLLECTIVE_OUTPUTS":              36,
		"MIN_COLLECTIVE_CLAIM_PERIOD":         37,
		"VALIDATOR_RECOVERY_BOND":             38,
		"MAX_ANNUAL_INFLATION":                39,
		"MAX_PROPOSAL_TITLE_SIZE":             40,
		"MAX_PROPOSAL_DESCRIPTION_SIZE":       41,
		"MAX_PROPOSAL_POLL_OPTION_SIZE":       42,
		"MAX_PROPOSAL_POLL_OPTION_COUNT":      43,
		"MAX_PROPOSAL_REFERENCE_SIZE":         44,
		"MAX_PROPOSAL_CHECKSUM_SIZE":          45,
		"MIN_DAPP_BOND":                       46,
		"MAX_DAPP_BOND":                       47,
		"DAPP_LIQUIDATION_THRESHOLD":          48,
		"DAPP_LIQUIDATION_PERIOD":             49,
		"DAPP_BOND_DURATION":                  50,
		"DAPP_VERIFIER_BOND":                  51,
		"DAPP_AUTO_DENOUNCE_TIME":             52,
		"DAPP_MISCHANCE_RANK_DECREASE_AMOUNT": 53,
		"DAPP_MAX_MISCHANCE":                  54,
		"DAPP_INACTIVE_RANK_DECREASE_PERCENT": 55,
		"DAPP_POOL_SLIPPAGE_DEFAULT":          56,
		"MINTING_FT_FEE":                      57,
		"MINTING_NFT_FEE":                     58,
		"VETO_THRESHOLD":                      59,
		"AUTOCOMPOUND_INTERVAL_NUM_BLOCKS":    60,
		"DOWNTIME_INACTIVE_DURATION":          61,
		"BRIDGE_ADDRESS":                      62,
	}
)

func (x NetworkProperty) Enum() *NetworkProperty {
	p := new(NetworkProperty)
	*p = x
	return p
}

func (x NetworkProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_gov_network_properties_proto_enumTypes[0].Descriptor()
}

func (NetworkProperty) Type() protoreflect.EnumType {
	return &file_kira_gov_network_properties_proto_enumTypes[0]
}

func (x NetworkProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkProperty.Descriptor instead.
func (NetworkProperty) EnumDescriptor() ([]byte, []int) {
	return file_kira_gov_network_properties_proto_rawDescGZIP(), []int{0}
}

type MsgSetNetworkProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkProperties *NetworkProperties `protobuf:"bytes,1,opt,name=network_properties,json=networkProperties,proto3" json:"network_properties,omitempty"`
	Proposer          []byte             `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (x *MsgSetNetworkProperties) Reset() {
	*x = MsgSetNetworkProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_network_properties_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSetNetworkProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSetNetworkProperties) ProtoMessage() {}

func (x *MsgSetNetworkProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_network_properties_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgSetNetworkProperties.ProtoReflect.Descriptor instead.
func (*MsgSetNetworkProperties) Descriptor() ([]byte, []int) {
	return file_kira_gov_network_properties_proto_rawDescGZIP(), []int{0}
}

func (x *MsgSetNetworkProperties) GetNetworkProperties() *NetworkProperties {
	if x != nil {
		return x.NetworkProperties
	}
	return nil
}

func (x *MsgSetNetworkProperties) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

type NetworkPropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
}

func (x *NetworkPropertyValue) Reset() {
	*x = NetworkPropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_network_properties_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPropertyValue) ProtoMessage() {}

func (x *NetworkPropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_network_properties_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPropertyValue.ProtoReflect.Descriptor instead.
func (*NetworkPropertyValue) Descriptor() ([]byte, []int) {
	return file_kira_gov_network_properties_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkPropertyValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *NetworkPropertyValue) GetStrValue() string {
	if x != nil {
		return x.StrValue
	}
	return ""
}

type NetworkProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinTxFee                        uint64 `protobuf:"varint,1,opt,name=min_tx_fee,json=minTxFee,proto3" json:"min_tx_fee,omitempty"`                                                                // minimum transaction fee
	MaxTxFee                        uint64 `protobuf:"varint,2,opt,name=max_tx_fee,json=maxTxFee,proto3" json:"max_tx_fee,omitempty"`                                                                // maximum transaction fee
	VoteQuorum                      string `protobuf:"bytes,3,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`                                                             // vote quorum to reach to move to enactment
	MinimumProposalEndTime          uint64 `protobuf:"varint,4,opt,name=minimum_proposal_end_time,json=minimumProposalEndTime,proto3" json:"minimum_proposal_end_time,omitempty"`                    // the minimum duration to start processing the proposal
	ProposalEnactmentTime           uint64 `protobuf:"varint,5,opt,name=proposal_enactment_time,json=proposalEnactmentTime,proto3" json:"proposal_enactment_time,omitempty"`                         // the duration to wait for enactment after proposal processing
	MinProposalEndBlocks            uint64 `protobuf:"varint,6,opt,name=min_proposal_end_blocks,json=minProposalEndBlocks,proto3" json:"min_proposal_end_blocks,omitempty"`                          // minimum blocks required for proposal voting
	MinProposalEnactmentBlocks      uint64 `protobuf:"varint,7,opt,name=min_proposal_enactment_blocks,json=minProposalEnactmentBlocks,proto3" json:"min_proposal_enactment_blocks,omitempty"`        // min blocks required for proposal enactment
	EnableForeignFeePayments        bool   `protobuf:"varint,8,opt,name=enable_foreign_fee_payments,json=enableForeignFeePayments,proto3" json:"enable_foreign_fee_payments,omitempty"`              // flag to enable foreign tokens to be used as transaction fee
	MischanceRankDecreaseAmount     uint64 `protobuf:"varint,9,opt,name=mischance_rank_decrease_amount,json=mischanceRankDecreaseAmount,proto3" json:"mischance_rank_decrease_amount,omitempty"`     // rank decrease amount per mischance increase (default 10)
	MaxMischance                    uint64 `protobuf:"varint,10,opt,name=max_mischance,json=maxMischance,proto3" json:"max_mischance,omitempty"`                                                     // maximum mischance a validator could be in active status, default 110
	MischanceConfidence             uint64 `protobuf:"varint,11,opt,name=mischance_confidence,json=mischanceConfidence,proto3" json:"mischance_confidence,omitempty"`                                // the number of blocks validator miss to start counting mischance, default 10
	InactiveRankDecreasePercent     string `protobuf:"bytes,12,opt,name=inactive_rank_decrease_percent,json=inactiveRankDecreasePercent,proto3" json:"inactive_rank_decrease_percent,omitempty"`     // percentage of decrease per status movement from active to inactive (default 50%)
	MinValidators                   uint64 `protobuf:"varint,13,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`                                                  // minimum number of validators to perform full network actions - otherwise, it's called poor network
	PoorNetworkMaxBankSend          uint64 `protobuf:"varint,14,opt,name=poor_network_max_bank_send,json=poorNetworkMaxBankSend,proto3" json:"poor_network_max_bank_send,omitempty"`                 // maximum amount of transfer on poor network, default 10000ukex
	UnjailMaxTime                   uint64 `protobuf:"varint,15,opt,name=unjail_max_time,json=unjailMaxTime,proto3" json:"unjail_max_time,omitempty"`                                                // maximum jailed status duration in seconds to get back to the validator set again
	EnableTokenWhitelist            bool   `protobuf:"varint,16,opt,name=enable_token_whitelist,json=enableTokenWhitelist,proto3" json:"enable_token_whitelist,omitempty"`                           // TokenWhitelist is valid when enable_token_whitelist is set
	EnableTokenBlacklist            bool   `protobuf:"varint,17,opt,name=enable_token_blacklist,json=enableTokenBlacklist,proto3" json:"enable_token_blacklist,omitempty"`                           // TokenBlacklist is valid when enable_token_blacklist is set
	MinIdentityApprovalTip          uint64 `protobuf:"varint,18,opt,name=min_identity_approval_tip,json=minIdentityApprovalTip,proto3" json:"min_identity_approval_tip,omitempty"`                   // minimum amount of tip to be paid to the approver per request
	UniqueIdentityKeys              string `protobuf:"bytes,19,opt,name=unique_identity_keys,json=uniqueIdentityKeys,proto3" json:"unique_identity_keys,omitempty"`                                  // manages unique identity keys to be used as an address identifier
	UbiHardcap                      uint64 `protobuf:"varint,20,opt,name=ubi_hardcap,json=ubiHardcap,proto3" json:"ubi_hardcap,omitempty"`                                                           // a maximum amount of additional KEX that can be created per year
	ValidatorsFeeShare              string `protobuf:"bytes,21,opt,name=validators_fee_share,json=validatorsFeeShare,proto3" json:"validators_fee_share,omitempty"`                                  // the percentage that validators get from collected fees
	InflationRate                   string `protobuf:"bytes,22,opt,name=inflation_rate,json=inflationRate,proto3" json:"inflation_rate,omitempty"`                                                   // KEX inflation percentage X defined as decimal value.
	InflationPeriod                 uint64 `protobuf:"varint,23,opt,name=inflation_period,json=inflationPeriod,proto3" json:"inflation_period,omitempty"`                                            // period of time (in seconds) over which current KEX supply is inflated by a percentage corresponding to the inflation_rate
	UnstakingPeriod                 uint64 `protobuf:"varint,24,opt,name=unstaking_period,json=unstakingPeriod,proto3" json:"unstaking_period,omitempty"`                                            // period of time (in seconds) it takes to unstake any of the staked tokens
	MaxDelegators                   uint64 `protobuf:"varint,25,opt,name=max_delegators,json=maxDelegators,proto3" json:"max_delegators,omitempty"`                                                  // number of delegators limitation on a single pool
	MinDelegationPushout            uint64 `protobuf:"varint,26,opt,name=min_delegation_pushout,json=minDelegationPushout,proto3" json:"min_delegation_pushout,omitempty"`                           // The multiplier (10x) to push out minimum delegation when it exceeds max delegators
	SlashingPeriod                  uint64 `protobuf:"varint,27,opt,name=slashing_period,json=slashingPeriod,proto3" json:"slashing_period,omitempty"`                                               // (default 3600s) - slashing_period should be smaller than `unstaking_period`
	MaxJailedPercentage             string `protobuf:"bytes,28,opt,name=max_jailed_percentage,json=maxJailedPercentage,proto3" json:"max_jailed_percentage,omitempty"`                               // (default 25%)
	MaxSlashingPercentage           string `protobuf:"bytes,29,opt,name=max_slashing_percentage,json=maxSlashingPercentage,proto3" json:"max_slashing_percentage,omitempty"`                         // (default 0.5%) 0% - 100%
	MinCustodyReward                uint64 `protobuf:"varint,30,opt,name=min_custody_reward,json=minCustodyReward,proto3" json:"min_custody_reward,omitempty"`                                       // minimum custody reward
	MaxCustodyBufferSize            uint64 `protobuf:"varint,31,opt,name=max_custody_buffer_size,json=maxCustodyBufferSize,proto3" json:"max_custody_buffer_size,omitempty"`                         // maximum custody buffer size
	MaxCustodyTxSize                uint64 `protobuf:"varint,32,opt,name=max_custody_tx_size,json=maxCustodyTxSize,proto3" json:"max_custody_tx_size,omitempty"`                                     // maximum custody tx size to save in buffer
	AbstentionRankDecreaseAmount    uint64 `protobuf:"varint,33,opt,name=abstention_rank_decrease_amount,json=abstentionRankDecreaseAmount,proto3" json:"abstention_rank_decrease_amount,omitempty"` // amount of rank decrease when absent
	MaxAbstention                   uint64 `protobuf:"varint,34,opt,name=max_abstention,json=maxAbstention,proto3" json:"max_abstention,omitempty"`                                                  // max abention count for councilor
	MinCollectiveBond               uint64 `protobuf:"varint,35,opt,name=min_collective_bond,json=minCollectiveBond,proto3" json:"min_collective_bond,omitempty"`                                    // minimum bond amount for the collective to be activated, default: 100’000 KEX
	MinCollectiveBondingTime        uint64 `protobuf:"varint,36,opt,name=min_collective_bonding_time,json=minCollectiveBondingTime,proto3" json:"min_collective_bonding_time,omitempty"`             // allowed time to reach min_collective_bond default: 86400s
	MaxCollectiveOutputs            uint64 `protobuf:"varint,37,opt,name=max_collective_outputs,json=maxCollectiveOutputs,proto3" json:"max_collective_outputs,omitempty"`                           // limitation the maximum number of spending pools configuration per collective
	MinCollectiveClaimPeriod        uint64 `protobuf:"varint,38,opt,name=min_collective_claim_period,json=minCollectiveClaimPeriod,proto3" json:"min_collective_claim_period,omitempty"`             // in seconds, default 14400 - 4 hours
	ValidatorRecoveryBond           uint64 `protobuf:"varint,39,opt,name=validator_recovery_bond,json=validatorRecoveryBond,proto3" json:"validator_recovery_bond,omitempty"`                        // amount of KEX to spend for issuing validator recovery token
	MaxAnnualInflation              string `protobuf:"bytes,40,opt,name=max_annual_inflation,json=maxAnnualInflation,proto3" json:"max_annual_inflation,omitempty"`                                  // maximum % of kex by which supply can increase over the period of 1 year
	MaxProposalTitleSize            uint64 `protobuf:"varint,41,opt,name=max_proposal_title_size,json=maxProposalTitleSize,proto3" json:"max_proposal_title_size,omitempty"`                         // maximum title size in the proposal
	MaxProposalDescriptionSize      uint64 `protobuf:"varint,42,opt,name=max_proposal_description_size,json=maxProposalDescriptionSize,proto3" json:"max_proposal_description_size,omitempty"`       // maximum description size in the proposal
	MaxProposalPollOptionSize       uint64 `protobuf:"varint,43,opt,name=max_proposal_poll_option_size,json=maxProposalPollOptionSize,proto3" json:"max_proposal_poll_option_size,omitempty"`        // maximum option size in the proposal
	MaxProposalPollOptionCount      uint64 `protobuf:"varint,44,opt,name=max_proposal_poll_option_count,json=maxProposalPollOptionCount,proto3" json:"max_proposal_poll_option_count,omitempty"`     // maximum possible choices in the proposal
	MaxProposalReferenceSize        uint64 `protobuf:"varint,45,opt,name=max_proposal_reference_size,json=maxProposalReferenceSize,proto3" json:"max_proposal_reference_size,omitempty"`             // maximum reference size in the proposal
	MaxProposalChecksumSize         uint64 `protobuf:"varint,46,opt,name=max_proposal_checksum_size,json=maxProposalChecksumSize,proto3" json:"max_proposal_checksum_size,omitempty"`                // maximum checksum size in the proposal
	MinDappBond                     uint64 `protobuf:"varint,47,opt,name=min_dapp_bond,json=minDappBond,proto3" json:"min_dapp_bond,omitempty"`                                                      // default 1’000’000 KEX
	MaxDappBond                     uint64 `protobuf:"varint,48,opt,name=max_dapp_bond,json=maxDappBond,proto3" json:"max_dapp_bond,omitempty"`                                                      // default 10’000’000 KEX
	DappLiquidationThreshold        uint64 `protobuf:"varint,49,opt,name=dapp_liquidation_threshold,json=dappLiquidationThreshold,proto3" json:"dapp_liquidation_threshold,omitempty"`               // default 100’000 KEX
	DappLiquidationPeriod           uint64 `protobuf:"varint,50,opt,name=dapp_liquidation_period,json=dappLiquidationPeriod,proto3" json:"dapp_liquidation_period,omitempty"`                        // default 2419200, ~28d
	DappBondDuration                uint64 `protobuf:"varint,51,opt,name=dapp_bond_duration,json=dappBondDuration,proto3" json:"dapp_bond_duration,omitempty"`                                       // default 7d - 604800s
	DappVerifierBond                string `protobuf:"bytes,52,opt,name=dapp_verifier_bond,json=dappVerifierBond,proto3" json:"dapp_verifier_bond,omitempty"`                                        // percentage of lp token supply to be put to be the verifier of the dapp by default 0.1%
	DappAutoDenounceTime            uint64 `protobuf:"varint,53,opt,name=dapp_auto_denounce_time,json=dappAutoDenounceTime,proto3" json:"dapp_auto_denounce_time,omitempty"`                         // in seconds (default 60), time the dapp leader allowed to send `execute-dapp-tx`
	DappMischanceRankDecreaseAmount uint64 `protobuf:"varint,54,opt,name=dapp_mischance_rank_decrease_amount,json=dappMischanceRankDecreaseAmount,proto3" json:"dapp_mischance_rank_decrease_amount,omitempty"`
	DappMaxMischance                uint64 `protobuf:"varint,55,opt,name=dapp_max_mischance,json=dappMaxMischance,proto3" json:"dapp_max_mischance,omitempty"`
	DappInactiveRankDecreasePercent string `protobuf:"bytes,56,opt,name=dapp_inactive_rank_decrease_percent,json=dappInactiveRankDecreasePercent,proto3" json:"dapp_inactive_rank_decrease_percent,omitempty"`
	DappPoolSlippageDefault         string `protobuf:"bytes,57,opt,name=dapp_pool_slippage_default,json=dappPoolSlippageDefault,proto3" json:"dapp_pool_slippage_default,omitempty"` // default 0.1, that is 10%
	MintingFtFee                    uint64 `protobuf:"varint,58,opt,name=minting_ft_fee,json=mintingFtFee,proto3" json:"minting_ft_fee,omitempty"`                                   // default 100’000’000’000 ukex - 100k KEX
	MintingNftFee                   uint64 `protobuf:"varint,59,opt,name=minting_nft_fee,json=mintingNftFee,proto3" json:"minting_nft_fee,omitempty"`                                // default 100’000’000’000 ukex - 100k KEX
	VetoThreshold                   string `protobuf:"bytes,60,opt,name=veto_threshold,json=vetoThreshold,proto3" json:"veto_threshold,omitempty"`
	AutocompoundIntervalNumBlocks   uint64 `protobuf:"varint,61,opt,name=autocompound_interval_num_blocks,json=autocompoundIntervalNumBlocks,proto3" json:"autocompound_interval_num_blocks,omitempty"` // default 17280 - once per day
	DowntimeInactiveDuration        uint64 `protobuf:"varint,62,opt,name=downtime_inactive_duration,json=downtimeInactiveDuration,proto3" json:"downtime_inactive_duration,omitempty"`                  // default 600s - 10min
	BridgeAddress                   string `protobuf:"bytes,63,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
}

func (x *NetworkProperties) Reset() {
	*x = NetworkProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_network_properties_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProperties) ProtoMessage() {}

func (x *NetworkProperties) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_network_properties_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProperties.ProtoReflect.Descriptor instead.
func (*NetworkProperties) Descriptor() ([]byte, []int) {
	return file_kira_gov_network_properties_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkProperties) GetMinTxFee() uint64 {
	if x != nil {
		return x.MinTxFee
	}
	return 0
}

func (x *NetworkProperties) GetMaxTxFee() uint64 {
	if x != nil {
		return x.MaxTxFee
	}
	return 0
}

func (x *NetworkProperties) GetVoteQuorum() string {
	if x != nil {
		return x.VoteQuorum
	}
	return ""
}

func (x *NetworkProperties) GetMinimumProposalEndTime() uint64 {
	if x != nil {
		return x.MinimumProposalEndTime
	}
	return 0
}

func (x *NetworkProperties) GetProposalEnactmentTime() uint64 {
	if x != nil {
		return x.ProposalEnactmentTime
	}
	return 0
}

func (x *NetworkProperties) GetMinProposalEndBlocks() uint64 {
	if x != nil {
		return x.MinProposalEndBlocks
	}
	return 0
}

func (x *NetworkProperties) GetMinProposalEnactmentBlocks() uint64 {
	if x != nil {
		return x.MinProposalEnactmentBlocks
	}
	return 0
}

func (x *NetworkProperties) GetEnableForeignFeePayments() bool {
	if x != nil {
		return x.EnableForeignFeePayments
	}
	return false
}

func (x *NetworkProperties) GetMischanceRankDecreaseAmount() uint64 {
	if x != nil {
		return x.MischanceRankDecreaseAmount
	}
	return 0
}

func (x *NetworkProperties) GetMaxMischance() uint64 {
	if x != nil {
		return x.MaxMischance
	}
	return 0
}

func (x *NetworkProperties) GetMischanceConfidence() uint64 {
	if x != nil {
		return x.MischanceConfidence
	}
	return 0
}

func (x *NetworkProperties) GetInactiveRankDecreasePercent() string {
	if x != nil {
		return x.InactiveRankDecreasePercent
	}
	return ""
}

func (x *NetworkProperties) GetMinValidators() uint64 {
	if x != nil {
		return x.MinValidators
	}
	return 0
}

func (x *NetworkProperties) GetPoorNetworkMaxBankSend() uint64 {
	if x != nil {
		return x.PoorNetworkMaxBankSend
	}
	return 0
}

func (x *NetworkProperties) GetUnjailMaxTime() uint64 {
	if x != nil {
		return x.UnjailMaxTime
	}
	return 0
}

func (x *NetworkProperties) GetEnableTokenWhitelist() bool {
	if x != nil {
		return x.EnableTokenWhitelist
	}
	return false
}

func (x *NetworkProperties) GetEnableTokenBlacklist() bool {
	if x != nil {
		return x.EnableTokenBlacklist
	}
	return false
}

func (x *NetworkProperties) GetMinIdentityApprovalTip() uint64 {
	if x != nil {
		return x.MinIdentityApprovalTip
	}
	return 0
}

func (x *NetworkProperties) GetUniqueIdentityKeys() string {
	if x != nil {
		return x.UniqueIdentityKeys
	}
	return ""
}

func (x *NetworkProperties) GetUbiHardcap() uint64 {
	if x != nil {
		return x.UbiHardcap
	}
	return 0
}

func (x *NetworkProperties) GetValidatorsFeeShare() string {
	if x != nil {
		return x.ValidatorsFeeShare
	}
	return ""
}

func (x *NetworkProperties) GetInflationRate() string {
	if x != nil {
		return x.InflationRate
	}
	return ""
}

func (x *NetworkProperties) GetInflationPeriod() uint64 {
	if x != nil {
		return x.InflationPeriod
	}
	return 0
}

func (x *NetworkProperties) GetUnstakingPeriod() uint64 {
	if x != nil {
		return x.UnstakingPeriod
	}
	return 0
}

func (x *NetworkProperties) GetMaxDelegators() uint64 {
	if x != nil {
		return x.MaxDelegators
	}
	return 0
}

func (x *NetworkProperties) GetMinDelegationPushout() uint64 {
	if x != nil {
		return x.MinDelegationPushout
	}
	return 0
}

func (x *NetworkProperties) GetSlashingPeriod() uint64 {
	if x != nil {
		return x.SlashingPeriod
	}
	return 0
}

func (x *NetworkProperties) GetMaxJailedPercentage() string {
	if x != nil {
		return x.MaxJailedPercentage
	}
	return ""
}

func (x *NetworkProperties) GetMaxSlashingPercentage() string {
	if x != nil {
		return x.MaxSlashingPercentage
	}
	return ""
}

func (x *NetworkProperties) GetMinCustodyReward() uint64 {
	if x != nil {
		return x.MinCustodyReward
	}
	return 0
}

func (x *NetworkProperties) GetMaxCustodyBufferSize() uint64 {
	if x != nil {
		return x.MaxCustodyBufferSize
	}
	return 0
}

func (x *NetworkProperties) GetMaxCustodyTxSize() uint64 {
	if x != nil {
		return x.MaxCustodyTxSize
	}
	return 0
}

func (x *NetworkProperties) GetAbstentionRankDecreaseAmount() uint64 {
	if x != nil {
		return x.AbstentionRankDecreaseAmount
	}
	return 0
}

func (x *NetworkProperties) GetMaxAbstention() uint64 {
	if x != nil {
		return x.MaxAbstention
	}
	return 0
}

func (x *NetworkProperties) GetMinCollectiveBond() uint64 {
	if x != nil {
		return x.MinCollectiveBond
	}
	return 0
}

func (x *NetworkProperties) GetMinCollectiveBondingTime() uint64 {
	if x != nil {
		return x.MinCollectiveBondingTime
	}
	return 0
}

func (x *NetworkProperties) GetMaxCollectiveOutputs() uint64 {
	if x != nil {
		return x.MaxCollectiveOutputs
	}
	return 0
}

func (x *NetworkProperties) GetMinCollectiveClaimPeriod() uint64 {
	if x != nil {
		return x.MinCollectiveClaimPeriod
	}
	return 0
}

func (x *NetworkProperties) GetValidatorRecoveryBond() uint64 {
	if x != nil {
		return x.ValidatorRecoveryBond
	}
	return 0
}

func (x *NetworkProperties) GetMaxAnnualInflation() string {
	if x != nil {
		return x.MaxAnnualInflation
	}
	return ""
}

func (x *NetworkProperties) GetMaxProposalTitleSize() uint64 {
	if x != nil {
		return x.MaxProposalTitleSize
	}
	return 0
}

func (x *NetworkProperties) GetMaxProposalDescriptionSize() uint64 {
	if x != nil {
		return x.MaxProposalDescriptionSize
	}
	return 0
}

func (x *NetworkProperties) GetMaxProposalPollOptionSize() uint64 {
	if x != nil {
		return x.MaxProposalPollOptionSize
	}
	return 0
}

func (x *NetworkProperties) GetMaxProposalPollOptionCount() uint64 {
	if x != nil {
		return x.MaxProposalPollOptionCount
	}
	return 0
}

func (x *NetworkProperties) GetMaxProposalReferenceSize() uint64 {
	if x != nil {
		return x.MaxProposalReferenceSize
	}
	return 0
}

func (x *NetworkProperties) GetMaxProposalChecksumSize() uint64 {
	if x != nil {
		return x.MaxProposalChecksumSize
	}
	return 0
}

func (x *NetworkProperties) GetMinDappBond() uint64 {
	if x != nil {
		return x.MinDappBond
	}
	return 0
}

func (x *NetworkProperties) GetMaxDappBond() uint64 {
	if x != nil {
		return x.MaxDappBond
	}
	return 0
}

func (x *NetworkProperties) GetDappLiquidationThreshold() uint64 {
	if x != nil {
		return x.DappLiquidationThreshold
	}
	return 0
}

func (x *NetworkProperties) GetDappLiquidationPeriod() uint64 {
	if x != nil {
		return x.DappLiquidationPeriod
	}
	return 0
}

func (x *NetworkProperties) GetDappBondDuration() uint64 {
	if x != nil {
		return x.DappBondDuration
	}
	return 0
}

func (x *NetworkProperties) GetDappVerifierBond() string {
	if x != nil {
		return x.DappVerifierBond
	}
	return ""
}

func (x *NetworkProperties) GetDappAutoDenounceTime() uint64 {
	if x != nil {
		return x.DappAutoDenounceTime
	}
	return 0
}

func (x *NetworkProperties) GetDappMischanceRankDecreaseAmount() uint64 {
	if x != nil {
		return x.DappMischanceRankDecreaseAmount
	}
	return 0
}

func (x *NetworkProperties) GetDappMaxMischance() uint64 {
	if x != nil {
		return x.DappMaxMischance
	}
	return 0
}

func (x *NetworkProperties) GetDappInactiveRankDecreasePercent() string {
	if x != nil {
		return x.DappInactiveRankDecreasePercent
	}
	return ""
}

func (x *NetworkProperties) GetDappPoolSlippageDefault() string {
	if x != nil {
		return x.DappPoolSlippageDefault
	}
	return ""
}

func (x *NetworkProperties) GetMintingFtFee() uint64 {
	if x != nil {
		return x.MintingFtFee
	}
	return 0
}

func (x *NetworkProperties) GetMintingNftFee() uint64 {
	if x != nil {
		return x.MintingNftFee
	}
	return 0
}

func (x *NetworkProperties) GetVetoThreshold() string {
	if x != nil {
		return x.VetoThreshold
	}
	return ""
}

func (x *NetworkProperties) GetAutocompoundIntervalNumBlocks() uint64 {
	if x != nil {
		return x.AutocompoundIntervalNumBlocks
	}
	return 0
}

func (x *NetworkProperties) GetDowntimeInactiveDuration() uint64 {
	if x != nil {
		return x.DowntimeInactiveDuration
	}
	return 0
}

func (x *NetworkProperties) GetBridgeAddress() string {
	if x != nil {
		return x.BridgeAddress
	}
	return ""
}

var File_kira_gov_network_properties_proto protoreflect.FileDescriptor

var file_kira_gov_network_properties_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x31, 0xfa,
	0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x14, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xfb, 0x1d, 0x0a, 0x11,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x4f, 0x0a,
	0x0b, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x39,
	0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x63,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69,
	0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4d, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1e, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x1b, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x6f, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x6e, 0x6a, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x12, 0x30,
	0x0a, 0x14, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x62, 0x69, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x63, 0x61, 0x70, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x62, 0x69, 0x48, 0x61, 0x72, 0x64, 0x63, 0x61,
	0x70, 0x12, 0x60, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x65, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0d, 0x69, 0x6e, 0x66,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x6f, 0x75,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x62, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6a, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x17, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64,
	0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6d, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79,
	0x54, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x62, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1c, 0x61, 0x62, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x6f, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x62,
	0x6f, 0x6e, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x6e, 0x64,
	0x12, 0x60, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42,
	0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x70, 0x70, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x62,
	0x6f, 0x6e, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x61,
	0x70, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x64, 0x61, 0x70, 0x70,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x61, 0x70, 0x70, 0x42, 0x6f,
	0x6e, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x12, 0x64, 0x61,
	0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x64, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x70, 0x70,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x61, 0x70, 0x70, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x23, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x64, 0x61,
	0x70, 0x70, 0x4d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x61, 0x70, 0x70, 0x4d,
	0x61, 0x78, 0x4d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x23, 0x64,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1f, 0x64, 0x61, 0x70, 0x70, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x1a, 0x64, 0x61, 0x70,
	0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x17, 0x64,
	0x61, 0x70, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x74, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x66,
	0x74, 0x46, 0x65, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x76, 0x65, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0d, 0x76, 0x65,
	0x74, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2a, 0xef, 0x19, 0x0a, 0x0f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x0a, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x00, 0x1a, 0x0c, 0x8a,
	0x9d, 0x20, 0x08, 0x4d, 0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x4d,
	0x41, 0x58, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x01, 0x1a, 0x0c, 0x8a, 0x9d, 0x20,
	0x08, 0x4d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x56, 0x4f, 0x54,
	0x45, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10, 0x02, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a,
	0x56, 0x6f, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x4d, 0x49,
	0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0x1a, 0x8a, 0x9d, 0x20, 0x16, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x43, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x04, 0x1a, 0x19, 0x8a, 0x9d, 0x20, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x17, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x4e,
	0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x05, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14,
	0x4d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x43, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x06, 0x1a, 0x1e, 0x8a, 0x9d, 0x20, 0x1a, 0x4d, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x07, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x46, 0x65, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x4d, 0x49, 0x53, 0x43, 0x48, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08, 0x1a, 0x1f, 0x8a, 0x9d, 0x20, 0x1b,
	0x4d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x4d,
	0x41, 0x58, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x1a, 0x10,
	0x8a, 0x9d, 0x20, 0x0c, 0x4d, 0x61, 0x78, 0x4d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x4d, 0x49, 0x53, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0a, 0x1a, 0x17, 0x8a, 0x9d, 0x20, 0x13,
	0x4d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x1f, 0x8a, 0x9d, 0x20, 0x1b, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x50, 0x4f, 0x4f, 0x52,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x0c, 0x1a, 0x1a, 0x8a, 0x9d, 0x20, 0x16, 0x50, 0x6f,
	0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x0d, 0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x4d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x55,
	0x4e, 0x4a, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0e,
	0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x55, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0f, 0x1a,
	0x18, 0x8a, 0x9d, 0x20, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x10, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x4d, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x50, 0x10, 0x11, 0x1a, 0x1a,
	0x8a, 0x9d, 0x20, 0x16, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x55, 0x4e,
	0x49, 0x51, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x10, 0x12, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x55, 0x42, 0x49, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x43, 0x41, 0x50, 0x10, 0x13, 0x1a, 0x0e, 0x8a,
	0x9d, 0x20, 0x0a, 0x55, 0x62, 0x69, 0x48, 0x61, 0x72, 0x64, 0x63, 0x61, 0x70, 0x12, 0x30, 0x0a,
	0x14, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x5f, 0x46, 0x45, 0x45, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x14, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x65, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x49, 0x4e, 0x46, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x15, 0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x49, 0x4e, 0x46, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x16, 0x1a, 0x13, 0x8a, 0x9d,
	0x20, 0x0f, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x17, 0x1a, 0x13, 0x8a, 0x9d, 0x20, 0x0f, 0x55, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x18,
	0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x54, 0x10, 0x19, 0x1a,
	0x18, 0x8a, 0x9d, 0x20, 0x14, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x53, 0x4c, 0x41,
	0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x1a, 0x1a, 0x12,
	0x8a, 0x9d, 0x20, 0x0e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x4d, 0x41, 0x58, 0x5f, 0x4a, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x1b, 0x1a, 0x17, 0x8a,
	0x9d, 0x20, 0x13, 0x4d, 0x61, 0x78, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x4c,
	0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x1c, 0x1a, 0x19, 0x8a, 0x9d, 0x20, 0x15, 0x4d, 0x61, 0x78, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x59, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x1d, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x4d, 0x69, 0x6e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x44, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x1e, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x4d,
	0x61, 0x78, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x44, 0x59, 0x5f, 0x54, 0x58, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x1f, 0x1a, 0x14, 0x8a, 0x9d,
	0x20, 0x10, 0x4d, 0x61, 0x78, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x54, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x41, 0x42, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x20, 0x1a, 0x20, 0x8a, 0x9d, 0x20, 0x1c, 0x41, 0x62, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x4d, 0x41, 0x58,
	0x5f, 0x41, 0x42, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x1a, 0x11, 0x8a,
	0x9d, 0x20, 0x0d, 0x4d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x22, 0x1a, 0x15, 0x8a, 0x9d, 0x20, 0x11, 0x4d,
	0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6e, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x23, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x10, 0x24, 0x1a, 0x18, 0x8a, 0x9d, 0x20,
	0x14, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x10, 0x25, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x4d, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10,
	0x26, 0x1a, 0x19, 0x8a, 0x9d, 0x20, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x4d, 0x41, 0x58, 0x5f, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x27, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x4d, 0x61, 0x78, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x17, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x28, 0x1a, 0x18, 0x8a, 0x9d, 0x20,
	0x14, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x29, 0x1a, 0x1e, 0x8a, 0x9d, 0x20, 0x1a, 0x4d, 0x61,
	0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x4d, 0x41, 0x58, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x2a, 0x1a, 0x1d, 0x8a, 0x9d, 0x20,
	0x19, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x4d, 0x41,
	0x58, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2b, 0x1a, 0x1e,
	0x8a, 0x9d, 0x20, 0x1a, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50,
	0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x2c, 0x1a,
	0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x2d, 0x1a, 0x1b, 0x8a,
	0x9d, 0x20, 0x17, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x4d, 0x49,
	0x4e, 0x5f, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x2e, 0x1a, 0x0f, 0x8a,
	0x9d, 0x20, 0x0b, 0x4d, 0x69, 0x6e, 0x44, 0x61, 0x70, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10,
	0x2f, 0x1a, 0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x70, 0x70, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49,
	0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x30, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x31, 0x1a, 0x19, 0x8a,
	0x9d, 0x20, 0x15, 0x44, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x44, 0x41, 0x50, 0x50,
	0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x32,
	0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x44, 0x61, 0x70, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x33, 0x1a, 0x14,
	0x8a, 0x9d, 0x20, 0x10, 0x44, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x6f, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x34, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x44, 0x61, 0x70, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x44,
	0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x44,
	0x41, 0x50, 0x50, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x35, 0x1a, 0x23, 0x8a, 0x9d, 0x20, 0x1f, 0x44, 0x61, 0x70, 0x70, 0x4d, 0x69,
	0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x44, 0x41, 0x50,
	0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x36, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x44, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x78, 0x4d, 0x69,
	0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x44, 0x41, 0x50, 0x50, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x37,
	0x1a, 0x23, 0x8a, 0x9d, 0x20, 0x1f, 0x44, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x44, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x53, 0x4c, 0x49, 0x50, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x38, 0x1a, 0x1b, 0x8a, 0x9d, 0x20, 0x17, 0x44, 0x61, 0x70, 0x70, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x4d, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x54,
	0x5f, 0x46, 0x45, 0x45, 0x10, 0x39, 0x1a, 0x10, 0x8a, 0x9d, 0x20, 0x0c, 0x4d, 0x69, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x74, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x4d, 0x49, 0x4e, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x46, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x3a, 0x1a, 0x11, 0x8a,
	0x9d, 0x20, 0x0d, 0x4d, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x66, 0x74, 0x46, 0x65, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x56, 0x45, 0x54, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x3b, 0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x56, 0x65, 0x74, 0x6f, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x4f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x3c, 0x1a, 0x21, 0x8a,
	0x9d, 0x20, 0x1d, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x44, 0x4f, 0x57, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3d,
	0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x3e, 0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x27, 0x5a, 0x25, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f,
	0x72, 0x65, 0x2f, 0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_gov_network_properties_proto_rawDescOnce sync.Once
	file_kira_gov_network_properties_proto_rawDescData = file_kira_gov_network_properties_proto_rawDesc
)

func file_kira_gov_network_properties_proto_rawDescGZIP() []byte {
	file_kira_gov_network_properties_proto_rawDescOnce.Do(func() {
		file_kira_gov_network_properties_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_gov_network_properties_proto_rawDescData)
	})
	return file_kira_gov_network_properties_proto_rawDescData
}

var file_kira_gov_network_properties_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kira_gov_network_properties_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kira_gov_network_properties_proto_goTypes = []interface{}{
	(NetworkProperty)(0),            // 0: kira.gov.NetworkProperty
	(*MsgSetNetworkProperties)(nil), // 1: kira.gov.MsgSetNetworkProperties
	(*NetworkPropertyValue)(nil),    // 2: kira.gov.NetworkPropertyValue
	(*NetworkProperties)(nil),       // 3: kira.gov.NetworkProperties
}
var file_kira_gov_network_properties_proto_depIdxs = []int32{
	3, // 0: kira.gov.MsgSetNetworkProperties.network_properties:type_name -> kira.gov.NetworkProperties
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kira_gov_network_properties_proto_init() }
func file_kira_gov_network_properties_proto_init() {
	if File_kira_gov_network_properties_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kira_gov_network_properties_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSetNetworkProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_network_properties_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_network_properties_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_gov_network_properties_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_gov_network_properties_proto_goTypes,
		DependencyIndexes: file_kira_gov_network_properties_proto_depIdxs,
		EnumInfos:         file_kira_gov_network_properties_proto_enumTypes,
		MessageInfos:      file_kira_gov_network_properties_proto_msgTypes,
	}.Build()
	File_kira_gov_network_properties_proto = out.File
	file_kira_gov_network_properties_proto_rawDesc = nil
	file_kira_gov_network_properties_proto_goTypes = nil
	file_kira_gov_network_properties_proto_depIdxs = nil
}
