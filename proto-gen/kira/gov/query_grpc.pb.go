// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/gov/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_PermissionsByAddress_FullMethodName                    = "/kira.gov.Query/PermissionsByAddress"
	Query_AllRoles_FullMethodName                                = "/kira.gov.Query/AllRoles"
	Query_RolesByAddress_FullMethodName                          = "/kira.gov.Query/RolesByAddress"
	Query_Role_FullMethodName                                    = "/kira.gov.Query/Role"
	Query_CouncilorByAddress_FullMethodName                      = "/kira.gov.Query/CouncilorByAddress"
	Query_CouncilorByMoniker_FullMethodName                      = "/kira.gov.Query/CouncilorByMoniker"
	Query_NetworkProperties_FullMethodName                       = "/kira.gov.Query/NetworkProperties"
	Query_ExecutionFee_FullMethodName                            = "/kira.gov.Query/ExecutionFee"
	Query_AllExecutionFees_FullMethodName                        = "/kira.gov.Query/AllExecutionFees"
	Query_PoorNetworkMessages_FullMethodName                     = "/kira.gov.Query/PoorNetworkMessages"
	Query_Proposal_FullMethodName                                = "/kira.gov.Query/Proposal"
	Query_Proposals_FullMethodName                               = "/kira.gov.Query/Proposals"
	Query_WhitelistedProposalVoters_FullMethodName               = "/kira.gov.Query/WhitelistedProposalVoters"
	Query_ProposerVotersCount_FullMethodName                     = "/kira.gov.Query/ProposerVotersCount"
	Query_Vote_FullMethodName                                    = "/kira.gov.Query/Vote"
	Query_Votes_FullMethodName                                   = "/kira.gov.Query/Votes"
	Query_AllDataReferenceKeys_FullMethodName                    = "/kira.gov.Query/AllDataReferenceKeys"
	Query_DataReferenceByKey_FullMethodName                      = "/kira.gov.Query/DataReferenceByKey"
	Query_IdentityRecord_FullMethodName                          = "/kira.gov.Query/IdentityRecord"
	Query_IdentityRecordsByAddress_FullMethodName                = "/kira.gov.Query/IdentityRecordsByAddress"
	Query_AllIdentityRecords_FullMethodName                      = "/kira.gov.Query/AllIdentityRecords"
	Query_IdentityRecordVerifyRequest_FullMethodName             = "/kira.gov.Query/IdentityRecordVerifyRequest"
	Query_IdentityRecordVerifyRequestsByRequester_FullMethodName = "/kira.gov.Query/IdentityRecordVerifyRequestsByRequester"
	Query_IdentityRecordVerifyRequestsByApprover_FullMethodName  = "/kira.gov.Query/IdentityRecordVerifyRequestsByApprover"
	Query_AllIdentityRecordVerifyRequests_FullMethodName         = "/kira.gov.Query/AllIdentityRecordVerifyRequests"
	Query_AllProposalDurations_FullMethodName                    = "/kira.gov.Query/AllProposalDurations"
	Query_ProposalDuration_FullMethodName                        = "/kira.gov.Query/ProposalDuration"
	Query_Councilors_FullMethodName                              = "/kira.gov.Query/Councilors"
	Query_NonCouncilors_FullMethodName                           = "/kira.gov.Query/NonCouncilors"
	Query_AddressesByWhitelistedPermission_FullMethodName        = "/kira.gov.Query/AddressesByWhitelistedPermission"
	Query_AddressesByBlacklistedPermission_FullMethodName        = "/kira.gov.Query/AddressesByBlacklistedPermission"
	Query_AddressesByWhitelistedRole_FullMethodName              = "/kira.gov.Query/AddressesByWhitelistedRole"
	Query_PollsListByAddress_FullMethodName                      = "/kira.gov.Query/PollsListByAddress"
	Query_PollsVotesByPollId_FullMethodName                      = "/kira.gov.Query/PollsVotesByPollId"
	Query_CustomPrefixes_FullMethodName                          = "/kira.gov.Query/CustomPrefixes"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Returns the permissions an actor has by address.
	PermissionsByAddress(ctx context.Context, in *PermissionsByAddressRequest, opts ...grpc.CallOption) (*PermissionsResponse, error)
	// Returns all registered roles
	AllRoles(ctx context.Context, in *AllRolesRequest, opts ...grpc.CallOption) (*AllRolesResponse, error)
	// Returns the roles that are assigned to an address.
	RolesByAddress(ctx context.Context, in *RolesByAddressRequest, opts ...grpc.CallOption) (*RolesByAddressResponse, error)
	// Role returns the role details from role sid
	Role(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	// CouncilorByAddress returns the councilor object from its address
	CouncilorByAddress(ctx context.Context, in *CouncilorByAddressRequest, opts ...grpc.CallOption) (*CouncilorResponse, error)
	// CouncilorByMoniker returns the councilor object from its moniker
	CouncilorByMoniker(ctx context.Context, in *CouncilorByMonikerRequest, opts ...grpc.CallOption) (*CouncilorResponse, error)
	// NetworkProperties returns network properties
	NetworkProperties(ctx context.Context, in *NetworkPropertiesRequest, opts ...grpc.CallOption) (*NetworkPropertiesResponse, error)
	// ExecutionFee returns execution fee from msg type
	ExecutionFee(ctx context.Context, in *ExecutionFeeRequest, opts ...grpc.CallOption) (*ExecutionFeeResponse, error)
	// AllExecutionFees returns all execution fees
	AllExecutionFees(ctx context.Context, in *AllExecutionFeesRequest, opts ...grpc.CallOption) (*AllExecutionFeesResponse, error)
	// PoorNetworkMessages returns poor network messages
	PoorNetworkMessages(ctx context.Context, in *PoorNetworkMessagesRequest, opts ...grpc.CallOption) (*PoorNetworkMessagesResponse, error)
	// Proposal queries proposal details based on ProposalID.
	Proposal(ctx context.Context, in *QueryProposalRequest, opts ...grpc.CallOption) (*QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(ctx context.Context, in *QueryProposalsRequest, opts ...grpc.CallOption) (*QueryProposalsResponse, error)
	// WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
	WhitelistedProposalVoters(ctx context.Context, in *QueryWhitelistedProposalVotersRequest, opts ...grpc.CallOption) (*QueryWhitelistedProposalVotersResponse, error)
	// ProposerVotersCount returns proposers an voters count who can at least create or vote one type of proposal
	ProposerVotersCount(ctx context.Context, in *QueryProposerVotersCountRequest, opts ...grpc.CallOption) (*QueryProposerVotersCountResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(ctx context.Context, in *QueryVoteRequest, opts ...grpc.CallOption) (*QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(ctx context.Context, in *QueryVotesRequest, opts ...grpc.CallOption) (*QueryVotesResponse, error)
	// Query all data reference keys with pagination.
	AllDataReferenceKeys(ctx context.Context, in *QueryDataReferenceKeysRequest, opts ...grpc.CallOption) (*QueryDataReferenceKeysResponse, error)
	// Query data reference by key.
	DataReferenceByKey(ctx context.Context, in *QueryDataReferenceRequest, opts ...grpc.CallOption) (*QueryDataReferenceResponse, error)
	// Query identity record by id
	IdentityRecord(ctx context.Context, in *QueryIdentityRecordRequest, opts ...grpc.CallOption) (*QueryIdentityRecordResponse, error)
	// Query identity records by records creator
	IdentityRecordsByAddress(ctx context.Context, in *QueryIdentityRecordsByAddressRequest, opts ...grpc.CallOption) (*QueryIdentityRecordsByAddressResponse, error)
	// Query all identity records
	AllIdentityRecords(ctx context.Context, in *QueryAllIdentityRecordsRequest, opts ...grpc.CallOption) (*QueryAllIdentityRecordsResponse, error)
	// Query identity record verify request by id
	IdentityRecordVerifyRequest(ctx context.Context, in *QueryIdentityVerifyRecordRequest, opts ...grpc.CallOption) (*QueryIdentityVerifyRecordResponse, error)
	// Query identity records verify requests by requester
	IdentityRecordVerifyRequestsByRequester(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByRequester, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error)
	// Query identity records verify requests by approver
	IdentityRecordVerifyRequestsByApprover(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByApprover, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error)
	// Query all identity records verify requests
	AllIdentityRecordVerifyRequests(ctx context.Context, in *QueryAllIdentityRecordVerifyRequests, opts ...grpc.CallOption) (*QueryAllIdentityRecordVerifyRequestsResponse, error)
	// Query all proposal durations
	AllProposalDurations(ctx context.Context, in *QueryAllProposalDurations, opts ...grpc.CallOption) (*QueryAllProposalDurationsResponse, error)
	// Query single proposal duration
	ProposalDuration(ctx context.Context, in *QueryProposalDuration, opts ...grpc.CallOption) (*QueryProposalDurationResponse, error)
	// Councilors - all councilors (waiting or not), including their corresponding statuses,
	// ranks & abstenation counters - add sub-query to search by specific KIRA address
	Councilors(ctx context.Context, in *QueryCouncilors, opts ...grpc.CallOption) (*QueryCouncilorsResponse, error)
	// NonCouncilors - list all governance members that are NOT Councilors
	NonCouncilors(ctx context.Context, in *QueryNonCouncilors, opts ...grpc.CallOption) (*QueryNonCouncilorsResponse, error)
	// AddressesByWhitelistedPermission - list all KIRA addresses by a specific whitelisted permission (address does NOT have to be a Councilor)
	AddressesByWhitelistedPermission(ctx context.Context, in *QueryAddressesByWhitelistedPermission, opts ...grpc.CallOption) (*QueryAddressesByWhitelistedPermissionResponse, error)
	// AddressesByBlacklistedPermission - list all KIRA addresses by a specific blacklisted permission (address does NOT have to be a Councilor)
	AddressesByBlacklistedPermission(ctx context.Context, in *QueryAddressesByBlacklistedPermission, opts ...grpc.CallOption) (*QueryAddressesByBlacklistedPermissionResponse, error)
	// AddressesByWhitelistedRole - list all kira addresses by a specific whitelisted role (address does NOT have to be a Councilor)
	AddressesByWhitelistedRole(ctx context.Context, in *QueryAddressesByWhitelistedRole, opts ...grpc.CallOption) (*QueryAddressesByWhitelistedRoleResponse, error)
	//Query list of all polls by address
	PollsListByAddress(ctx context.Context, in *QueryPollsListByAddress, opts ...grpc.CallOption) (*QueryPollsListByAddressResponse, error)
	PollsVotesByPollId(ctx context.Context, in *QueryPollsVotesByPollId, opts ...grpc.CallOption) (*QueryPollsVotesByPollIdResponse, error)
	// CustomPrefixes returns custom denom and bech32 address prefix
	CustomPrefixes(ctx context.Context, in *QueryCustomPrefixesRequest, opts ...grpc.CallOption) (*QueryCustomPrefixesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PermissionsByAddress(ctx context.Context, in *PermissionsByAddressRequest, opts ...grpc.CallOption) (*PermissionsResponse, error) {
	out := new(PermissionsResponse)
	err := c.cc.Invoke(ctx, Query_PermissionsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllRoles(ctx context.Context, in *AllRolesRequest, opts ...grpc.CallOption) (*AllRolesResponse, error) {
	out := new(AllRolesResponse)
	err := c.cc.Invoke(ctx, Query_AllRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RolesByAddress(ctx context.Context, in *RolesByAddressRequest, opts ...grpc.CallOption) (*RolesByAddressResponse, error) {
	out := new(RolesByAddressResponse)
	err := c.cc.Invoke(ctx, Query_RolesByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Role(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := c.cc.Invoke(ctx, Query_Role_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CouncilorByAddress(ctx context.Context, in *CouncilorByAddressRequest, opts ...grpc.CallOption) (*CouncilorResponse, error) {
	out := new(CouncilorResponse)
	err := c.cc.Invoke(ctx, Query_CouncilorByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CouncilorByMoniker(ctx context.Context, in *CouncilorByMonikerRequest, opts ...grpc.CallOption) (*CouncilorResponse, error) {
	out := new(CouncilorResponse)
	err := c.cc.Invoke(ctx, Query_CouncilorByMoniker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NetworkProperties(ctx context.Context, in *NetworkPropertiesRequest, opts ...grpc.CallOption) (*NetworkPropertiesResponse, error) {
	out := new(NetworkPropertiesResponse)
	err := c.cc.Invoke(ctx, Query_NetworkProperties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutionFee(ctx context.Context, in *ExecutionFeeRequest, opts ...grpc.CallOption) (*ExecutionFeeResponse, error) {
	out := new(ExecutionFeeResponse)
	err := c.cc.Invoke(ctx, Query_ExecutionFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllExecutionFees(ctx context.Context, in *AllExecutionFeesRequest, opts ...grpc.CallOption) (*AllExecutionFeesResponse, error) {
	out := new(AllExecutionFeesResponse)
	err := c.cc.Invoke(ctx, Query_AllExecutionFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoorNetworkMessages(ctx context.Context, in *PoorNetworkMessagesRequest, opts ...grpc.CallOption) (*PoorNetworkMessagesResponse, error) {
	out := new(PoorNetworkMessagesResponse)
	err := c.cc.Invoke(ctx, Query_PoorNetworkMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposal(ctx context.Context, in *QueryProposalRequest, opts ...grpc.CallOption) (*QueryProposalResponse, error) {
	out := new(QueryProposalResponse)
	err := c.cc.Invoke(ctx, Query_Proposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposals(ctx context.Context, in *QueryProposalsRequest, opts ...grpc.CallOption) (*QueryProposalsResponse, error) {
	out := new(QueryProposalsResponse)
	err := c.cc.Invoke(ctx, Query_Proposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhitelistedProposalVoters(ctx context.Context, in *QueryWhitelistedProposalVotersRequest, opts ...grpc.CallOption) (*QueryWhitelistedProposalVotersResponse, error) {
	out := new(QueryWhitelistedProposalVotersResponse)
	err := c.cc.Invoke(ctx, Query_WhitelistedProposalVoters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposerVotersCount(ctx context.Context, in *QueryProposerVotersCountRequest, opts ...grpc.CallOption) (*QueryProposerVotersCountResponse, error) {
	out := new(QueryProposerVotersCountResponse)
	err := c.cc.Invoke(ctx, Query_ProposerVotersCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vote(ctx context.Context, in *QueryVoteRequest, opts ...grpc.CallOption) (*QueryVoteResponse, error) {
	out := new(QueryVoteResponse)
	err := c.cc.Invoke(ctx, Query_Vote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Votes(ctx context.Context, in *QueryVotesRequest, opts ...grpc.CallOption) (*QueryVotesResponse, error) {
	out := new(QueryVotesResponse)
	err := c.cc.Invoke(ctx, Query_Votes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDataReferenceKeys(ctx context.Context, in *QueryDataReferenceKeysRequest, opts ...grpc.CallOption) (*QueryDataReferenceKeysResponse, error) {
	out := new(QueryDataReferenceKeysResponse)
	err := c.cc.Invoke(ctx, Query_AllDataReferenceKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataReferenceByKey(ctx context.Context, in *QueryDataReferenceRequest, opts ...grpc.CallOption) (*QueryDataReferenceResponse, error) {
	out := new(QueryDataReferenceResponse)
	err := c.cc.Invoke(ctx, Query_DataReferenceByKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecord(ctx context.Context, in *QueryIdentityRecordRequest, opts ...grpc.CallOption) (*QueryIdentityRecordResponse, error) {
	out := new(QueryIdentityRecordResponse)
	err := c.cc.Invoke(ctx, Query_IdentityRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordsByAddress(ctx context.Context, in *QueryIdentityRecordsByAddressRequest, opts ...grpc.CallOption) (*QueryIdentityRecordsByAddressResponse, error) {
	out := new(QueryIdentityRecordsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_IdentityRecordsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllIdentityRecords(ctx context.Context, in *QueryAllIdentityRecordsRequest, opts ...grpc.CallOption) (*QueryAllIdentityRecordsResponse, error) {
	out := new(QueryAllIdentityRecordsResponse)
	err := c.cc.Invoke(ctx, Query_AllIdentityRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordVerifyRequest(ctx context.Context, in *QueryIdentityVerifyRecordRequest, opts ...grpc.CallOption) (*QueryIdentityVerifyRecordResponse, error) {
	out := new(QueryIdentityVerifyRecordResponse)
	err := c.cc.Invoke(ctx, Query_IdentityRecordVerifyRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordVerifyRequestsByRequester(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByRequester, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error) {
	out := new(QueryIdentityRecordVerifyRequestsByRequesterResponse)
	err := c.cc.Invoke(ctx, Query_IdentityRecordVerifyRequestsByRequester_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordVerifyRequestsByApprover(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByApprover, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error) {
	out := new(QueryIdentityRecordVerifyRequestsByApproverResponse)
	err := c.cc.Invoke(ctx, Query_IdentityRecordVerifyRequestsByApprover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllIdentityRecordVerifyRequests(ctx context.Context, in *QueryAllIdentityRecordVerifyRequests, opts ...grpc.CallOption) (*QueryAllIdentityRecordVerifyRequestsResponse, error) {
	out := new(QueryAllIdentityRecordVerifyRequestsResponse)
	err := c.cc.Invoke(ctx, Query_AllIdentityRecordVerifyRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllProposalDurations(ctx context.Context, in *QueryAllProposalDurations, opts ...grpc.CallOption) (*QueryAllProposalDurationsResponse, error) {
	out := new(QueryAllProposalDurationsResponse)
	err := c.cc.Invoke(ctx, Query_AllProposalDurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposalDuration(ctx context.Context, in *QueryProposalDuration, opts ...grpc.CallOption) (*QueryProposalDurationResponse, error) {
	out := new(QueryProposalDurationResponse)
	err := c.cc.Invoke(ctx, Query_ProposalDuration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Councilors(ctx context.Context, in *QueryCouncilors, opts ...grpc.CallOption) (*QueryCouncilorsResponse, error) {
	out := new(QueryCouncilorsResponse)
	err := c.cc.Invoke(ctx, Query_Councilors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NonCouncilors(ctx context.Context, in *QueryNonCouncilors, opts ...grpc.CallOption) (*QueryNonCouncilorsResponse, error) {
	out := new(QueryNonCouncilorsResponse)
	err := c.cc.Invoke(ctx, Query_NonCouncilors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressesByWhitelistedPermission(ctx context.Context, in *QueryAddressesByWhitelistedPermission, opts ...grpc.CallOption) (*QueryAddressesByWhitelistedPermissionResponse, error) {
	out := new(QueryAddressesByWhitelistedPermissionResponse)
	err := c.cc.Invoke(ctx, Query_AddressesByWhitelistedPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressesByBlacklistedPermission(ctx context.Context, in *QueryAddressesByBlacklistedPermission, opts ...grpc.CallOption) (*QueryAddressesByBlacklistedPermissionResponse, error) {
	out := new(QueryAddressesByBlacklistedPermissionResponse)
	err := c.cc.Invoke(ctx, Query_AddressesByBlacklistedPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressesByWhitelistedRole(ctx context.Context, in *QueryAddressesByWhitelistedRole, opts ...grpc.CallOption) (*QueryAddressesByWhitelistedRoleResponse, error) {
	out := new(QueryAddressesByWhitelistedRoleResponse)
	err := c.cc.Invoke(ctx, Query_AddressesByWhitelistedRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsListByAddress(ctx context.Context, in *QueryPollsListByAddress, opts ...grpc.CallOption) (*QueryPollsListByAddressResponse, error) {
	out := new(QueryPollsListByAddressResponse)
	err := c.cc.Invoke(ctx, Query_PollsListByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PollsVotesByPollId(ctx context.Context, in *QueryPollsVotesByPollId, opts ...grpc.CallOption) (*QueryPollsVotesByPollIdResponse, error) {
	out := new(QueryPollsVotesByPollIdResponse)
	err := c.cc.Invoke(ctx, Query_PollsVotesByPollId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustomPrefixes(ctx context.Context, in *QueryCustomPrefixesRequest, opts ...grpc.CallOption) (*QueryCustomPrefixesResponse, error) {
	out := new(QueryCustomPrefixesResponse)
	err := c.cc.Invoke(ctx, Query_CustomPrefixes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Returns the permissions an actor has by address.
	PermissionsByAddress(context.Context, *PermissionsByAddressRequest) (*PermissionsResponse, error)
	// Returns all registered roles
	AllRoles(context.Context, *AllRolesRequest) (*AllRolesResponse, error)
	// Returns the roles that are assigned to an address.
	RolesByAddress(context.Context, *RolesByAddressRequest) (*RolesByAddressResponse, error)
	// Role returns the role details from role sid
	Role(context.Context, *RoleRequest) (*RoleResponse, error)
	// CouncilorByAddress returns the councilor object from its address
	CouncilorByAddress(context.Context, *CouncilorByAddressRequest) (*CouncilorResponse, error)
	// CouncilorByMoniker returns the councilor object from its moniker
	CouncilorByMoniker(context.Context, *CouncilorByMonikerRequest) (*CouncilorResponse, error)
	// NetworkProperties returns network properties
	NetworkProperties(context.Context, *NetworkPropertiesRequest) (*NetworkPropertiesResponse, error)
	// ExecutionFee returns execution fee from msg type
	ExecutionFee(context.Context, *ExecutionFeeRequest) (*ExecutionFeeResponse, error)
	// AllExecutionFees returns all execution fees
	AllExecutionFees(context.Context, *AllExecutionFeesRequest) (*AllExecutionFeesResponse, error)
	// PoorNetworkMessages returns poor network messages
	PoorNetworkMessages(context.Context, *PoorNetworkMessagesRequest) (*PoorNetworkMessagesResponse, error)
	// Proposal queries proposal details based on ProposalID.
	Proposal(context.Context, *QueryProposalRequest) (*QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(context.Context, *QueryProposalsRequest) (*QueryProposalsResponse, error)
	// WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
	WhitelistedProposalVoters(context.Context, *QueryWhitelistedProposalVotersRequest) (*QueryWhitelistedProposalVotersResponse, error)
	// ProposerVotersCount returns proposers an voters count who can at least create or vote one type of proposal
	ProposerVotersCount(context.Context, *QueryProposerVotersCountRequest) (*QueryProposerVotersCountResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(context.Context, *QueryVoteRequest) (*QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(context.Context, *QueryVotesRequest) (*QueryVotesResponse, error)
	// Query all data reference keys with pagination.
	AllDataReferenceKeys(context.Context, *QueryDataReferenceKeysRequest) (*QueryDataReferenceKeysResponse, error)
	// Query data reference by key.
	DataReferenceByKey(context.Context, *QueryDataReferenceRequest) (*QueryDataReferenceResponse, error)
	// Query identity record by id
	IdentityRecord(context.Context, *QueryIdentityRecordRequest) (*QueryIdentityRecordResponse, error)
	// Query identity records by records creator
	IdentityRecordsByAddress(context.Context, *QueryIdentityRecordsByAddressRequest) (*QueryIdentityRecordsByAddressResponse, error)
	// Query all identity records
	AllIdentityRecords(context.Context, *QueryAllIdentityRecordsRequest) (*QueryAllIdentityRecordsResponse, error)
	// Query identity record verify request by id
	IdentityRecordVerifyRequest(context.Context, *QueryIdentityVerifyRecordRequest) (*QueryIdentityVerifyRecordResponse, error)
	// Query identity records verify requests by requester
	IdentityRecordVerifyRequestsByRequester(context.Context, *QueryIdentityRecordVerifyRequestsByRequester) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error)
	// Query identity records verify requests by approver
	IdentityRecordVerifyRequestsByApprover(context.Context, *QueryIdentityRecordVerifyRequestsByApprover) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error)
	// Query all identity records verify requests
	AllIdentityRecordVerifyRequests(context.Context, *QueryAllIdentityRecordVerifyRequests) (*QueryAllIdentityRecordVerifyRequestsResponse, error)
	// Query all proposal durations
	AllProposalDurations(context.Context, *QueryAllProposalDurations) (*QueryAllProposalDurationsResponse, error)
	// Query single proposal duration
	ProposalDuration(context.Context, *QueryProposalDuration) (*QueryProposalDurationResponse, error)
	// Councilors - all councilors (waiting or not), including their corresponding statuses,
	// ranks & abstenation counters - add sub-query to search by specific KIRA address
	Councilors(context.Context, *QueryCouncilors) (*QueryCouncilorsResponse, error)
	// NonCouncilors - list all governance members that are NOT Councilors
	NonCouncilors(context.Context, *QueryNonCouncilors) (*QueryNonCouncilorsResponse, error)
	// AddressesByWhitelistedPermission - list all KIRA addresses by a specific whitelisted permission (address does NOT have to be a Councilor)
	AddressesByWhitelistedPermission(context.Context, *QueryAddressesByWhitelistedPermission) (*QueryAddressesByWhitelistedPermissionResponse, error)
	// AddressesByBlacklistedPermission - list all KIRA addresses by a specific blacklisted permission (address does NOT have to be a Councilor)
	AddressesByBlacklistedPermission(context.Context, *QueryAddressesByBlacklistedPermission) (*QueryAddressesByBlacklistedPermissionResponse, error)
	// AddressesByWhitelistedRole - list all kira addresses by a specific whitelisted role (address does NOT have to be a Councilor)
	AddressesByWhitelistedRole(context.Context, *QueryAddressesByWhitelistedRole) (*QueryAddressesByWhitelistedRoleResponse, error)
	//Query list of all polls by address
	PollsListByAddress(context.Context, *QueryPollsListByAddress) (*QueryPollsListByAddressResponse, error)
	PollsVotesByPollId(context.Context, *QueryPollsVotesByPollId) (*QueryPollsVotesByPollIdResponse, error)
	// CustomPrefixes returns custom denom and bech32 address prefix
	CustomPrefixes(context.Context, *QueryCustomPrefixesRequest) (*QueryCustomPrefixesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) PermissionsByAddress(context.Context, *PermissionsByAddressRequest) (*PermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionsByAddress not implemented")
}
func (UnimplementedQueryServer) AllRoles(context.Context, *AllRolesRequest) (*AllRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRoles not implemented")
}
func (UnimplementedQueryServer) RolesByAddress(context.Context, *RolesByAddressRequest) (*RolesByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolesByAddress not implemented")
}
func (UnimplementedQueryServer) Role(context.Context, *RoleRequest) (*RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Role not implemented")
}
func (UnimplementedQueryServer) CouncilorByAddress(context.Context, *CouncilorByAddressRequest) (*CouncilorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilorByAddress not implemented")
}
func (UnimplementedQueryServer) CouncilorByMoniker(context.Context, *CouncilorByMonikerRequest) (*CouncilorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilorByMoniker not implemented")
}
func (UnimplementedQueryServer) NetworkProperties(context.Context, *NetworkPropertiesRequest) (*NetworkPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkProperties not implemented")
}
func (UnimplementedQueryServer) ExecutionFee(context.Context, *ExecutionFeeRequest) (*ExecutionFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionFee not implemented")
}
func (UnimplementedQueryServer) AllExecutionFees(context.Context, *AllExecutionFeesRequest) (*AllExecutionFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllExecutionFees not implemented")
}
func (UnimplementedQueryServer) PoorNetworkMessages(context.Context, *PoorNetworkMessagesRequest) (*PoorNetworkMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoorNetworkMessages not implemented")
}
func (UnimplementedQueryServer) Proposal(context.Context, *QueryProposalRequest) (*QueryProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposal not implemented")
}
func (UnimplementedQueryServer) Proposals(context.Context, *QueryProposalsRequest) (*QueryProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposals not implemented")
}
func (UnimplementedQueryServer) WhitelistedProposalVoters(context.Context, *QueryWhitelistedProposalVotersRequest) (*QueryWhitelistedProposalVotersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistedProposalVoters not implemented")
}
func (UnimplementedQueryServer) ProposerVotersCount(context.Context, *QueryProposerVotersCountRequest) (*QueryProposerVotersCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposerVotersCount not implemented")
}
func (UnimplementedQueryServer) Vote(context.Context, *QueryVoteRequest) (*QueryVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedQueryServer) Votes(context.Context, *QueryVotesRequest) (*QueryVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Votes not implemented")
}
func (UnimplementedQueryServer) AllDataReferenceKeys(context.Context, *QueryDataReferenceKeysRequest) (*QueryDataReferenceKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDataReferenceKeys not implemented")
}
func (UnimplementedQueryServer) DataReferenceByKey(context.Context, *QueryDataReferenceRequest) (*QueryDataReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataReferenceByKey not implemented")
}
func (UnimplementedQueryServer) IdentityRecord(context.Context, *QueryIdentityRecordRequest) (*QueryIdentityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecord not implemented")
}
func (UnimplementedQueryServer) IdentityRecordsByAddress(context.Context, *QueryIdentityRecordsByAddressRequest) (*QueryIdentityRecordsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordsByAddress not implemented")
}
func (UnimplementedQueryServer) AllIdentityRecords(context.Context, *QueryAllIdentityRecordsRequest) (*QueryAllIdentityRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIdentityRecords not implemented")
}
func (UnimplementedQueryServer) IdentityRecordVerifyRequest(context.Context, *QueryIdentityVerifyRecordRequest) (*QueryIdentityVerifyRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordVerifyRequest not implemented")
}
func (UnimplementedQueryServer) IdentityRecordVerifyRequestsByRequester(context.Context, *QueryIdentityRecordVerifyRequestsByRequester) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordVerifyRequestsByRequester not implemented")
}
func (UnimplementedQueryServer) IdentityRecordVerifyRequestsByApprover(context.Context, *QueryIdentityRecordVerifyRequestsByApprover) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordVerifyRequestsByApprover not implemented")
}
func (UnimplementedQueryServer) AllIdentityRecordVerifyRequests(context.Context, *QueryAllIdentityRecordVerifyRequests) (*QueryAllIdentityRecordVerifyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIdentityRecordVerifyRequests not implemented")
}
func (UnimplementedQueryServer) AllProposalDurations(context.Context, *QueryAllProposalDurations) (*QueryAllProposalDurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProposalDurations not implemented")
}
func (UnimplementedQueryServer) ProposalDuration(context.Context, *QueryProposalDuration) (*QueryProposalDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalDuration not implemented")
}
func (UnimplementedQueryServer) Councilors(context.Context, *QueryCouncilors) (*QueryCouncilorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Councilors not implemented")
}
func (UnimplementedQueryServer) NonCouncilors(context.Context, *QueryNonCouncilors) (*QueryNonCouncilorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonCouncilors not implemented")
}
func (UnimplementedQueryServer) AddressesByWhitelistedPermission(context.Context, *QueryAddressesByWhitelistedPermission) (*QueryAddressesByWhitelistedPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressesByWhitelistedPermission not implemented")
}
func (UnimplementedQueryServer) AddressesByBlacklistedPermission(context.Context, *QueryAddressesByBlacklistedPermission) (*QueryAddressesByBlacklistedPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressesByBlacklistedPermission not implemented")
}
func (UnimplementedQueryServer) AddressesByWhitelistedRole(context.Context, *QueryAddressesByWhitelistedRole) (*QueryAddressesByWhitelistedRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressesByWhitelistedRole not implemented")
}
func (UnimplementedQueryServer) PollsListByAddress(context.Context, *QueryPollsListByAddress) (*QueryPollsListByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsListByAddress not implemented")
}
func (UnimplementedQueryServer) PollsVotesByPollId(context.Context, *QueryPollsVotesByPollId) (*QueryPollsVotesByPollIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollsVotesByPollId not implemented")
}
func (UnimplementedQueryServer) CustomPrefixes(context.Context, *QueryCustomPrefixesRequest) (*QueryCustomPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomPrefixes not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_PermissionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PermissionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionsByAddress(ctx, req.(*PermissionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllRoles(ctx, req.(*AllRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RolesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RolesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RolesByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RolesByAddress(ctx, req.(*RolesByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Role_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Role(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Role_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Role(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CouncilorByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouncilorByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CouncilorByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CouncilorByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CouncilorByAddress(ctx, req.(*CouncilorByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CouncilorByMoniker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouncilorByMonikerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CouncilorByMoniker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CouncilorByMoniker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CouncilorByMoniker(ctx, req.(*CouncilorByMonikerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NetworkProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NetworkProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NetworkProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NetworkProperties(ctx, req.(*NetworkPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExecutionFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutionFee(ctx, req.(*ExecutionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllExecutionFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllExecutionFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllExecutionFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllExecutionFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllExecutionFees(ctx, req.(*AllExecutionFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoorNetworkMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoorNetworkMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoorNetworkMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoorNetworkMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoorNetworkMessages(ctx, req.(*PoorNetworkMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Proposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposal(ctx, req.(*QueryProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Proposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposals(ctx, req.(*QueryProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhitelistedProposalVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistedProposalVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhitelistedProposalVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WhitelistedProposalVoters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhitelistedProposalVoters(ctx, req.(*QueryWhitelistedProposalVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposerVotersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposerVotersCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposerVotersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProposerVotersCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposerVotersCount(ctx, req.(*QueryProposerVotersCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vote(ctx, req.(*QueryVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Votes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Votes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Votes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Votes(ctx, req.(*QueryVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDataReferenceKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataReferenceKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDataReferenceKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllDataReferenceKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDataReferenceKeys(ctx, req.(*QueryDataReferenceKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataReferenceByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataReferenceByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DataReferenceByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataReferenceByKey(ctx, req.(*QueryDataReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IdentityRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecord(ctx, req.(*QueryIdentityRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IdentityRecordsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordsByAddress(ctx, req.(*QueryIdentityRecordsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllIdentityRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIdentityRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIdentityRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllIdentityRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIdentityRecords(ctx, req.(*QueryAllIdentityRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordVerifyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityVerifyRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordVerifyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IdentityRecordVerifyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordVerifyRequest(ctx, req.(*QueryIdentityVerifyRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordVerifyRequestsByRequester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordVerifyRequestsByRequester)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByRequester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IdentityRecordVerifyRequestsByRequester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByRequester(ctx, req.(*QueryIdentityRecordVerifyRequestsByRequester))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordVerifyRequestsByApprover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordVerifyRequestsByApprover)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByApprover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IdentityRecordVerifyRequestsByApprover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByApprover(ctx, req.(*QueryIdentityRecordVerifyRequestsByApprover))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllIdentityRecordVerifyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIdentityRecordVerifyRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIdentityRecordVerifyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllIdentityRecordVerifyRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIdentityRecordVerifyRequests(ctx, req.(*QueryAllIdentityRecordVerifyRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllProposalDurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposalDurations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllProposalDurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllProposalDurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllProposalDurations(ctx, req.(*QueryAllProposalDurations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposalDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposalDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProposalDuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposalDuration(ctx, req.(*QueryProposalDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Councilors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCouncilors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Councilors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Councilors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Councilors(ctx, req.(*QueryCouncilors))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NonCouncilors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNonCouncilors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NonCouncilors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NonCouncilors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NonCouncilors(ctx, req.(*QueryNonCouncilors))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressesByWhitelistedPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressesByWhitelistedPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressesByWhitelistedPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AddressesByWhitelistedPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressesByWhitelistedPermission(ctx, req.(*QueryAddressesByWhitelistedPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressesByBlacklistedPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressesByBlacklistedPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressesByBlacklistedPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AddressesByBlacklistedPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressesByBlacklistedPermission(ctx, req.(*QueryAddressesByBlacklistedPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressesByWhitelistedRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressesByWhitelistedRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressesByWhitelistedRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AddressesByWhitelistedRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressesByWhitelistedRole(ctx, req.(*QueryAddressesByWhitelistedRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPollsListByAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PollsListByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsListByAddress(ctx, req.(*QueryPollsListByAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PollsVotesByPollId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPollsVotesByPollId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PollsVotesByPollId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PollsVotesByPollId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PollsVotesByPollId(ctx, req.(*QueryPollsVotesByPollId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustomPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCustomPrefixesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustomPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustomPrefixes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustomPrefixes(ctx, req.(*QueryCustomPrefixesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.gov.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PermissionsByAddress",
			Handler:    _Query_PermissionsByAddress_Handler,
		},
		{
			MethodName: "AllRoles",
			Handler:    _Query_AllRoles_Handler,
		},
		{
			MethodName: "RolesByAddress",
			Handler:    _Query_RolesByAddress_Handler,
		},
		{
			MethodName: "Role",
			Handler:    _Query_Role_Handler,
		},
		{
			MethodName: "CouncilorByAddress",
			Handler:    _Query_CouncilorByAddress_Handler,
		},
		{
			MethodName: "CouncilorByMoniker",
			Handler:    _Query_CouncilorByMoniker_Handler,
		},
		{
			MethodName: "NetworkProperties",
			Handler:    _Query_NetworkProperties_Handler,
		},
		{
			MethodName: "ExecutionFee",
			Handler:    _Query_ExecutionFee_Handler,
		},
		{
			MethodName: "AllExecutionFees",
			Handler:    _Query_AllExecutionFees_Handler,
		},
		{
			MethodName: "PoorNetworkMessages",
			Handler:    _Query_PoorNetworkMessages_Handler,
		},
		{
			MethodName: "Proposal",
			Handler:    _Query_Proposal_Handler,
		},
		{
			MethodName: "Proposals",
			Handler:    _Query_Proposals_Handler,
		},
		{
			MethodName: "WhitelistedProposalVoters",
			Handler:    _Query_WhitelistedProposalVoters_Handler,
		},
		{
			MethodName: "ProposerVotersCount",
			Handler:    _Query_ProposerVotersCount_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Query_Vote_Handler,
		},
		{
			MethodName: "Votes",
			Handler:    _Query_Votes_Handler,
		},
		{
			MethodName: "AllDataReferenceKeys",
			Handler:    _Query_AllDataReferenceKeys_Handler,
		},
		{
			MethodName: "DataReferenceByKey",
			Handler:    _Query_DataReferenceByKey_Handler,
		},
		{
			MethodName: "IdentityRecord",
			Handler:    _Query_IdentityRecord_Handler,
		},
		{
			MethodName: "IdentityRecordsByAddress",
			Handler:    _Query_IdentityRecordsByAddress_Handler,
		},
		{
			MethodName: "AllIdentityRecords",
			Handler:    _Query_AllIdentityRecords_Handler,
		},
		{
			MethodName: "IdentityRecordVerifyRequest",
			Handler:    _Query_IdentityRecordVerifyRequest_Handler,
		},
		{
			MethodName: "IdentityRecordVerifyRequestsByRequester",
			Handler:    _Query_IdentityRecordVerifyRequestsByRequester_Handler,
		},
		{
			MethodName: "IdentityRecordVerifyRequestsByApprover",
			Handler:    _Query_IdentityRecordVerifyRequestsByApprover_Handler,
		},
		{
			MethodName: "AllIdentityRecordVerifyRequests",
			Handler:    _Query_AllIdentityRecordVerifyRequests_Handler,
		},
		{
			MethodName: "AllProposalDurations",
			Handler:    _Query_AllProposalDurations_Handler,
		},
		{
			MethodName: "ProposalDuration",
			Handler:    _Query_ProposalDuration_Handler,
		},
		{
			MethodName: "Councilors",
			Handler:    _Query_Councilors_Handler,
		},
		{
			MethodName: "NonCouncilors",
			Handler:    _Query_NonCouncilors_Handler,
		},
		{
			MethodName: "AddressesByWhitelistedPermission",
			Handler:    _Query_AddressesByWhitelistedPermission_Handler,
		},
		{
			MethodName: "AddressesByBlacklistedPermission",
			Handler:    _Query_AddressesByBlacklistedPermission_Handler,
		},
		{
			MethodName: "AddressesByWhitelistedRole",
			Handler:    _Query_AddressesByWhitelistedRole_Handler,
		},
		{
			MethodName: "PollsListByAddress",
			Handler:    _Query_PollsListByAddress_Handler,
		},
		{
			MethodName: "PollsVotesByPollId",
			Handler:    _Query_PollsVotesByPollId_Handler,
		},
		{
			MethodName: "CustomPrefixes",
			Handler:    _Query_CustomPrefixes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/gov/query.proto",
}
