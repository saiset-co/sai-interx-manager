// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/gov/query.proto

package types

import (
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryPollsVotesByPollId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollId uint64 `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
}

func (x *QueryPollsVotesByPollId) Reset() {
	*x = QueryPollsVotesByPollId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollsVotesByPollId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollsVotesByPollId) ProtoMessage() {}

func (x *QueryPollsVotesByPollId) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollsVotesByPollId.ProtoReflect.Descriptor instead.
func (*QueryPollsVotesByPollId) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryPollsVotesByPollId) GetPollId() uint64 {
	if x != nil {
		return x.PollId
	}
	return 0
}

type QueryPollsVotesByPollIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes []*PollVote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *QueryPollsVotesByPollIdResponse) Reset() {
	*x = QueryPollsVotesByPollIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollsVotesByPollIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollsVotesByPollIdResponse) ProtoMessage() {}

func (x *QueryPollsVotesByPollIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollsVotesByPollIdResponse.ProtoReflect.Descriptor instead.
func (*QueryPollsVotesByPollIdResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryPollsVotesByPollIdResponse) GetVotes() []*PollVote {
	if x != nil {
		return x.Votes
	}
	return nil
}

type QueryPollsListByAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator []byte `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *QueryPollsListByAddress) Reset() {
	*x = QueryPollsListByAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollsListByAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollsListByAddress) ProtoMessage() {}

func (x *QueryPollsListByAddress) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollsListByAddress.ProtoReflect.Descriptor instead.
func (*QueryPollsListByAddress) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryPollsListByAddress) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

type QueryPollsListByAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Polls []*Poll `protobuf:"bytes,1,rep,name=polls,proto3" json:"polls,omitempty"`
}

func (x *QueryPollsListByAddressResponse) Reset() {
	*x = QueryPollsListByAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollsListByAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollsListByAddressResponse) ProtoMessage() {}

func (x *QueryPollsListByAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollsListByAddressResponse.ProtoReflect.Descriptor instead.
func (*QueryPollsListByAddressResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryPollsListByAddressResponse) GetPolls() []*Poll {
	if x != nil {
		return x.Polls
	}
	return nil
}

type NetworkPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetworkPropertiesRequest) Reset() {
	*x = NetworkPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPropertiesRequest) ProtoMessage() {}

func (x *NetworkPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPropertiesRequest.ProtoReflect.Descriptor instead.
func (*NetworkPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{4}
}

type NetworkPropertiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties *NetworkProperties `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *NetworkPropertiesResponse) Reset() {
	*x = NetworkPropertiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPropertiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPropertiesResponse) ProtoMessage() {}

func (x *NetworkPropertiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPropertiesResponse.ProtoReflect.Descriptor instead.
func (*NetworkPropertiesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkPropertiesResponse) GetProperties() *NetworkProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PermissionsByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *PermissionsByAddressRequest) Reset() {
	*x = PermissionsByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsByAddressRequest) ProtoMessage() {}

func (x *PermissionsByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsByAddressRequest.ProtoReflect.Descriptor instead.
func (*PermissionsByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{6}
}

func (x *PermissionsByAddressRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type PermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *PermissionsResponse) Reset() {
	*x = PermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsResponse) ProtoMessage() {}

func (x *PermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsResponse.ProtoReflect.Descriptor instead.
func (*PermissionsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{7}
}

func (x *PermissionsResponse) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type RoleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`  // (integer) - auto assigned
	Sid         string       `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"` // string identifier unique variable name
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Permissions *Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RoleQuery) Reset() {
	*x = RoleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleQuery) ProtoMessage() {}

func (x *RoleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleQuery.ProtoReflect.Descriptor instead.
func (*RoleQuery) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{8}
}

func (x *RoleQuery) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleQuery) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RoleQuery) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RoleQuery) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type AllRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllRolesRequest) Reset() {
	*x = AllRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllRolesRequest) ProtoMessage() {}

func (x *AllRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllRolesRequest.ProtoReflect.Descriptor instead.
func (*AllRolesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{9}
}

type AllRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []*RoleQuery `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AllRolesResponse) Reset() {
	*x = AllRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllRolesResponse) ProtoMessage() {}

func (x *AllRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllRolesResponse.ProtoReflect.Descriptor instead.
func (*AllRolesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{10}
}

func (x *AllRolesResponse) GetRoles() []*RoleQuery {
	if x != nil {
		return x.Roles
	}
	return nil
}

type RolesByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *RolesByAddressRequest) Reset() {
	*x = RolesByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolesByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolesByAddressRequest) ProtoMessage() {}

func (x *RolesByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolesByAddressRequest.ProtoReflect.Descriptor instead.
func (*RolesByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{11}
}

func (x *RolesByAddressRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type RolesByAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleIds []uint64 `protobuf:"varint,1,rep,packed,name=roleIds,proto3" json:"roleIds,omitempty"`
}

func (x *RolesByAddressResponse) Reset() {
	*x = RolesByAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolesByAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolesByAddressResponse) ProtoMessage() {}

func (x *RolesByAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolesByAddressResponse.ProtoReflect.Descriptor instead.
func (*RolesByAddressResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{12}
}

func (x *RolesByAddressResponse) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type RoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"` // sid or id
}

func (x *RoleRequest) Reset() {
	*x = RoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleRequest) ProtoMessage() {}

func (x *RoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleRequest.ProtoReflect.Descriptor instead.
func (*RoleRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{13}
}

func (x *RoleRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type RoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *RoleQuery `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *RoleResponse) Reset() {
	*x = RoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleResponse) ProtoMessage() {}

func (x *RoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleResponse.ProtoReflect.Descriptor instead.
func (*RoleResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{14}
}

func (x *RoleResponse) GetRole() *RoleQuery {
	if x != nil {
		return x.Role
	}
	return nil
}

type ExecutionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionType string `protobuf:"bytes,1,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
}

func (x *ExecutionFeeRequest) Reset() {
	*x = ExecutionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFeeRequest) ProtoMessage() {}

func (x *ExecutionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFeeRequest.ProtoReflect.Descriptor instead.
func (*ExecutionFeeRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{15}
}

func (x *ExecutionFeeRequest) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

type ExecutionFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee *ExecutionFee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ExecutionFeeResponse) Reset() {
	*x = ExecutionFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFeeResponse) ProtoMessage() {}

func (x *ExecutionFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFeeResponse.ProtoReflect.Descriptor instead.
func (*ExecutionFeeResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{16}
}

func (x *ExecutionFeeResponse) GetFee() *ExecutionFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

type AllExecutionFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllExecutionFeesRequest) Reset() {
	*x = AllExecutionFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllExecutionFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllExecutionFeesRequest) ProtoMessage() {}

func (x *AllExecutionFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllExecutionFeesRequest.ProtoReflect.Descriptor instead.
func (*AllExecutionFeesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{17}
}

type AllExecutionFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fees    []*ExecutionFee `protobuf:"bytes,1,rep,name=fees,proto3" json:"fees,omitempty"`
	TxTypes []string        `protobuf:"bytes,2,rep,name=tx_types,json=txTypes,proto3" json:"tx_types,omitempty"`
}

func (x *AllExecutionFeesResponse) Reset() {
	*x = AllExecutionFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllExecutionFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllExecutionFeesResponse) ProtoMessage() {}

func (x *AllExecutionFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllExecutionFeesResponse.ProtoReflect.Descriptor instead.
func (*AllExecutionFeesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{18}
}

func (x *AllExecutionFeesResponse) GetFees() []*ExecutionFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *AllExecutionFeesResponse) GetTxTypes() []string {
	if x != nil {
		return x.TxTypes
	}
	return nil
}

type PoorNetworkMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PoorNetworkMessagesRequest) Reset() {
	*x = PoorNetworkMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoorNetworkMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoorNetworkMessagesRequest) ProtoMessage() {}

func (x *PoorNetworkMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoorNetworkMessagesRequest.ProtoReflect.Descriptor instead.
func (*PoorNetworkMessagesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{19}
}

type PoorNetworkMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *PoorNetworkMessagesResponse) Reset() {
	*x = PoorNetworkMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoorNetworkMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoorNetworkMessagesResponse) ProtoMessage() {}

func (x *PoorNetworkMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoorNetworkMessagesResponse.ProtoReflect.Descriptor instead.
func (*PoorNetworkMessagesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{20}
}

func (x *PoorNetworkMessagesResponse) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CouncilorByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *CouncilorByAddressRequest) Reset() {
	*x = CouncilorByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouncilorByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouncilorByAddressRequest) ProtoMessage() {}

func (x *CouncilorByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouncilorByAddressRequest.ProtoReflect.Descriptor instead.
func (*CouncilorByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{21}
}

func (x *CouncilorByAddressRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type CouncilorByMonikerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
}

func (x *CouncilorByMonikerRequest) Reset() {
	*x = CouncilorByMonikerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouncilorByMonikerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouncilorByMonikerRequest) ProtoMessage() {}

func (x *CouncilorByMonikerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouncilorByMonikerRequest.ProtoReflect.Descriptor instead.
func (*CouncilorByMonikerRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{22}
}

func (x *CouncilorByMonikerRequest) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

type CouncilorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Councilor *Councilor `protobuf:"bytes,1,opt,name=councilor,proto3" json:"councilor,omitempty"`
}

func (x *CouncilorResponse) Reset() {
	*x = CouncilorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouncilorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouncilorResponse) ProtoMessage() {}

func (x *CouncilorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouncilorResponse.ProtoReflect.Descriptor instead.
func (*CouncilorResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{23}
}

func (x *CouncilorResponse) GetCouncilor() *Councilor {
	if x != nil {
		return x.Councilor
	}
	return nil
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
type QueryProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *QueryProposalRequest) Reset() {
	*x = QueryProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalRequest) ProtoMessage() {}

func (x *QueryProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalRequest.ProtoReflect.Descriptor instead.
func (*QueryProposalRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{24}
}

func (x *QueryProposalRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
type QueryProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	Votes    []*Vote   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *QueryProposalResponse) Reset() {
	*x = QueryProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalResponse) ProtoMessage() {}

func (x *QueryProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalResponse.ProtoReflect.Descriptor instead.
func (*QueryProposalResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{25}
}

func (x *QueryProposalResponse) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *QueryProposalResponse) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
type QueryProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// voter defines the voter address for the proposals.
	Voter      string             `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryProposalsRequest) Reset() {
	*x = QueryProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalsRequest) ProtoMessage() {}

func (x *QueryProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalsRequest.ProtoReflect.Descriptor instead.
func (*QueryProposalsRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{26}
}

func (x *QueryProposalsRequest) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *QueryProposalsRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
type QueryProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals  []*Proposal         `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryProposalsResponse) Reset() {
	*x = QueryProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalsResponse) ProtoMessage() {}

func (x *QueryProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalsResponse.ProtoReflect.Descriptor instead.
func (*QueryProposalsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{27}
}

func (x *QueryProposalsResponse) GetProposals() []*Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *QueryProposalsResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
type QueryWhitelistedProposalVotersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *QueryWhitelistedProposalVotersRequest) Reset() {
	*x = QueryWhitelistedProposalVotersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWhitelistedProposalVotersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWhitelistedProposalVotersRequest) ProtoMessage() {}

func (x *QueryWhitelistedProposalVotersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWhitelistedProposalVotersRequest.ProtoReflect.Descriptor instead.
func (*QueryWhitelistedProposalVotersRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{28}
}

func (x *QueryWhitelistedProposalVotersRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
type QueryWhitelistedProposalVotersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voters []*NetworkActor `protobuf:"bytes,1,rep,name=voters,proto3" json:"voters,omitempty"`
}

func (x *QueryWhitelistedProposalVotersResponse) Reset() {
	*x = QueryWhitelistedProposalVotersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWhitelistedProposalVotersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWhitelistedProposalVotersResponse) ProtoMessage() {}

func (x *QueryWhitelistedProposalVotersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWhitelistedProposalVotersResponse.ProtoReflect.Descriptor instead.
func (*QueryWhitelistedProposalVotersResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{29}
}

func (x *QueryWhitelistedProposalVotersResponse) GetVoters() []*NetworkActor {
	if x != nil {
		return x.Voters
	}
	return nil
}

// QueryProposerVotersCountRequest is the request type for Query/ProposerVotersCount RPC method.
type QueryProposerVotersCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryProposerVotersCountRequest) Reset() {
	*x = QueryProposerVotersCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposerVotersCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposerVotersCountRequest) ProtoMessage() {}

func (x *QueryProposerVotersCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposerVotersCountRequest.ProtoReflect.Descriptor instead.
func (*QueryProposerVotersCountRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{30}
}

// QueryProposerVotersCountResponse is the response type for Query/ProposerVotersCount RPC method.
type QueryProposerVotersCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposers uint64 `protobuf:"varint,1,opt,name=proposers,proto3" json:"proposers,omitempty"`
	Voters    uint64 `protobuf:"varint,2,opt,name=voters,proto3" json:"voters,omitempty"`
}

func (x *QueryProposerVotersCountResponse) Reset() {
	*x = QueryProposerVotersCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposerVotersCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposerVotersCountResponse) ProtoMessage() {}

func (x *QueryProposerVotersCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposerVotersCountResponse.ProtoReflect.Descriptor instead.
func (*QueryProposerVotersCountResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{31}
}

func (x *QueryProposerVotersCountResponse) GetProposers() uint64 {
	if x != nil {
		return x.Proposers
	}
	return 0
}

func (x *QueryProposerVotersCountResponse) GetVoters() uint64 {
	if x != nil {
		return x.Voters
	}
	return 0
}

// QueryVoteRequest is the request type for the Query/Vote RPC method.
type QueryVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// voter defines the oter address for the proposals.
	Voter string `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (x *QueryVoteRequest) Reset() {
	*x = QueryVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVoteRequest) ProtoMessage() {}

func (x *QueryVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVoteRequest.ProtoReflect.Descriptor instead.
func (*QueryVoteRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{32}
}

func (x *QueryVoteRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

func (x *QueryVoteRequest) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

// QueryVoteResponse is the response type for the Query/Vote RPC method.
type QueryVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vote defined the queried vote.
	Vote *Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *QueryVoteResponse) Reset() {
	*x = QueryVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVoteResponse) ProtoMessage() {}

func (x *QueryVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVoteResponse.ProtoReflect.Descriptor instead.
func (*QueryVoteResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{33}
}

func (x *QueryVoteResponse) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
type QueryVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *QueryVotesRequest) Reset() {
	*x = QueryVotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVotesRequest) ProtoMessage() {}

func (x *QueryVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVotesRequest.ProtoReflect.Descriptor instead.
func (*QueryVotesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{34}
}

func (x *QueryVotesRequest) GetProposalId() uint64 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
type QueryVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// votes defined the queried votes.
	Votes []*Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *QueryVotesResponse) Reset() {
	*x = QueryVotesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVotesResponse) ProtoMessage() {}

func (x *QueryVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVotesResponse.ProtoReflect.Descriptor instead.
func (*QueryVotesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{35}
}

func (x *QueryVotesResponse) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

// QueryDataReferenceKeysRequest is the request type for data reference keys query.
type QueryDataReferenceKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryDataReferenceKeysRequest) Reset() {
	*x = QueryDataReferenceKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceKeysRequest) ProtoMessage() {}

func (x *QueryDataReferenceKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceKeysRequest.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceKeysRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{36}
}

func (x *QueryDataReferenceKeysRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
type QueryDataReferenceKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys       []string            `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryDataReferenceKeysResponse) Reset() {
	*x = QueryDataReferenceKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceKeysResponse) ProtoMessage() {}

func (x *QueryDataReferenceKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceKeysResponse.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceKeysResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{37}
}

func (x *QueryDataReferenceKeysResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *QueryDataReferenceKeysResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryDataReferenceRequest is the response type for data reference query.
type QueryDataReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *QueryDataReferenceRequest) Reset() {
	*x = QueryDataReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceRequest) ProtoMessage() {}

func (x *QueryDataReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceRequest.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{38}
}

func (x *QueryDataReferenceRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// QueryDataReferenceResponse is the response type for data referencequery.
type QueryDataReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DataRegistryEntry `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDataReferenceResponse) Reset() {
	*x = QueryDataReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDataReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataReferenceResponse) ProtoMessage() {}

func (x *QueryDataReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataReferenceResponse.ProtoReflect.Descriptor instead.
func (*QueryDataReferenceResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{39}
}

func (x *QueryDataReferenceResponse) GetData() *DataRegistryEntry {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryIdentityRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryIdentityRecordRequest) Reset() {
	*x = QueryIdentityRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordRequest) ProtoMessage() {}

func (x *QueryIdentityRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{40}
}

func (x *QueryIdentityRecordRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QueryIdentityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *IdentityRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *QueryIdentityRecordResponse) Reset() {
	*x = QueryIdentityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordResponse) ProtoMessage() {}

func (x *QueryIdentityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{41}
}

func (x *QueryIdentityRecordResponse) GetRecord() *IdentityRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type QueryIdentityRecordsByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator []byte   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Keys    []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *QueryIdentityRecordsByAddressRequest) Reset() {
	*x = QueryIdentityRecordsByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordsByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordsByAddressRequest) ProtoMessage() {}

func (x *QueryIdentityRecordsByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordsByAddressRequest.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordsByAddressRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{42}
}

func (x *QueryIdentityRecordsByAddressRequest) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *QueryIdentityRecordsByAddressRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type QueryIdentityRecordsByAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*IdentityRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *QueryIdentityRecordsByAddressResponse) Reset() {
	*x = QueryIdentityRecordsByAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordsByAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordsByAddressResponse) ProtoMessage() {}

func (x *QueryIdentityRecordsByAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordsByAddressResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordsByAddressResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{43}
}

func (x *QueryIdentityRecordsByAddressResponse) GetRecords() []*IdentityRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type QueryAllIdentityRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordsRequest) Reset() {
	*x = QueryAllIdentityRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordsRequest) ProtoMessage() {}

func (x *QueryAllIdentityRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordsRequest.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordsRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{44}
}

func (x *QueryAllIdentityRecordsRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIdentityRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records    []*IdentityRecord   `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordsResponse) Reset() {
	*x = QueryAllIdentityRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordsResponse) ProtoMessage() {}

func (x *QueryAllIdentityRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordsResponse.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{45}
}

func (x *QueryAllIdentityRecordsResponse) GetRecords() []*IdentityRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *QueryAllIdentityRecordsResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityVerifyRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *QueryIdentityVerifyRecordRequest) Reset() {
	*x = QueryIdentityVerifyRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityVerifyRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityVerifyRecordRequest) ProtoMessage() {}

func (x *QueryIdentityVerifyRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityVerifyRecordRequest.ProtoReflect.Descriptor instead.
func (*QueryIdentityVerifyRecordRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{46}
}

func (x *QueryIdentityVerifyRecordRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type QueryIdentityVerifyRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecord *IdentityRecordsVerify `protobuf:"bytes,1,opt,name=verify_record,json=verifyRecord,proto3" json:"verify_record,omitempty"`
}

func (x *QueryIdentityVerifyRecordResponse) Reset() {
	*x = QueryIdentityVerifyRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityVerifyRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityVerifyRecordResponse) ProtoMessage() {}

func (x *QueryIdentityVerifyRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityVerifyRecordResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityVerifyRecordResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{47}
}

func (x *QueryIdentityVerifyRecordResponse) GetVerifyRecord() *IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecord
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByApprover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approver   []byte             `protobuf:"bytes,1,opt,name=approver,proto3" json:"approver,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByApprover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByApprover) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByApprover) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByApprover.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByApprover) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{48}
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) GetApprover() []byte {
	if x != nil {
		return x.Approver
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByApprover) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByApproverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecords []*IdentityRecordsVerify `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records,omitempty"`
	Pagination    *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByApproverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByApproverResponse) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByApproverResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByApproverResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{49}
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) GetVerifyRecords() []*IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecords
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByApproverResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByRequester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requester  []byte             `protobuf:"bytes,1,opt,name=requester,proto3" json:"requester,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByRequester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByRequester) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByRequester) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByRequester.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByRequester) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{50}
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) GetRequester() []byte {
	if x != nil {
		return x.Requester
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByRequester) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByRequesterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecords []*IdentityRecordsVerify `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records,omitempty"`
	Pagination    *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) Reset() {
	*x = QueryIdentityRecordVerifyRequestsByRequesterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryIdentityRecordVerifyRequestsByRequesterResponse) ProtoMessage() {}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryIdentityRecordVerifyRequestsByRequesterResponse.ProtoReflect.Descriptor instead.
func (*QueryIdentityRecordVerifyRequestsByRequesterResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{51}
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) GetVerifyRecords() []*IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecords
	}
	return nil
}

func (x *QueryIdentityRecordVerifyRequestsByRequesterResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIdentityRecordVerifyRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordVerifyRequests) Reset() {
	*x = QueryAllIdentityRecordVerifyRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordVerifyRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordVerifyRequests) ProtoMessage() {}

func (x *QueryAllIdentityRecordVerifyRequests) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordVerifyRequests.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordVerifyRequests) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{52}
}

func (x *QueryAllIdentityRecordVerifyRequests) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllIdentityRecordVerifyRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyRecords []*IdentityRecordsVerify `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records,omitempty"`
	Pagination    *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) Reset() {
	*x = QueryAllIdentityRecordVerifyRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllIdentityRecordVerifyRequestsResponse) ProtoMessage() {}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllIdentityRecordVerifyRequestsResponse.ProtoReflect.Descriptor instead.
func (*QueryAllIdentityRecordVerifyRequestsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{53}
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) GetVerifyRecords() []*IdentityRecordsVerify {
	if x != nil {
		return x.VerifyRecords
	}
	return nil
}

func (x *QueryAllIdentityRecordVerifyRequestsResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type QueryAllProposalDurations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryAllProposalDurations) Reset() {
	*x = QueryAllProposalDurations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllProposalDurations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllProposalDurations) ProtoMessage() {}

func (x *QueryAllProposalDurations) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllProposalDurations.ProtoReflect.Descriptor instead.
func (*QueryAllProposalDurations) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{54}
}

type QueryAllProposalDurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalDurations map[string]uint64 `protobuf:"bytes,1,rep,name=proposal_durations,json=proposalDurations,proto3" json:"proposal_durations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QueryAllProposalDurationsResponse) Reset() {
	*x = QueryAllProposalDurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAllProposalDurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAllProposalDurationsResponse) ProtoMessage() {}

func (x *QueryAllProposalDurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAllProposalDurationsResponse.ProtoReflect.Descriptor instead.
func (*QueryAllProposalDurationsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{55}
}

func (x *QueryAllProposalDurationsResponse) GetProposalDurations() map[string]uint64 {
	if x != nil {
		return x.ProposalDurations
	}
	return nil
}

type QueryProposalDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalType string `protobuf:"bytes,1,opt,name=proposal_type,json=proposalType,proto3" json:"proposal_type,omitempty"`
}

func (x *QueryProposalDuration) Reset() {
	*x = QueryProposalDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalDuration) ProtoMessage() {}

func (x *QueryProposalDuration) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalDuration.ProtoReflect.Descriptor instead.
func (*QueryProposalDuration) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{56}
}

func (x *QueryProposalDuration) GetProposalType() string {
	if x != nil {
		return x.ProposalType
	}
	return ""
}

type QueryProposalDurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration uint64 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *QueryProposalDurationResponse) Reset() {
	*x = QueryProposalDurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProposalDurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProposalDurationResponse) ProtoMessage() {}

func (x *QueryProposalDurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProposalDurationResponse.ProtoReflect.Descriptor instead.
func (*QueryProposalDurationResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{57}
}

func (x *QueryProposalDurationResponse) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type QueryCouncilors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // returns full when empty input
}

func (x *QueryCouncilors) Reset() {
	*x = QueryCouncilors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouncilors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouncilors) ProtoMessage() {}

func (x *QueryCouncilors) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouncilors.ProtoReflect.Descriptor instead.
func (*QueryCouncilors) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{58}
}

func (x *QueryCouncilors) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type QueryCouncilorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Councilors []*Councilor `protobuf:"bytes,1,rep,name=councilors,proto3" json:"councilors,omitempty"`
}

func (x *QueryCouncilorsResponse) Reset() {
	*x = QueryCouncilorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCouncilorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCouncilorsResponse) ProtoMessage() {}

func (x *QueryCouncilorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCouncilorsResponse.ProtoReflect.Descriptor instead.
func (*QueryCouncilorsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{59}
}

func (x *QueryCouncilorsResponse) GetCouncilors() []*Councilor {
	if x != nil {
		return x.Councilors
	}
	return nil
}

type QueryNonCouncilors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryNonCouncilors) Reset() {
	*x = QueryNonCouncilors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNonCouncilors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNonCouncilors) ProtoMessage() {}

func (x *QueryNonCouncilors) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNonCouncilors.ProtoReflect.Descriptor instead.
func (*QueryNonCouncilors) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{60}
}

type QueryNonCouncilorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonCouncilors []*NetworkActor `protobuf:"bytes,1,rep,name=non_councilors,json=nonCouncilors,proto3" json:"non_councilors,omitempty"`
}

func (x *QueryNonCouncilorsResponse) Reset() {
	*x = QueryNonCouncilorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNonCouncilorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNonCouncilorsResponse) ProtoMessage() {}

func (x *QueryNonCouncilorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNonCouncilorsResponse.ProtoReflect.Descriptor instead.
func (*QueryNonCouncilorsResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{61}
}

func (x *QueryNonCouncilorsResponse) GetNonCouncilors() []*NetworkActor {
	if x != nil {
		return x.NonCouncilors
	}
	return nil
}

type QueryAddressesByWhitelistedPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission uint32 `protobuf:"varint,1,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *QueryAddressesByWhitelistedPermission) Reset() {
	*x = QueryAddressesByWhitelistedPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddressesByWhitelistedPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddressesByWhitelistedPermission) ProtoMessage() {}

func (x *QueryAddressesByWhitelistedPermission) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddressesByWhitelistedPermission.ProtoReflect.Descriptor instead.
func (*QueryAddressesByWhitelistedPermission) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{62}
}

func (x *QueryAddressesByWhitelistedPermission) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

type QueryAddressesByWhitelistedPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *QueryAddressesByWhitelistedPermissionResponse) Reset() {
	*x = QueryAddressesByWhitelistedPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddressesByWhitelistedPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddressesByWhitelistedPermissionResponse) ProtoMessage() {}

func (x *QueryAddressesByWhitelistedPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddressesByWhitelistedPermissionResponse.ProtoReflect.Descriptor instead.
func (*QueryAddressesByWhitelistedPermissionResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{63}
}

func (x *QueryAddressesByWhitelistedPermissionResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type QueryAddressesByBlacklistedPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission uint32 `protobuf:"varint,1,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *QueryAddressesByBlacklistedPermission) Reset() {
	*x = QueryAddressesByBlacklistedPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddressesByBlacklistedPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddressesByBlacklistedPermission) ProtoMessage() {}

func (x *QueryAddressesByBlacklistedPermission) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddressesByBlacklistedPermission.ProtoReflect.Descriptor instead.
func (*QueryAddressesByBlacklistedPermission) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{64}
}

func (x *QueryAddressesByBlacklistedPermission) GetPermission() uint32 {
	if x != nil {
		return x.Permission
	}
	return 0
}

type QueryAddressesByBlacklistedPermissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *QueryAddressesByBlacklistedPermissionResponse) Reset() {
	*x = QueryAddressesByBlacklistedPermissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddressesByBlacklistedPermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddressesByBlacklistedPermissionResponse) ProtoMessage() {}

func (x *QueryAddressesByBlacklistedPermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddressesByBlacklistedPermissionResponse.ProtoReflect.Descriptor instead.
func (*QueryAddressesByBlacklistedPermissionResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{65}
}

func (x *QueryAddressesByBlacklistedPermissionResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type QueryAddressesByWhitelistedRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role uint32 `protobuf:"varint,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *QueryAddressesByWhitelistedRole) Reset() {
	*x = QueryAddressesByWhitelistedRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddressesByWhitelistedRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddressesByWhitelistedRole) ProtoMessage() {}

func (x *QueryAddressesByWhitelistedRole) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddressesByWhitelistedRole.ProtoReflect.Descriptor instead.
func (*QueryAddressesByWhitelistedRole) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{66}
}

func (x *QueryAddressesByWhitelistedRole) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type QueryAddressesByWhitelistedRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *QueryAddressesByWhitelistedRoleResponse) Reset() {
	*x = QueryAddressesByWhitelistedRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddressesByWhitelistedRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddressesByWhitelistedRoleResponse) ProtoMessage() {}

func (x *QueryAddressesByWhitelistedRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddressesByWhitelistedRoleResponse.ProtoReflect.Descriptor instead.
func (*QueryAddressesByWhitelistedRoleResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{67}
}

func (x *QueryAddressesByWhitelistedRoleResponse) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type QueryCustomPrefixesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryCustomPrefixesRequest) Reset() {
	*x = QueryCustomPrefixesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomPrefixesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomPrefixesRequest) ProtoMessage() {}

func (x *QueryCustomPrefixesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomPrefixesRequest.ProtoReflect.Descriptor instead.
func (*QueryCustomPrefixesRequest) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{68}
}

type QueryCustomPrefixesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultDenom string `protobuf:"bytes,1,opt,name=default_denom,json=defaultDenom,proto3" json:"default_denom,omitempty"`
	Bech32Prefix string `protobuf:"bytes,2,opt,name=bech32_prefix,json=bech32Prefix,proto3" json:"bech32_prefix,omitempty"`
}

func (x *QueryCustomPrefixesResponse) Reset() {
	*x = QueryCustomPrefixesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_gov_query_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCustomPrefixesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCustomPrefixesResponse) ProtoMessage() {}

func (x *QueryCustomPrefixesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_gov_query_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCustomPrefixesResponse.ProtoReflect.Descriptor instead.
func (*QueryCustomPrefixesResponse) Descriptor() ([]byte, []int) {
	return file_kira_gov_query_proto_rawDescGZIP(), []int{69}
}

func (x *QueryCustomPrefixesResponse) GetDefaultDenom() string {
	if x != nil {
		return x.DefaultDenom
	}
	return ""
}

func (x *QueryCustomPrefixesResponse) GetBech32Prefix() string {
	if x != nil {
		return x.Bech32Prefix
	}
	return ""
}

var File_kira_gov_query_proto protoreflect.FileDescriptor

var file_kira_gov_query_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x63, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6b,
	0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x6c, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x6f,
	0x6c, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x43, 0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfa, 0xde, 0x1f, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x6c,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05,
	0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x58, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x4e,
	0x0a, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88,
	0x01, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x6c, 0x6c,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x10,
	0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x22, 0x2b, 0x0a, 0x15, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x32,
	0x0a, 0x16, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x22, 0x2d, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x37, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x13, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x14,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x18, 0x41, 0x6c, 0x6c,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x39, 0x0a, 0x1b, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x35, 0x0a, 0x19,
	0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
	0x6b, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x63, 0x69, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f,
	0x72, 0x22, 0x37, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0,
	0x1f, 0x00, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x25, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x53, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x3a, 0x08, 0x88, 0xa0,
	0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x3d, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x80, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde,
	0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2d,
	0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4d, 0x0a,
	0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x24,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x43, 0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x61, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe0, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x82,
	0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde,
	0x1f, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x92, 0x02, 0x0a, 0x2b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x60, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x44, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x33, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x96, 0x02, 0x0a, 0x2c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x63, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x45, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x22, 0xfa, 0xde, 0x1f, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x34, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde,
	0x1f, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x2c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x44, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3c, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x3b, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x54, 0x0a, 0x17, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73,
	0x22, 0x14, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x25, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x2d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x47, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x2d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x22, 0x47, 0x0a, 0x27, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x42, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x65, 0x63, 0x68, 0x33, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x32, 0xa1, 0x28, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x7d, 0x12, 0x5e, 0x0a, 0x08, 0x41, 0x6c,
	0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x41, 0x6c, 0x6c,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76,
	0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0e, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x7d, 0x12, 0x5a, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x15, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x63,
	0x69, 0x6c, 0x6f, 0x72, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x6f, 0x72, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x7d, 0x12, 0x88,
	0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x69,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12,
	0x28, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x63,
	0x69, 0x6c, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x2f,
	0x7b, 0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x12, 0x1c, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12,
	0x1d, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f,
	0x76, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x2f,
	0x7b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x7d, 0x12, 0x7f, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76,
	0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x6f, 0x6f,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x6f, 0x6f, 0x72,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x76, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1e, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f,
	0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6b, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12,
	0x1e, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x96, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f,
	0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x12, 0x24, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x76, 0x6f, 0x74,
	0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x7b, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x7d, 0x12, 0x69, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f,
	0x76, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x7d, 0x0a, 0x12, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xa9, 0x01, 0x0a, 0x18, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x7d, 0x12, 0x91,
	0x01, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x1b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xe6, 0x01, 0x0a, 0x27, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x36,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x3e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b,
	0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x7b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x12, 0xe1, 0x01, 0x0a, 0x26,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0x3d, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x7d, 0x12,
	0xb9, 0x01, 0x0a, 0x1f, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x1a, 0x36, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x14,
	0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x91, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x27, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x7d, 0x12, 0x72, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f,
	0x72, 0x73, 0x12, 0x19, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x21, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x75, 0x0a, 0x0d, 0x4e, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x24, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x63,
	0x69, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76,
	0x2f, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x6f, 0x72, 0x73, 0x12,
	0xd0, 0x01, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42,
	0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f,
	0x76, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x7d, 0x12, 0xd0, 0x01, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67,
	0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x62,
	0x79, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x42, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x1a,
	0x31, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x79, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x6b, 0x69, 0x72,
	0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f,
	0x62, 0x79, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x12, 0x50,
	0x6f, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x29, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67,
	0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x6c,
	0x73, 0x2f, 0x7b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x12,
	0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50, 0x6f, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x21, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x50,
	0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x1a, 0x29, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x6c, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6b, 0x69, 0x72, 0x61,
	0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x6b, 0x61,
	0x69, 0x2f, 0x78, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_gov_query_proto_rawDescOnce sync.Once
	file_kira_gov_query_proto_rawDescData = file_kira_gov_query_proto_rawDesc
)

func file_kira_gov_query_proto_rawDescGZIP() []byte {
	file_kira_gov_query_proto_rawDescOnce.Do(func() {
		file_kira_gov_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_gov_query_proto_rawDescData)
	})
	return file_kira_gov_query_proto_rawDescData
}

var file_kira_gov_query_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_kira_gov_query_proto_goTypes = []interface{}{
	(*QueryPollsVotesByPollId)(nil),                              // 0: kira.gov.QueryPollsVotesByPollId
	(*QueryPollsVotesByPollIdResponse)(nil),                      // 1: kira.gov.QueryPollsVotesByPollIdResponse
	(*QueryPollsListByAddress)(nil),                              // 2: kira.gov.QueryPollsListByAddress
	(*QueryPollsListByAddressResponse)(nil),                      // 3: kira.gov.QueryPollsListByAddressResponse
	(*NetworkPropertiesRequest)(nil),                             // 4: kira.gov.NetworkPropertiesRequest
	(*NetworkPropertiesResponse)(nil),                            // 5: kira.gov.NetworkPropertiesResponse
	(*PermissionsByAddressRequest)(nil),                          // 6: kira.gov.PermissionsByAddressRequest
	(*PermissionsResponse)(nil),                                  // 7: kira.gov.PermissionsResponse
	(*RoleQuery)(nil),                                            // 8: kira.gov.RoleQuery
	(*AllRolesRequest)(nil),                                      // 9: kira.gov.AllRolesRequest
	(*AllRolesResponse)(nil),                                     // 10: kira.gov.AllRolesResponse
	(*RolesByAddressRequest)(nil),                                // 11: kira.gov.RolesByAddressRequest
	(*RolesByAddressResponse)(nil),                               // 12: kira.gov.RolesByAddressResponse
	(*RoleRequest)(nil),                                          // 13: kira.gov.RoleRequest
	(*RoleResponse)(nil),                                         // 14: kira.gov.RoleResponse
	(*ExecutionFeeRequest)(nil),                                  // 15: kira.gov.ExecutionFeeRequest
	(*ExecutionFeeResponse)(nil),                                 // 16: kira.gov.ExecutionFeeResponse
	(*AllExecutionFeesRequest)(nil),                              // 17: kira.gov.AllExecutionFeesRequest
	(*AllExecutionFeesResponse)(nil),                             // 18: kira.gov.AllExecutionFeesResponse
	(*PoorNetworkMessagesRequest)(nil),                           // 19: kira.gov.PoorNetworkMessagesRequest
	(*PoorNetworkMessagesResponse)(nil),                          // 20: kira.gov.PoorNetworkMessagesResponse
	(*CouncilorByAddressRequest)(nil),                            // 21: kira.gov.CouncilorByAddressRequest
	(*CouncilorByMonikerRequest)(nil),                            // 22: kira.gov.CouncilorByMonikerRequest
	(*CouncilorResponse)(nil),                                    // 23: kira.gov.CouncilorResponse
	(*QueryProposalRequest)(nil),                                 // 24: kira.gov.QueryProposalRequest
	(*QueryProposalResponse)(nil),                                // 25: kira.gov.QueryProposalResponse
	(*QueryProposalsRequest)(nil),                                // 26: kira.gov.QueryProposalsRequest
	(*QueryProposalsResponse)(nil),                               // 27: kira.gov.QueryProposalsResponse
	(*QueryWhitelistedProposalVotersRequest)(nil),                // 28: kira.gov.QueryWhitelistedProposalVotersRequest
	(*QueryWhitelistedProposalVotersResponse)(nil),               // 29: kira.gov.QueryWhitelistedProposalVotersResponse
	(*QueryProposerVotersCountRequest)(nil),                      // 30: kira.gov.QueryProposerVotersCountRequest
	(*QueryProposerVotersCountResponse)(nil),                     // 31: kira.gov.QueryProposerVotersCountResponse
	(*QueryVoteRequest)(nil),                                     // 32: kira.gov.QueryVoteRequest
	(*QueryVoteResponse)(nil),                                    // 33: kira.gov.QueryVoteResponse
	(*QueryVotesRequest)(nil),                                    // 34: kira.gov.QueryVotesRequest
	(*QueryVotesResponse)(nil),                                   // 35: kira.gov.QueryVotesResponse
	(*QueryDataReferenceKeysRequest)(nil),                        // 36: kira.gov.QueryDataReferenceKeysRequest
	(*QueryDataReferenceKeysResponse)(nil),                       // 37: kira.gov.QueryDataReferenceKeysResponse
	(*QueryDataReferenceRequest)(nil),                            // 38: kira.gov.QueryDataReferenceRequest
	(*QueryDataReferenceResponse)(nil),                           // 39: kira.gov.QueryDataReferenceResponse
	(*QueryIdentityRecordRequest)(nil),                           // 40: kira.gov.QueryIdentityRecordRequest
	(*QueryIdentityRecordResponse)(nil),                          // 41: kira.gov.QueryIdentityRecordResponse
	(*QueryIdentityRecordsByAddressRequest)(nil),                 // 42: kira.gov.QueryIdentityRecordsByAddressRequest
	(*QueryIdentityRecordsByAddressResponse)(nil),                // 43: kira.gov.QueryIdentityRecordsByAddressResponse
	(*QueryAllIdentityRecordsRequest)(nil),                       // 44: kira.gov.QueryAllIdentityRecordsRequest
	(*QueryAllIdentityRecordsResponse)(nil),                      // 45: kira.gov.QueryAllIdentityRecordsResponse
	(*QueryIdentityVerifyRecordRequest)(nil),                     // 46: kira.gov.QueryIdentityVerifyRecordRequest
	(*QueryIdentityVerifyRecordResponse)(nil),                    // 47: kira.gov.QueryIdentityVerifyRecordResponse
	(*QueryIdentityRecordVerifyRequestsByApprover)(nil),          // 48: kira.gov.QueryIdentityRecordVerifyRequestsByApprover
	(*QueryIdentityRecordVerifyRequestsByApproverResponse)(nil),  // 49: kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse
	(*QueryIdentityRecordVerifyRequestsByRequester)(nil),         // 50: kira.gov.QueryIdentityRecordVerifyRequestsByRequester
	(*QueryIdentityRecordVerifyRequestsByRequesterResponse)(nil), // 51: kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse
	(*QueryAllIdentityRecordVerifyRequests)(nil),                 // 52: kira.gov.QueryAllIdentityRecordVerifyRequests
	(*QueryAllIdentityRecordVerifyRequestsResponse)(nil),         // 53: kira.gov.QueryAllIdentityRecordVerifyRequestsResponse
	(*QueryAllProposalDurations)(nil),                            // 54: kira.gov.QueryAllProposalDurations
	(*QueryAllProposalDurationsResponse)(nil),                    // 55: kira.gov.QueryAllProposalDurationsResponse
	(*QueryProposalDuration)(nil),                                // 56: kira.gov.QueryProposalDuration
	(*QueryProposalDurationResponse)(nil),                        // 57: kira.gov.QueryProposalDurationResponse
	(*QueryCouncilors)(nil),                                      // 58: kira.gov.QueryCouncilors
	(*QueryCouncilorsResponse)(nil),                              // 59: kira.gov.QueryCouncilorsResponse
	(*QueryNonCouncilors)(nil),                                   // 60: kira.gov.QueryNonCouncilors
	(*QueryNonCouncilorsResponse)(nil),                           // 61: kira.gov.QueryNonCouncilorsResponse
	(*QueryAddressesByWhitelistedPermission)(nil),                // 62: kira.gov.QueryAddressesByWhitelistedPermission
	(*QueryAddressesByWhitelistedPermissionResponse)(nil),        // 63: kira.gov.QueryAddressesByWhitelistedPermissionResponse
	(*QueryAddressesByBlacklistedPermission)(nil),                // 64: kira.gov.QueryAddressesByBlacklistedPermission
	(*QueryAddressesByBlacklistedPermissionResponse)(nil),        // 65: kira.gov.QueryAddressesByBlacklistedPermissionResponse
	(*QueryAddressesByWhitelistedRole)(nil),                      // 66: kira.gov.QueryAddressesByWhitelistedRole
	(*QueryAddressesByWhitelistedRoleResponse)(nil),              // 67: kira.gov.QueryAddressesByWhitelistedRoleResponse
	(*QueryCustomPrefixesRequest)(nil),                           // 68: kira.gov.QueryCustomPrefixesRequest
	(*QueryCustomPrefixesResponse)(nil),                          // 69: kira.gov.QueryCustomPrefixesResponse
	nil,                                                          // 70: kira.gov.QueryAllProposalDurationsResponse.ProposalDurationsEntry
	(*PollVote)(nil),                                             // 71: kira.gov.PollVote
	(*Poll)(nil),                                                 // 72: kira.gov.Poll
	(*NetworkProperties)(nil),                                    // 73: kira.gov.NetworkProperties
	(*Permissions)(nil),                                          // 74: kira.gov.Permissions
	(*ExecutionFee)(nil),                                         // 75: kira.gov.ExecutionFee
	(*Councilor)(nil),                                            // 76: kira.gov.Councilor
	(*Proposal)(nil),                                             // 77: kira.gov.Proposal
	(*Vote)(nil),                                                 // 78: kira.gov.Vote
	(*query.PageRequest)(nil),                                    // 79: cosmos.base.query.v1beta1.PageRequest
	(*query.PageResponse)(nil),                                   // 80: cosmos.base.query.v1beta1.PageResponse
	(*NetworkActor)(nil),                                         // 81: kira.gov.NetworkActor
	(*DataRegistryEntry)(nil),                                    // 82: kira.gov.DataRegistryEntry
	(*IdentityRecord)(nil),                                       // 83: kira.gov.IdentityRecord
	(*IdentityRecordsVerify)(nil),                                // 84: kira.gov.IdentityRecordsVerify
}
var file_kira_gov_query_proto_depIdxs = []int32{
	71, // 0: kira.gov.QueryPollsVotesByPollIdResponse.votes:type_name -> kira.gov.PollVote
	72, // 1: kira.gov.QueryPollsListByAddressResponse.polls:type_name -> kira.gov.Poll
	73, // 2: kira.gov.NetworkPropertiesResponse.properties:type_name -> kira.gov.NetworkProperties
	74, // 3: kira.gov.PermissionsResponse.permissions:type_name -> kira.gov.Permissions
	74, // 4: kira.gov.RoleQuery.permissions:type_name -> kira.gov.Permissions
	8,  // 5: kira.gov.AllRolesResponse.roles:type_name -> kira.gov.RoleQuery
	8,  // 6: kira.gov.RoleResponse.role:type_name -> kira.gov.RoleQuery
	75, // 7: kira.gov.ExecutionFeeResponse.fee:type_name -> kira.gov.ExecutionFee
	75, // 8: kira.gov.AllExecutionFeesResponse.fees:type_name -> kira.gov.ExecutionFee
	76, // 9: kira.gov.CouncilorResponse.councilor:type_name -> kira.gov.Councilor
	77, // 10: kira.gov.QueryProposalResponse.proposal:type_name -> kira.gov.Proposal
	78, // 11: kira.gov.QueryProposalResponse.votes:type_name -> kira.gov.Vote
	79, // 12: kira.gov.QueryProposalsRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	77, // 13: kira.gov.QueryProposalsResponse.proposals:type_name -> kira.gov.Proposal
	80, // 14: kira.gov.QueryProposalsResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	81, // 15: kira.gov.QueryWhitelistedProposalVotersResponse.voters:type_name -> kira.gov.NetworkActor
	78, // 16: kira.gov.QueryVoteResponse.vote:type_name -> kira.gov.Vote
	78, // 17: kira.gov.QueryVotesResponse.votes:type_name -> kira.gov.Vote
	79, // 18: kira.gov.QueryDataReferenceKeysRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	80, // 19: kira.gov.QueryDataReferenceKeysResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	82, // 20: kira.gov.QueryDataReferenceResponse.data:type_name -> kira.gov.DataRegistryEntry
	83, // 21: kira.gov.QueryIdentityRecordResponse.record:type_name -> kira.gov.IdentityRecord
	83, // 22: kira.gov.QueryIdentityRecordsByAddressResponse.records:type_name -> kira.gov.IdentityRecord
	79, // 23: kira.gov.QueryAllIdentityRecordsRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	83, // 24: kira.gov.QueryAllIdentityRecordsResponse.records:type_name -> kira.gov.IdentityRecord
	80, // 25: kira.gov.QueryAllIdentityRecordsResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	84, // 26: kira.gov.QueryIdentityVerifyRecordResponse.verify_record:type_name -> kira.gov.IdentityRecordsVerify
	79, // 27: kira.gov.QueryIdentityRecordVerifyRequestsByApprover.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	84, // 28: kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse.verify_records:type_name -> kira.gov.IdentityRecordsVerify
	80, // 29: kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	79, // 30: kira.gov.QueryIdentityRecordVerifyRequestsByRequester.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	84, // 31: kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse.verify_records:type_name -> kira.gov.IdentityRecordsVerify
	80, // 32: kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	79, // 33: kira.gov.QueryAllIdentityRecordVerifyRequests.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	84, // 34: kira.gov.QueryAllIdentityRecordVerifyRequestsResponse.verify_records:type_name -> kira.gov.IdentityRecordsVerify
	80, // 35: kira.gov.QueryAllIdentityRecordVerifyRequestsResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	70, // 36: kira.gov.QueryAllProposalDurationsResponse.proposal_durations:type_name -> kira.gov.QueryAllProposalDurationsResponse.ProposalDurationsEntry
	76, // 37: kira.gov.QueryCouncilorsResponse.councilors:type_name -> kira.gov.Councilor
	81, // 38: kira.gov.QueryNonCouncilorsResponse.non_councilors:type_name -> kira.gov.NetworkActor
	6,  // 39: kira.gov.Query.PermissionsByAddress:input_type -> kira.gov.PermissionsByAddressRequest
	9,  // 40: kira.gov.Query.AllRoles:input_type -> kira.gov.AllRolesRequest
	11, // 41: kira.gov.Query.RolesByAddress:input_type -> kira.gov.RolesByAddressRequest
	13, // 42: kira.gov.Query.Role:input_type -> kira.gov.RoleRequest
	21, // 43: kira.gov.Query.CouncilorByAddress:input_type -> kira.gov.CouncilorByAddressRequest
	22, // 44: kira.gov.Query.CouncilorByMoniker:input_type -> kira.gov.CouncilorByMonikerRequest
	4,  // 45: kira.gov.Query.NetworkProperties:input_type -> kira.gov.NetworkPropertiesRequest
	15, // 46: kira.gov.Query.ExecutionFee:input_type -> kira.gov.ExecutionFeeRequest
	17, // 47: kira.gov.Query.AllExecutionFees:input_type -> kira.gov.AllExecutionFeesRequest
	19, // 48: kira.gov.Query.PoorNetworkMessages:input_type -> kira.gov.PoorNetworkMessagesRequest
	24, // 49: kira.gov.Query.Proposal:input_type -> kira.gov.QueryProposalRequest
	26, // 50: kira.gov.Query.Proposals:input_type -> kira.gov.QueryProposalsRequest
	28, // 51: kira.gov.Query.WhitelistedProposalVoters:input_type -> kira.gov.QueryWhitelistedProposalVotersRequest
	30, // 52: kira.gov.Query.ProposerVotersCount:input_type -> kira.gov.QueryProposerVotersCountRequest
	32, // 53: kira.gov.Query.Vote:input_type -> kira.gov.QueryVoteRequest
	34, // 54: kira.gov.Query.Votes:input_type -> kira.gov.QueryVotesRequest
	36, // 55: kira.gov.Query.AllDataReferenceKeys:input_type -> kira.gov.QueryDataReferenceKeysRequest
	38, // 56: kira.gov.Query.DataReferenceByKey:input_type -> kira.gov.QueryDataReferenceRequest
	40, // 57: kira.gov.Query.IdentityRecord:input_type -> kira.gov.QueryIdentityRecordRequest
	42, // 58: kira.gov.Query.IdentityRecordsByAddress:input_type -> kira.gov.QueryIdentityRecordsByAddressRequest
	44, // 59: kira.gov.Query.AllIdentityRecords:input_type -> kira.gov.QueryAllIdentityRecordsRequest
	46, // 60: kira.gov.Query.IdentityRecordVerifyRequest:input_type -> kira.gov.QueryIdentityVerifyRecordRequest
	50, // 61: kira.gov.Query.IdentityRecordVerifyRequestsByRequester:input_type -> kira.gov.QueryIdentityRecordVerifyRequestsByRequester
	48, // 62: kira.gov.Query.IdentityRecordVerifyRequestsByApprover:input_type -> kira.gov.QueryIdentityRecordVerifyRequestsByApprover
	52, // 63: kira.gov.Query.AllIdentityRecordVerifyRequests:input_type -> kira.gov.QueryAllIdentityRecordVerifyRequests
	54, // 64: kira.gov.Query.AllProposalDurations:input_type -> kira.gov.QueryAllProposalDurations
	56, // 65: kira.gov.Query.ProposalDuration:input_type -> kira.gov.QueryProposalDuration
	58, // 66: kira.gov.Query.Councilors:input_type -> kira.gov.QueryCouncilors
	60, // 67: kira.gov.Query.NonCouncilors:input_type -> kira.gov.QueryNonCouncilors
	62, // 68: kira.gov.Query.AddressesByWhitelistedPermission:input_type -> kira.gov.QueryAddressesByWhitelistedPermission
	64, // 69: kira.gov.Query.AddressesByBlacklistedPermission:input_type -> kira.gov.QueryAddressesByBlacklistedPermission
	66, // 70: kira.gov.Query.AddressesByWhitelistedRole:input_type -> kira.gov.QueryAddressesByWhitelistedRole
	2,  // 71: kira.gov.Query.PollsListByAddress:input_type -> kira.gov.QueryPollsListByAddress
	0,  // 72: kira.gov.Query.PollsVotesByPollId:input_type -> kira.gov.QueryPollsVotesByPollId
	68, // 73: kira.gov.Query.CustomPrefixes:input_type -> kira.gov.QueryCustomPrefixesRequest
	7,  // 74: kira.gov.Query.PermissionsByAddress:output_type -> kira.gov.PermissionsResponse
	10, // 75: kira.gov.Query.AllRoles:output_type -> kira.gov.AllRolesResponse
	12, // 76: kira.gov.Query.RolesByAddress:output_type -> kira.gov.RolesByAddressResponse
	14, // 77: kira.gov.Query.Role:output_type -> kira.gov.RoleResponse
	23, // 78: kira.gov.Query.CouncilorByAddress:output_type -> kira.gov.CouncilorResponse
	23, // 79: kira.gov.Query.CouncilorByMoniker:output_type -> kira.gov.CouncilorResponse
	5,  // 80: kira.gov.Query.NetworkProperties:output_type -> kira.gov.NetworkPropertiesResponse
	16, // 81: kira.gov.Query.ExecutionFee:output_type -> kira.gov.ExecutionFeeResponse
	18, // 82: kira.gov.Query.AllExecutionFees:output_type -> kira.gov.AllExecutionFeesResponse
	20, // 83: kira.gov.Query.PoorNetworkMessages:output_type -> kira.gov.PoorNetworkMessagesResponse
	25, // 84: kira.gov.Query.Proposal:output_type -> kira.gov.QueryProposalResponse
	27, // 85: kira.gov.Query.Proposals:output_type -> kira.gov.QueryProposalsResponse
	29, // 86: kira.gov.Query.WhitelistedProposalVoters:output_type -> kira.gov.QueryWhitelistedProposalVotersResponse
	31, // 87: kira.gov.Query.ProposerVotersCount:output_type -> kira.gov.QueryProposerVotersCountResponse
	33, // 88: kira.gov.Query.Vote:output_type -> kira.gov.QueryVoteResponse
	35, // 89: kira.gov.Query.Votes:output_type -> kira.gov.QueryVotesResponse
	37, // 90: kira.gov.Query.AllDataReferenceKeys:output_type -> kira.gov.QueryDataReferenceKeysResponse
	39, // 91: kira.gov.Query.DataReferenceByKey:output_type -> kira.gov.QueryDataReferenceResponse
	41, // 92: kira.gov.Query.IdentityRecord:output_type -> kira.gov.QueryIdentityRecordResponse
	43, // 93: kira.gov.Query.IdentityRecordsByAddress:output_type -> kira.gov.QueryIdentityRecordsByAddressResponse
	45, // 94: kira.gov.Query.AllIdentityRecords:output_type -> kira.gov.QueryAllIdentityRecordsResponse
	47, // 95: kira.gov.Query.IdentityRecordVerifyRequest:output_type -> kira.gov.QueryIdentityVerifyRecordResponse
	51, // 96: kira.gov.Query.IdentityRecordVerifyRequestsByRequester:output_type -> kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse
	49, // 97: kira.gov.Query.IdentityRecordVerifyRequestsByApprover:output_type -> kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse
	53, // 98: kira.gov.Query.AllIdentityRecordVerifyRequests:output_type -> kira.gov.QueryAllIdentityRecordVerifyRequestsResponse
	55, // 99: kira.gov.Query.AllProposalDurations:output_type -> kira.gov.QueryAllProposalDurationsResponse
	57, // 100: kira.gov.Query.ProposalDuration:output_type -> kira.gov.QueryProposalDurationResponse
	59, // 101: kira.gov.Query.Councilors:output_type -> kira.gov.QueryCouncilorsResponse
	61, // 102: kira.gov.Query.NonCouncilors:output_type -> kira.gov.QueryNonCouncilorsResponse
	63, // 103: kira.gov.Query.AddressesByWhitelistedPermission:output_type -> kira.gov.QueryAddressesByWhitelistedPermissionResponse
	65, // 104: kira.gov.Query.AddressesByBlacklistedPermission:output_type -> kira.gov.QueryAddressesByBlacklistedPermissionResponse
	67, // 105: kira.gov.Query.AddressesByWhitelistedRole:output_type -> kira.gov.QueryAddressesByWhitelistedRoleResponse
	3,  // 106: kira.gov.Query.PollsListByAddress:output_type -> kira.gov.QueryPollsListByAddressResponse
	1,  // 107: kira.gov.Query.PollsVotesByPollId:output_type -> kira.gov.QueryPollsVotesByPollIdResponse
	69, // 108: kira.gov.Query.CustomPrefixes:output_type -> kira.gov.QueryCustomPrefixesResponse
	74, // [74:109] is the sub-list for method output_type
	39, // [39:74] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_kira_gov_query_proto_init() }
func file_kira_gov_query_proto_init() {
	if File_kira_gov_query_proto != nil {
		return
	}
	file_kira_gov_actor_proto_init()
	file_kira_gov_councilor_proto_init()
	file_kira_gov_data_registry_proto_init()
	file_kira_gov_role_proto_init()
	file_kira_gov_execution_fee_proto_init()
	file_kira_gov_network_properties_proto_init()
	file_kira_gov_proposal_proto_init()
	file_kira_gov_poll_proto_init()
	file_kira_gov_identity_registrar_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kira_gov_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollsVotesByPollId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollsVotesByPollIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollsListByAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollsListByAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPropertiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolesByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolesByAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllExecutionFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllExecutionFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoorNetworkMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoorNetworkMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouncilorByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouncilorByMonikerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouncilorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWhitelistedProposalVotersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWhitelistedProposalVotersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposerVotersCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposerVotersCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVotesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDataReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordsByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordsByAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityVerifyRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityVerifyRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByApprover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByApproverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByRequester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryIdentityRecordVerifyRequestsByRequesterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordVerifyRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllIdentityRecordVerifyRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllProposalDurations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAllProposalDurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProposalDurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouncilors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCouncilorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNonCouncilors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNonCouncilorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddressesByWhitelistedPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddressesByWhitelistedPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddressesByBlacklistedPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddressesByBlacklistedPermissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddressesByWhitelistedRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddressesByWhitelistedRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomPrefixesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_gov_query_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCustomPrefixesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_gov_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kira_gov_query_proto_goTypes,
		DependencyIndexes: file_kira_gov_query_proto_depIdxs,
		MessageInfos:      file_kira_gov_query_proto_msgTypes,
	}.Build()
	File_kira_gov_query_proto = out.File
	file_kira_gov_query_proto_rawDesc = nil
	file_kira_gov_query_proto_goTypes = nil
	file_kira_gov_query_proto_depIdxs = nil
}
