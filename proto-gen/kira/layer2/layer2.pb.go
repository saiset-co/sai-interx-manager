// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/layer2/layer2.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DappStatus int32

const (
	DappStatus_BOOTSTRAP DappStatus = 0
	DappStatus_ACTIVE    DappStatus = 1
	DappStatus_PAUSED    DappStatus = 2
	DappStatus_HALTED    DappStatus = 3
)

// Enum value maps for DappStatus.
var (
	DappStatus_name = map[int32]string{
		0: "BOOTSTRAP",
		1: "ACTIVE",
		2: "PAUSED",
		3: "HALTED",
	}
	DappStatus_value = map[string]int32{
		"BOOTSTRAP": 0,
		"ACTIVE":    1,
		"PAUSED":    2,
		"HALTED":    3,
	}
)

func (x DappStatus) Enum() *DappStatus {
	p := new(DappStatus)
	*p = x
	return p
}

func (x DappStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DappStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_layer2_layer2_proto_enumTypes[0].Descriptor()
}

func (DappStatus) Type() protoreflect.EnumType {
	return &file_kira_layer2_layer2_proto_enumTypes[0]
}

func (x DappStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DappStatus.Descriptor instead.
func (DappStatus) EnumDescriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{0}
}

type OperatorStatus int32

const (
	OperatorStatus_OPERATOR_ACTIVE   OperatorStatus = 0
	OperatorStatus_OPERATOR_PAUSED   OperatorStatus = 1
	OperatorStatus_OPERATOR_INACTIVE OperatorStatus = 2
	OperatorStatus_OPERATOR_EXITING  OperatorStatus = 3
	OperatorStatus_OPERATOR_JAILED   OperatorStatus = 4
)

// Enum value maps for OperatorStatus.
var (
	OperatorStatus_name = map[int32]string{
		0: "OPERATOR_ACTIVE",
		1: "OPERATOR_PAUSED",
		2: "OPERATOR_INACTIVE",
		3: "OPERATOR_EXITING",
		4: "OPERATOR_JAILED",
	}
	OperatorStatus_value = map[string]int32{
		"OPERATOR_ACTIVE":   0,
		"OPERATOR_PAUSED":   1,
		"OPERATOR_INACTIVE": 2,
		"OPERATOR_EXITING":  3,
		"OPERATOR_JAILED":   4,
	}
)

func (x OperatorStatus) Enum() *OperatorStatus {
	p := new(OperatorStatus)
	*p = x
	return p
}

func (x OperatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_layer2_layer2_proto_enumTypes[1].Descriptor()
}

func (OperatorStatus) Type() protoreflect.EnumType {
	return &file_kira_layer2_layer2_proto_enumTypes[1]
}

func (x OperatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorStatus.Descriptor instead.
func (OperatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{1}
}

type SessionStatus int32

const (
	SessionStatus_SESSION_UNSCHEDULED SessionStatus = 0
	SessionStatus_SESSION_SCHEDULED   SessionStatus = 1
	SessionStatus_SESSION_ONGOING     SessionStatus = 2
	SessionStatus_SESSION_ACCEPTED    SessionStatus = 3
	SessionStatus_SESSION_DENOUNCED   SessionStatus = 4
	SessionStatus_SESSION_HALTED      SessionStatus = 5
	SessionStatus_SESSION_FAILED      SessionStatus = 6
)

// Enum value maps for SessionStatus.
var (
	SessionStatus_name = map[int32]string{
		0: "SESSION_UNSCHEDULED",
		1: "SESSION_SCHEDULED",
		2: "SESSION_ONGOING",
		3: "SESSION_ACCEPTED",
		4: "SESSION_DENOUNCED",
		5: "SESSION_HALTED",
		6: "SESSION_FAILED",
	}
	SessionStatus_value = map[string]int32{
		"SESSION_UNSCHEDULED": 0,
		"SESSION_SCHEDULED":   1,
		"SESSION_ONGOING":     2,
		"SESSION_ACCEPTED":    3,
		"SESSION_DENOUNCED":   4,
		"SESSION_HALTED":      5,
		"SESSION_FAILED":      6,
	}
)

func (x SessionStatus) Enum() *SessionStatus {
	p := new(SessionStatus)
	*p = x
	return p
}

func (x SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_layer2_layer2_proto_enumTypes[2].Descriptor()
}

func (SessionStatus) Type() protoreflect.EnumType {
	return &file_kira_layer2_layer2_proto_enumTypes[2]
}

func (x SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStatus.Descriptor instead.
func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{2}
}

type AccountRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Roles     []uint64 `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
}

func (x *AccountRange) Reset() {
	*x = AccountRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRange) ProtoMessage() {}

func (x *AccountRange) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRange.ProtoReflect.Descriptor instead.
func (*AccountRange) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{0}
}

func (x *AccountRange) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccountRange) GetRoles() []uint64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

type Controllers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelist *AccountRange `protobuf:"bytes,1,opt,name=whitelist,proto3" json:"whitelist,omitempty"`
	Blacklist *AccountRange `protobuf:"bytes,2,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
}

func (x *Controllers) Reset() {
	*x = Controllers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controllers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controllers) ProtoMessage() {}

func (x *Controllers) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controllers.ProtoReflect.Descriptor instead.
func (*Controllers) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{1}
}

func (x *Controllers) GetWhitelist() *AccountRange {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *Controllers) GetBlacklist() *AccountRange {
	if x != nil {
		return x.Blacklist
	}
	return nil
}

type BinaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`           // filename identifying source such as container, executable, config, finality gadget, etc.
	Hash      string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`           // hash of the file
	Source    string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`       // link to the source (from where the file should be fetched)
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"` // link to github repository or audit
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`           // optional file type, e.g. binary, archive, text, image, etc.
}

func (x *BinaryInfo) Reset() {
	*x = BinaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryInfo) ProtoMessage() {}

func (x *BinaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryInfo.ProtoReflect.Descriptor instead.
func (*BinaryInfo) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{2}
}

func (x *BinaryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BinaryInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BinaryInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BinaryInfo) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *BinaryInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type LpPoolConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratio   string `protobuf:"bytes,1,opt,name=ratio,proto3" json:"ratio,omitempty"`     // amount of dp_<denom> to be issued per each 1 KEX contributed
	Deposit string `protobuf:"bytes,2,opt,name=deposit,proto3" json:"deposit,omitempty"` // spending pool id/name from where lp coins can be claimed
	Drip    uint64 `protobuf:"varint,3,opt,name=drip,proto3" json:"drip,omitempty"`      // time over which tokens should be distributed (can not be modified)
}

func (x *LpPoolConfig) Reset() {
	*x = LpPoolConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpPoolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpPoolConfig) ProtoMessage() {}

func (x *LpPoolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpPoolConfig.ProtoReflect.Descriptor instead.
func (*LpPoolConfig) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{3}
}

func (x *LpPoolConfig) GetRatio() string {
	if x != nil {
		return x.Ratio
	}
	return ""
}

func (x *LpPoolConfig) GetDeposit() string {
	if x != nil {
		return x.Deposit
	}
	return ""
}

func (x *LpPoolConfig) GetDrip() uint64 {
	if x != nil {
		return x.Drip
	}
	return 0
}

type IssuanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deposit  string `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`   // spending pool id/name or kira address for extra dp deposit
	Premint  string `protobuf:"bytes,2,opt,name=premint,proto3" json:"premint,omitempty"`   // Amount of dp_<denom> to premint (can not be modified)
	Postmint string `protobuf:"bytes,3,opt,name=postmint,proto3" json:"postmint,omitempty"` // Amount of dp_<denom> to postmint (can not be modified)
	Time     uint64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`        // unix timestamp when to issue postminted dp tokens (can not be modified)
}

func (x *IssuanceConfig) Reset() {
	*x = IssuanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuanceConfig) ProtoMessage() {}

func (x *IssuanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuanceConfig.ProtoReflect.Descriptor instead.
func (*IssuanceConfig) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{4}
}

func (x *IssuanceConfig) GetDeposit() string {
	if x != nil {
		return x.Deposit
	}
	return ""
}

func (x *IssuanceConfig) GetPremint() string {
	if x != nil {
		return x.Premint
	}
	return ""
}

func (x *IssuanceConfig) GetPostmint() string {
	if x != nil {
		return x.Postmint
	}
	return ""
}

func (x *IssuanceConfig) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Dapp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                              // application name, must be globally unique and follow the same safety rules as usernames & validator moniker (can NOT be changed)
	Denom               string          `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`                                                            // native dApp token denom substring, min 3 and max 8 lowercase alphabetic characters only (a-z)
	Description         string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                // short description of the dApp, max 512 characters.
	Website             string          `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`                                                        // official website/info about dApp, max 128 characters.
	Logo                string          `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`                                                              // dapp logo url/cid
	Social              string          `protobuf:"bytes,6,opt,name=social,proto3" json:"social,omitempty"`                                                          // comma separated list of official social media urls
	Docs                string          `protobuf:"bytes,7,opt,name=docs,proto3" json:"docs,omitempty"`                                                              // url to the resources documenting dApp operation
	Controllers         *Controllers    `protobuf:"bytes,8,opt,name=controllers,proto3" json:"controllers,omitempty"`                                                // list of dApp owners, who can curate the execution record
	Bin                 []*BinaryInfo   `protobuf:"bytes,9,rep,name=bin,proto3" json:"bin,omitempty"`                                                                // array of files & their details essential for launching the dApp
	Pool                *LpPoolConfig   `protobuf:"bytes,10,opt,name=pool,proto3" json:"pool,omitempty"`                                                             // lp pool configuration (can not be modified)
	Issuance            *IssuanceConfig `protobuf:"bytes,11,opt,name=issuance,proto3" json:"issuance,omitempty"`                                                     // extra dApp (dp) token issuance configuration
	UpdateTimeMax       uint64          `protobuf:"varint,12,opt,name=update_time_max,json=updateTimeMax,proto3" json:"update_time_max,omitempty"`                   // maximum time the dApp leader has to update his session (can be no more then 86400 - 24h)
	ExecutorsMin        uint64          `protobuf:"varint,13,opt,name=executors_min,json=executorsMin,proto3" json:"executors_min,omitempty"`                        // minimum number of validators that will be executing the dApp code (default 1)
	ExecutorsMax        uint64          `protobuf:"varint,14,opt,name=executors_max,json=executorsMax,proto3" json:"executors_max,omitempty"`                        // maximum number of validators that will be executing the dApp code (default 21)
	VerifiersMin        uint64          `protobuf:"varint,15,opt,name=verifiers_min,json=verifiersMin,proto3" json:"verifiers_min,omitempty"`                        // minimum number of nodes that must approve dApp state change
	TotalBond           string          `protobuf:"bytes,16,opt,name=total_bond,json=totalBond,proto3" json:"total_bond,omitempty"`                                  // total bonds put on the dapp
	CreationTime        uint64          `protobuf:"varint,17,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`                        // dapp creation time
	Status              DappStatus      `protobuf:"varint,18,opt,name=status,proto3,enum=kira.layer2.DappStatus" json:"status,omitempty"`                            // dapp status
	VoteQuorum          string          `protobuf:"bytes,19,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`                               // percentage - default: 51%, collective-specific % of owner accounts that must vote YES or NO for any of the collective proposals to be valid
	VotePeriod          uint64          `protobuf:"varint,20,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`                              // seconds - default: 600s, period of time in seconds that any of the collective proposals must last before passing or being rejected
	VoteEnactment       uint64          `protobuf:"varint,21,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`                     // seconds - default: 300s, period of time that must pass before any of the collective proposals is enacted
	LiquidationStart    uint64          `protobuf:"varint,22,opt,name=liquidation_start,json=liquidationStart,proto3" json:"liquidation_start,omitempty"`            // liquidation start time
	PoolFee             string          `protobuf:"bytes,23,opt,name=pool_fee,json=poolFee,proto3" json:"pool_fee,omitempty"`                                        // default 1% swap, deposits, redemptions
	TeamReserve         string          `protobuf:"bytes,24,opt,name=team_reserve,json=teamReserve,proto3" json:"team_reserve,omitempty"`                            // team multisig
	PremintTime         uint64          `protobuf:"varint,25,opt,name=premint_time,json=premintTime,proto3" json:"premint_time,omitempty"`                           // timestamp for premint
	PostMintPaid        bool            `protobuf:"varint,26,opt,name=post_mint_paid,json=postMintPaid,proto3" json:"post_mint_paid,omitempty"`                      // flag to show post mint paid or not
	EnableBondVerifiers bool            `protobuf:"varint,27,opt,name=enable_bond_verifiers,json=enableBondVerifiers,proto3" json:"enable_bond_verifiers,omitempty"` // flag to enable verifiers with bonding
}

func (x *Dapp) Reset() {
	*x = Dapp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dapp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dapp) ProtoMessage() {}

func (x *Dapp) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dapp.ProtoReflect.Descriptor instead.
func (*Dapp) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{5}
}

func (x *Dapp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dapp) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Dapp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Dapp) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Dapp) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Dapp) GetSocial() string {
	if x != nil {
		return x.Social
	}
	return ""
}

func (x *Dapp) GetDocs() string {
	if x != nil {
		return x.Docs
	}
	return ""
}

func (x *Dapp) GetControllers() *Controllers {
	if x != nil {
		return x.Controllers
	}
	return nil
}

func (x *Dapp) GetBin() []*BinaryInfo {
	if x != nil {
		return x.Bin
	}
	return nil
}

func (x *Dapp) GetPool() *LpPoolConfig {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *Dapp) GetIssuance() *IssuanceConfig {
	if x != nil {
		return x.Issuance
	}
	return nil
}

func (x *Dapp) GetUpdateTimeMax() uint64 {
	if x != nil {
		return x.UpdateTimeMax
	}
	return 0
}

func (x *Dapp) GetExecutorsMin() uint64 {
	if x != nil {
		return x.ExecutorsMin
	}
	return 0
}

func (x *Dapp) GetExecutorsMax() uint64 {
	if x != nil {
		return x.ExecutorsMax
	}
	return 0
}

func (x *Dapp) GetVerifiersMin() uint64 {
	if x != nil {
		return x.VerifiersMin
	}
	return 0
}

func (x *Dapp) GetTotalBond() string {
	if x != nil {
		return x.TotalBond
	}
	return ""
}

func (x *Dapp) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *Dapp) GetStatus() DappStatus {
	if x != nil {
		return x.Status
	}
	return DappStatus_BOOTSTRAP
}

func (x *Dapp) GetVoteQuorum() string {
	if x != nil {
		return x.VoteQuorum
	}
	return ""
}

func (x *Dapp) GetVotePeriod() uint64 {
	if x != nil {
		return x.VotePeriod
	}
	return 0
}

func (x *Dapp) GetVoteEnactment() uint64 {
	if x != nil {
		return x.VoteEnactment
	}
	return 0
}

func (x *Dapp) GetLiquidationStart() uint64 {
	if x != nil {
		return x.LiquidationStart
	}
	return 0
}

func (x *Dapp) GetPoolFee() string {
	if x != nil {
		return x.PoolFee
	}
	return ""
}

func (x *Dapp) GetTeamReserve() string {
	if x != nil {
		return x.TeamReserve
	}
	return ""
}

func (x *Dapp) GetPremintTime() uint64 {
	if x != nil {
		return x.PremintTime
	}
	return 0
}

func (x *Dapp) GetPostMintPaid() bool {
	if x != nil {
		return x.PostMintPaid
	}
	return false
}

func (x *Dapp) GetEnableBondVerifiers() bool {
	if x != nil {
		return x.EnableBondVerifiers
	}
	return false
}

type UserDappBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	DappName string `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Bond     string `protobuf:"bytes,3,opt,name=bond,proto3" json:"bond,omitempty"`
}

func (x *UserDappBond) Reset() {
	*x = UserDappBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDappBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDappBond) ProtoMessage() {}

func (x *UserDappBond) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDappBond.ProtoReflect.Descriptor instead.
func (*UserDappBond) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{6}
}

func (x *UserDappBond) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserDappBond) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *UserDappBond) GetBond() string {
	if x != nil {
		return x.Bond
	}
	return ""
}

type DappOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DappName         string         `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Operator         string         `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Executor         bool           `protobuf:"varint,3,opt,name=executor,proto3" json:"executor,omitempty"` // can only be set by validators, raises proposal that controllers must approve
	Verifier         bool           `protobuf:"varint,4,opt,name=verifier,proto3" json:"verifier,omitempty"` // can be set by anyone, sending this tx does not require any approvals however requires a bond in `lp_<denom>` tokens no less than `dapp_verifier_bond`
	Interx           string         `protobuf:"bytes,5,opt,name=interx,proto3" json:"interx,omitempty"`      // must be set to a valid kira address
	Status           OperatorStatus `protobuf:"varint,6,opt,name=status,proto3,enum=kira.layer2.OperatorStatus" json:"status,omitempty"`
	Rank             int64          `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
	Streak           int64          `protobuf:"varint,8,opt,name=streak,proto3" json:"streak,omitempty"`
	Mischance        int64          `protobuf:"varint,9,opt,name=mischance,proto3" json:"mischance,omitempty"`
	VerifiedSessions int64          `protobuf:"varint,10,opt,name=verified_sessions,json=verifiedSessions,proto3" json:"verified_sessions,omitempty"`
	MissedSessions   int64          `protobuf:"varint,11,opt,name=missed_sessions,json=missedSessions,proto3" json:"missed_sessions,omitempty"`
	BondedLpAmount   string         `protobuf:"bytes,12,opt,name=bonded_lp_amount,json=bondedLpAmount,proto3" json:"bonded_lp_amount,omitempty"`
}

func (x *DappOperator) Reset() {
	*x = DappOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DappOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappOperator) ProtoMessage() {}

func (x *DappOperator) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappOperator.ProtoReflect.Descriptor instead.
func (*DappOperator) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{7}
}

func (x *DappOperator) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *DappOperator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DappOperator) GetExecutor() bool {
	if x != nil {
		return x.Executor
	}
	return false
}

func (x *DappOperator) GetVerifier() bool {
	if x != nil {
		return x.Verifier
	}
	return false
}

func (x *DappOperator) GetInterx() string {
	if x != nil {
		return x.Interx
	}
	return ""
}

func (x *DappOperator) GetStatus() OperatorStatus {
	if x != nil {
		return x.Status
	}
	return OperatorStatus_OPERATOR_ACTIVE
}

func (x *DappOperator) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *DappOperator) GetStreak() int64 {
	if x != nil {
		return x.Streak
	}
	return 0
}

func (x *DappOperator) GetMischance() int64 {
	if x != nil {
		return x.Mischance
	}
	return 0
}

func (x *DappOperator) GetVerifiedSessions() int64 {
	if x != nil {
		return x.VerifiedSessions
	}
	return 0
}

func (x *DappOperator) GetMissedSessions() int64 {
	if x != nil {
		return x.MissedSessions
	}
	return 0
}

func (x *DappOperator) GetBondedLpAmount() string {
	if x != nil {
		return x.BondedLpAmount
	}
	return ""
}

type DappLeaderDenouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DappName     string `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Leader       string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Sender       string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Denouncement string `protobuf:"bytes,4,opt,name=denouncement,proto3" json:"denouncement,omitempty"`
}

func (x *DappLeaderDenouncement) Reset() {
	*x = DappLeaderDenouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DappLeaderDenouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappLeaderDenouncement) ProtoMessage() {}

func (x *DappLeaderDenouncement) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappLeaderDenouncement.ProtoReflect.Descriptor instead.
func (*DappLeaderDenouncement) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{8}
}

func (x *DappLeaderDenouncement) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *DappLeaderDenouncement) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *DappLeaderDenouncement) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *DappLeaderDenouncement) GetDenouncement() string {
	if x != nil {
		return x.Denouncement
	}
	return ""
}

type DappSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader          string        `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	Start           uint64        `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	StatusHash      string        `protobuf:"bytes,3,opt,name=status_hash,json=statusHash,proto3" json:"status_hash,omitempty"`
	Status          SessionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=kira.layer2.SessionStatus" json:"status,omitempty"`
	Gateway         string        `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	OnchainMessages []*anypb.Any  `protobuf:"bytes,6,rep,name=onchain_messages,json=onchainMessages,proto3" json:"onchain_messages,omitempty"` // dapp mints, xam creations, xam accepts
}

func (x *DappSession) Reset() {
	*x = DappSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DappSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappSession) ProtoMessage() {}

func (x *DappSession) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappSession.ProtoReflect.Descriptor instead.
func (*DappSession) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{9}
}

func (x *DappSession) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *DappSession) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DappSession) GetStatusHash() string {
	if x != nil {
		return x.StatusHash
	}
	return ""
}

func (x *DappSession) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_UNSCHEDULED
}

func (x *DappSession) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DappSession) GetOnchainMessages() []*anypb.Any {
	if x != nil {
		return x.OnchainMessages
	}
	return nil
}

type DappSessionApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DappName   string `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Approver   string `protobuf:"bytes,2,opt,name=approver,proto3" json:"approver,omitempty"`
	IsApproved bool   `protobuf:"varint,3,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
}

func (x *DappSessionApproval) Reset() {
	*x = DappSessionApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DappSessionApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DappSessionApproval) ProtoMessage() {}

func (x *DappSessionApproval) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DappSessionApproval.ProtoReflect.Descriptor instead.
func (*DappSessionApproval) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{10}
}

func (x *DappSessionApproval) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *DappSessionApproval) GetApprover() string {
	if x != nil {
		return x.Approver
	}
	return ""
}

func (x *DappSessionApproval) GetIsApproved() bool {
	if x != nil {
		return x.IsApproved
	}
	return false
}

type ExecutionRegistrar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DappName    string       `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	PrevSession *DappSession `protobuf:"bytes,2,opt,name=prev_session,json=prevSession,proto3" json:"prev_session,omitempty"` // a session that was completed and caused changes to the blockchain
	CurrSession *DappSession `protobuf:"bytes,3,opt,name=curr_session,json=currSession,proto3" json:"curr_session,omitempty"` // a session that is currently ongoing or was just finalized but is NOT a part of the changes applied to the blockchain state
	NextSession *DappSession `protobuf:"bytes,4,opt,name=next_session,json=nextSession,proto3" json:"next_session,omitempty"` // a session that is about to begin after the current session ended
}

func (x *ExecutionRegistrar) Reset() {
	*x = ExecutionRegistrar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionRegistrar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionRegistrar) ProtoMessage() {}

func (x *ExecutionRegistrar) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionRegistrar.ProtoReflect.Descriptor instead.
func (*ExecutionRegistrar) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{11}
}

func (x *ExecutionRegistrar) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *ExecutionRegistrar) GetPrevSession() *DappSession {
	if x != nil {
		return x.PrevSession
	}
	return nil
}

func (x *ExecutionRegistrar) GetCurrSession() *DappSession {
	if x != nil {
		return x.CurrSession
	}
	return nil
}

func (x *ExecutionRegistrar) GetNextSession() *DappSession {
	if x != nil {
		return x.NextSession
	}
	return nil
}

type BridgeRegistrarHelper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextUser  uint64 `protobuf:"varint,1,opt,name=next_user,json=nextUser,proto3" json:"next_user,omitempty"`    // default 1, defines what should be the next index of the user or application account
	NextXam   uint64 `protobuf:"varint,2,opt,name=next_xam,json=nextXam,proto3" json:"next_xam,omitempty"`       // default 1, defines what should be the next cross-application transaction id - xid
	NextToken uint64 `protobuf:"varint,3,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"` // default 2, defines what should be the next token denom identifier
}

func (x *BridgeRegistrarHelper) Reset() {
	*x = BridgeRegistrarHelper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeRegistrarHelper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeRegistrarHelper) ProtoMessage() {}

func (x *BridgeRegistrarHelper) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeRegistrarHelper.ProtoReflect.Descriptor instead.
func (*BridgeRegistrarHelper) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{12}
}

func (x *BridgeRegistrarHelper) GetNextUser() uint64 {
	if x != nil {
		return x.NextUser
	}
	return 0
}

func (x *BridgeRegistrarHelper) GetNextXam() uint64 {
	if x != nil {
		return x.NextXam
	}
	return 0
}

func (x *BridgeRegistrarHelper) GetNextToken() uint64 {
	if x != nil {
		return x.NextToken
	}
	return 0
}

type BridgeRegistrar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Helper   *BridgeRegistrarHelper `protobuf:"bytes,1,opt,name=helper,proto3" json:"helper,omitempty"`     // contains next values for user, xam, token
	Accounts []*BridgeAccount       `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"` // used only on genesis export
	Tokens   []*BridgeToken         `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`     // used only on genesis export
	Xams     []*XAM                 `protobuf:"bytes,4,rep,name=xams,proto3" json:"xams,omitempty"`         // used only on genesis export
}

func (x *BridgeRegistrar) Reset() {
	*x = BridgeRegistrar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeRegistrar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeRegistrar) ProtoMessage() {}

func (x *BridgeRegistrar) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeRegistrar.ProtoReflect.Descriptor instead.
func (*BridgeRegistrar) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{13}
}

func (x *BridgeRegistrar) GetHelper() *BridgeRegistrarHelper {
	if x != nil {
		return x.Helper
	}
	return nil
}

func (x *BridgeRegistrar) GetAccounts() []*BridgeAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *BridgeRegistrar) GetTokens() []*BridgeToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *BridgeRegistrar) GetXams() []*XAM {
	if x != nil {
		return x.Xams
	}
	return nil
}

type BridgeBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeTokenIndex uint64 `protobuf:"varint,1,opt,name=bridge_token_index,json=bridgeTokenIndex,proto3" json:"bridge_token_index,omitempty"`
	Amount           string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BridgeBalance) Reset() {
	*x = BridgeBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeBalance) ProtoMessage() {}

func (x *BridgeBalance) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeBalance.ProtoReflect.Descriptor instead.
func (*BridgeBalance) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{14}
}

func (x *BridgeBalance) GetBridgeTokenIndex() uint64 {
	if x != nil {
		return x.BridgeTokenIndex
	}
	return 0
}

func (x *BridgeBalance) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type BridgeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    uint64           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address  string           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DappName string           `protobuf:"bytes,3,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"` // set to app name if app account
	Balances []*BridgeBalance `protobuf:"bytes,4,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *BridgeAccount) Reset() {
	*x = BridgeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeAccount) ProtoMessage() {}

func (x *BridgeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeAccount.ProtoReflect.Descriptor instead.
func (*BridgeAccount) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{15}
}

func (x *BridgeAccount) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BridgeAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BridgeAccount) GetDappName() string {
	if x != nil {
		return x.DappName
	}
	return ""
}

func (x *BridgeAccount) GetBalances() []*BridgeBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type BridgeToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (x *BridgeToken) Reset() {
	*x = BridgeToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeToken) ProtoMessage() {}

func (x *BridgeToken) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeToken.ProtoReflect.Descriptor instead.
func (*BridgeToken) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{16}
}

func (x *BridgeToken) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BridgeToken) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

type XAMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amounts         []*BridgeBalance `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
	SourceDapp      uint64           `protobuf:"varint,2,opt,name=source_dapp,json=sourceDapp,proto3" json:"source_dapp,omitempty"`                // source app
	SourceAccount   uint64           `protobuf:"varint,3,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`       // source beneficiary
	DestDapp        uint64           `protobuf:"varint,4,opt,name=dest_dapp,json=destDapp,proto3" json:"dest_dapp,omitempty"`                      // destination app
	DestBeneficiary uint64           `protobuf:"varint,5,opt,name=dest_beneficiary,json=destBeneficiary,proto3" json:"dest_beneficiary,omitempty"` // destination beneficiary
	Xam             string           `protobuf:"bytes,6,opt,name=xam,proto3" json:"xam,omitempty"`                                                 // string with message (optional)
}

func (x *XAMRequest) Reset() {
	*x = XAMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XAMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XAMRequest) ProtoMessage() {}

func (x *XAMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XAMRequest.ProtoReflect.Descriptor instead.
func (*XAMRequest) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{17}
}

func (x *XAMRequest) GetAmounts() []*BridgeBalance {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *XAMRequest) GetSourceDapp() uint64 {
	if x != nil {
		return x.SourceDapp
	}
	return 0
}

func (x *XAMRequest) GetSourceAccount() uint64 {
	if x != nil {
		return x.SourceAccount
	}
	return 0
}

func (x *XAMRequest) GetDestDapp() uint64 {
	if x != nil {
		return x.DestDapp
	}
	return 0
}

func (x *XAMRequest) GetDestBeneficiary() uint64 {
	if x != nil {
		return x.DestBeneficiary
	}
	return 0
}

func (x *XAMRequest) GetXam() string {
	if x != nil {
		return x.Xam
	}
	return ""
}

type XAMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xid uint64 `protobuf:"varint,1,opt,name=xid,proto3" json:"xid,omitempty"`
	Irc uint64 `protobuf:"varint,2,opt,name=irc,proto3" json:"irc,omitempty"` // Internal error or response code
	Src uint64 `protobuf:"varint,3,opt,name=src,proto3" json:"src,omitempty"` // Source application error or response code
	Drc uint64 `protobuf:"varint,4,opt,name=drc,proto3" json:"drc,omitempty"` // Destination application error or response code
	Irm uint64 `protobuf:"varint,5,opt,name=irm,proto3" json:"irm,omitempty"` // Internal response message
	Srm uint64 `protobuf:"varint,6,opt,name=srm,proto3" json:"srm,omitempty"` // Source response message
	Drm uint64 `protobuf:"varint,7,opt,name=drm,proto3" json:"drm,omitempty"` // Destination response message
}

func (x *XAMResponse) Reset() {
	*x = XAMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XAMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XAMResponse) ProtoMessage() {}

func (x *XAMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XAMResponse.ProtoReflect.Descriptor instead.
func (*XAMResponse) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{18}
}

func (x *XAMResponse) GetXid() uint64 {
	if x != nil {
		return x.Xid
	}
	return 0
}

func (x *XAMResponse) GetIrc() uint64 {
	if x != nil {
		return x.Irc
	}
	return 0
}

func (x *XAMResponse) GetSrc() uint64 {
	if x != nil {
		return x.Src
	}
	return 0
}

func (x *XAMResponse) GetDrc() uint64 {
	if x != nil {
		return x.Drc
	}
	return 0
}

func (x *XAMResponse) GetIrm() uint64 {
	if x != nil {
		return x.Irm
	}
	return 0
}

func (x *XAMResponse) GetSrm() uint64 {
	if x != nil {
		return x.Srm
	}
	return 0
}

func (x *XAMResponse) GetDrm() uint64 {
	if x != nil {
		return x.Drm
	}
	return 0
}

type XAM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqTime uint64       `protobuf:"varint,1,opt,name=req_time,json=reqTime,proto3" json:"req_time,omitempty"`
	Req     *XAMRequest  `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	Res     *XAMResponse `protobuf:"bytes,3,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *XAM) Reset() {
	*x = XAM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_layer2_layer2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XAM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XAM) ProtoMessage() {}

func (x *XAM) ProtoReflect() protoreflect.Message {
	mi := &file_kira_layer2_layer2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XAM.ProtoReflect.Descriptor instead.
func (*XAM) Descriptor() ([]byte, []int) {
	return file_kira_layer2_layer2_proto_rawDescGZIP(), []int{19}
}

func (x *XAM) GetReqTime() uint64 {
	if x != nil {
		return x.ReqTime
	}
	return 0
}

func (x *XAM) GetReq() *XAMRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *XAM) GetRes() *XAMResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

var File_kira_layer2_layer2_proto protoreflect.FileDescriptor

var file_kira_layer2_layer2_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x8b, 0x01,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a,
	0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7e, 0x0a, 0x0a, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0c,
	0x4c, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x05, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x72, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x72, 0x69, 0x70,
	0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x49, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x48, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x6d,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x6d,
	0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x09, 0x0a, 0x04, 0x44, 0x61, 0x70, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x62, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x4c, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x3d,
	0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x4d, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x6f, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x72, 0x61,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x44, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x0a, 0x76, 0x6f, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x6f, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x49, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x4d,
	0x69, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f,
	0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x70, 0x70, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x04, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x62, 0x6f,
	0x6e, 0x64, 0x22, 0xc6, 0x03, 0x0a, 0x0c, 0x44, 0x61, 0x70, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x78, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x58, 0x0a, 0x10, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x70, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x6f, 0x6e,
	0x64, 0x65, 0x64, 0x4c, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x16,
	0x44, 0x61, 0x70, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x70, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x10, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x13, 0x44, 0x61, 0x70, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x44,
	0x61, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x44, 0x61, 0x70, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x44, 0x61, 0x70, 0x70, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6e, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x58,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x32, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x78, 0x61, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x2e, 0x58, 0x41, 0x4d, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04, 0x78,
	0x61, 0x6d, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0d,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x58, 0x41, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x32, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x70, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x70, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x78, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x61, 0x6d,
	0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x58, 0x41, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x78,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x72, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x72, 0x6d, 0x22, 0x83,
	0x01, 0x0a, 0x03, 0x58, 0x41, 0x4d, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x58, 0x41, 0x4d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x72,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x2e, 0x58, 0x41,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x03, 0x72, 0x65, 0x73, 0x2a, 0x78, 0x0a, 0x0a, 0x44, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10,
	0x00, 0x1a, 0x0d, 0x8a, 0x9d, 0x20, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d,
	0x20, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x02, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0a, 0x8a, 0x9d,
	0x20, 0x06, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xe9,
	0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x1a, 0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x1a,
	0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x13, 0x8a, 0x9d, 0x20, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4a, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x1a, 0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4a, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xc2, 0x02, 0x0a, 0x0d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a,
	0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x13, 0x8a, 0x9d, 0x20, 0x0f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x55, 0x4e,
	0x43, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x05, 0x1a,
	0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6c, 0x74,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42,
	0x2e, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69,
	0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x32, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa8, 0xe2, 0x1e, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_layer2_layer2_proto_rawDescOnce sync.Once
	file_kira_layer2_layer2_proto_rawDescData = file_kira_layer2_layer2_proto_rawDesc
)

func file_kira_layer2_layer2_proto_rawDescGZIP() []byte {
	file_kira_layer2_layer2_proto_rawDescOnce.Do(func() {
		file_kira_layer2_layer2_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_layer2_layer2_proto_rawDescData)
	})
	return file_kira_layer2_layer2_proto_rawDescData
}

var file_kira_layer2_layer2_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kira_layer2_layer2_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_kira_layer2_layer2_proto_goTypes = []interface{}{
	(DappStatus)(0),                // 0: kira.layer2.DappStatus
	(OperatorStatus)(0),            // 1: kira.layer2.OperatorStatus
	(SessionStatus)(0),             // 2: kira.layer2.SessionStatus
	(*AccountRange)(nil),           // 3: kira.layer2.AccountRange
	(*Controllers)(nil),            // 4: kira.layer2.Controllers
	(*BinaryInfo)(nil),             // 5: kira.layer2.BinaryInfo
	(*LpPoolConfig)(nil),           // 6: kira.layer2.LpPoolConfig
	(*IssuanceConfig)(nil),         // 7: kira.layer2.IssuanceConfig
	(*Dapp)(nil),                   // 8: kira.layer2.Dapp
	(*UserDappBond)(nil),           // 9: kira.layer2.UserDappBond
	(*DappOperator)(nil),           // 10: kira.layer2.DappOperator
	(*DappLeaderDenouncement)(nil), // 11: kira.layer2.DappLeaderDenouncement
	(*DappSession)(nil),            // 12: kira.layer2.DappSession
	(*DappSessionApproval)(nil),    // 13: kira.layer2.DappSessionApproval
	(*ExecutionRegistrar)(nil),     // 14: kira.layer2.ExecutionRegistrar
	(*BridgeRegistrarHelper)(nil),  // 15: kira.layer2.BridgeRegistrarHelper
	(*BridgeRegistrar)(nil),        // 16: kira.layer2.BridgeRegistrar
	(*BridgeBalance)(nil),          // 17: kira.layer2.BridgeBalance
	(*BridgeAccount)(nil),          // 18: kira.layer2.BridgeAccount
	(*BridgeToken)(nil),            // 19: kira.layer2.BridgeToken
	(*XAMRequest)(nil),             // 20: kira.layer2.XAMRequest
	(*XAMResponse)(nil),            // 21: kira.layer2.XAMResponse
	(*XAM)(nil),                    // 22: kira.layer2.XAM
	(*anypb.Any)(nil),              // 23: google.protobuf.Any
}
var file_kira_layer2_layer2_proto_depIdxs = []int32{
	3,  // 0: kira.layer2.Controllers.whitelist:type_name -> kira.layer2.AccountRange
	3,  // 1: kira.layer2.Controllers.blacklist:type_name -> kira.layer2.AccountRange
	4,  // 2: kira.layer2.Dapp.controllers:type_name -> kira.layer2.Controllers
	5,  // 3: kira.layer2.Dapp.bin:type_name -> kira.layer2.BinaryInfo
	6,  // 4: kira.layer2.Dapp.pool:type_name -> kira.layer2.LpPoolConfig
	7,  // 5: kira.layer2.Dapp.issuance:type_name -> kira.layer2.IssuanceConfig
	0,  // 6: kira.layer2.Dapp.status:type_name -> kira.layer2.DappStatus
	1,  // 7: kira.layer2.DappOperator.status:type_name -> kira.layer2.OperatorStatus
	2,  // 8: kira.layer2.DappSession.status:type_name -> kira.layer2.SessionStatus
	23, // 9: kira.layer2.DappSession.onchain_messages:type_name -> google.protobuf.Any
	12, // 10: kira.layer2.ExecutionRegistrar.prev_session:type_name -> kira.layer2.DappSession
	12, // 11: kira.layer2.ExecutionRegistrar.curr_session:type_name -> kira.layer2.DappSession
	12, // 12: kira.layer2.ExecutionRegistrar.next_session:type_name -> kira.layer2.DappSession
	15, // 13: kira.layer2.BridgeRegistrar.helper:type_name -> kira.layer2.BridgeRegistrarHelper
	18, // 14: kira.layer2.BridgeRegistrar.accounts:type_name -> kira.layer2.BridgeAccount
	19, // 15: kira.layer2.BridgeRegistrar.tokens:type_name -> kira.layer2.BridgeToken
	22, // 16: kira.layer2.BridgeRegistrar.xams:type_name -> kira.layer2.XAM
	17, // 17: kira.layer2.BridgeAccount.balances:type_name -> kira.layer2.BridgeBalance
	17, // 18: kira.layer2.XAMRequest.amounts:type_name -> kira.layer2.BridgeBalance
	20, // 19: kira.layer2.XAM.req:type_name -> kira.layer2.XAMRequest
	21, // 20: kira.layer2.XAM.res:type_name -> kira.layer2.XAMResponse
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_kira_layer2_layer2_proto_init() }
func file_kira_layer2_layer2_proto_init() {
	if File_kira_layer2_layer2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kira_layer2_layer2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controllers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpPoolConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssuanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dapp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDappBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DappOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DappLeaderDenouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DappSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DappSessionApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionRegistrar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeRegistrarHelper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeRegistrar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XAMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XAMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_layer2_layer2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XAM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_layer2_layer2_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_layer2_layer2_proto_goTypes,
		DependencyIndexes: file_kira_layer2_layer2_proto_depIdxs,
		EnumInfos:         file_kira_layer2_layer2_proto_enumTypes,
		MessageInfos:      file_kira_layer2_layer2_proto_msgTypes,
	}.Build()
	File_kira_layer2_layer2_proto = out.File
	file_kira_layer2_layer2_proto_rawDesc = nil
	file_kira_layer2_layer2_proto_goTypes = nil
	file_kira_layer2_layer2_proto_depIdxs = nil
}
