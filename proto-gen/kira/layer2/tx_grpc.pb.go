// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/layer2/tx.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_CreateDappProposal_FullMethodName       = "/kira.layer2.Msg/CreateDappProposal"
	Msg_BondDappProposal_FullMethodName         = "/kira.layer2.Msg/BondDappProposal"
	Msg_ReclaimDappBondProposal_FullMethodName  = "/kira.layer2.Msg/ReclaimDappBondProposal"
	Msg_JoinDappVerifierWithBond_FullMethodName = "/kira.layer2.Msg/JoinDappVerifierWithBond"
	Msg_ExitDapp_FullMethodName                 = "/kira.layer2.Msg/ExitDapp"
	Msg_RedeemDappPoolTx_FullMethodName         = "/kira.layer2.Msg/RedeemDappPoolTx"
	Msg_SwapDappPoolTx_FullMethodName           = "/kira.layer2.Msg/SwapDappPoolTx"
	Msg_ConvertDappPoolTx_FullMethodName        = "/kira.layer2.Msg/ConvertDappPoolTx"
	Msg_PauseDappTx_FullMethodName              = "/kira.layer2.Msg/PauseDappTx"
	Msg_UnPauseDappTx_FullMethodName            = "/kira.layer2.Msg/UnPauseDappTx"
	Msg_ReactivateDappTx_FullMethodName         = "/kira.layer2.Msg/ReactivateDappTx"
	Msg_ExecuteDappTx_FullMethodName            = "/kira.layer2.Msg/ExecuteDappTx"
	Msg_DenounceLeaderTx_FullMethodName         = "/kira.layer2.Msg/DenounceLeaderTx"
	Msg_TransitionDappTx_FullMethodName         = "/kira.layer2.Msg/TransitionDappTx"
	Msg_ApproveDappTransitionTx_FullMethodName  = "/kira.layer2.Msg/ApproveDappTransitionTx"
	Msg_RejectDappTransitionTx_FullMethodName   = "/kira.layer2.Msg/RejectDappTransitionTx"
	Msg_TransferDappTx_FullMethodName           = "/kira.layer2.Msg/TransferDappTx"
	Msg_AckTransferDappTx_FullMethodName        = "/kira.layer2.Msg/AckTransferDappTx"
	Msg_MintCreateFtTx_FullMethodName           = "/kira.layer2.Msg/MintCreateFtTx"
	Msg_MintCreateNftTx_FullMethodName          = "/kira.layer2.Msg/MintCreateNftTx"
	Msg_MintIssueTx_FullMethodName              = "/kira.layer2.Msg/MintIssueTx"
	Msg_MintBurnTx_FullMethodName               = "/kira.layer2.Msg/MintBurnTx"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateDappProposal(ctx context.Context, in *MsgCreateDappProposal, opts ...grpc.CallOption) (*MsgCreateDappProposalResponse, error)
	BondDappProposal(ctx context.Context, in *MsgBondDappProposal, opts ...grpc.CallOption) (*MsgBondDappProposalResponse, error)
	ReclaimDappBondProposal(ctx context.Context, in *MsgReclaimDappBondProposal, opts ...grpc.CallOption) (*MsgReclaimDappBondProposalResponse, error)
	JoinDappVerifierWithBond(ctx context.Context, in *MsgJoinDappVerifierWithBond, opts ...grpc.CallOption) (*MsgJoinDappVerifierWithBondResponse, error)
	ExitDapp(ctx context.Context, in *MsgExitDapp, opts ...grpc.CallOption) (*MsgExitDappResponse, error)
	RedeemDappPoolTx(ctx context.Context, in *MsgRedeemDappPoolTx, opts ...grpc.CallOption) (*MsgRedeemDappPoolTxResponse, error)
	SwapDappPoolTx(ctx context.Context, in *MsgSwapDappPoolTx, opts ...grpc.CallOption) (*MsgSwapDappPoolTxResponse, error)
	ConvertDappPoolTx(ctx context.Context, in *MsgConvertDappPoolTx, opts ...grpc.CallOption) (*MsgConvertDappPoolTxResponse, error)
	PauseDappTx(ctx context.Context, in *MsgPauseDappTx, opts ...grpc.CallOption) (*MsgPauseDappTxResponse, error)
	UnPauseDappTx(ctx context.Context, in *MsgUnPauseDappTx, opts ...grpc.CallOption) (*MsgUnPauseDappTxResponse, error)
	ReactivateDappTx(ctx context.Context, in *MsgReactivateDappTx, opts ...grpc.CallOption) (*MsgReactivateDappTxResponse, error)
	ExecuteDappTx(ctx context.Context, in *MsgExecuteDappTx, opts ...grpc.CallOption) (*MsgExecuteDappTxResponse, error)
	DenounceLeaderTx(ctx context.Context, in *MsgDenounceLeaderTx, opts ...grpc.CallOption) (*MsgDenounceLeaderTxResponse, error)
	TransitionDappTx(ctx context.Context, in *MsgTransitionDappTx, opts ...grpc.CallOption) (*MsgTransitionDappTxResponse, error)
	ApproveDappTransitionTx(ctx context.Context, in *MsgApproveDappTransitionTx, opts ...grpc.CallOption) (*MsgApproveDappTransitionTxResponse, error)
	RejectDappTransitionTx(ctx context.Context, in *MsgRejectDappTransitionTx, opts ...grpc.CallOption) (*MsgRejectDappTransitionTxResponse, error)
	TransferDappTx(ctx context.Context, in *MsgTransferDappTx, opts ...grpc.CallOption) (*MsgTransferDappTxResponse, error)
	AckTransferDappTx(ctx context.Context, in *MsgAckTransferDappTx, opts ...grpc.CallOption) (*MsgAckTransferDappTxResponse, error)
	MintCreateFtTx(ctx context.Context, in *MsgMintCreateFtTx, opts ...grpc.CallOption) (*MsgMintCreateFtTxResponse, error)
	MintCreateNftTx(ctx context.Context, in *MsgMintCreateNftTx, opts ...grpc.CallOption) (*MsgMintCreateNftTxResponse, error)
	MintIssueTx(ctx context.Context, in *MsgMintIssueTx, opts ...grpc.CallOption) (*MsgMintIssueTxResponse, error)
	MintBurnTx(ctx context.Context, in *MsgMintBurnTx, opts ...grpc.CallOption) (*MsgMintBurnTxResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDappProposal(ctx context.Context, in *MsgCreateDappProposal, opts ...grpc.CallOption) (*MsgCreateDappProposalResponse, error) {
	out := new(MsgCreateDappProposalResponse)
	err := c.cc.Invoke(ctx, Msg_CreateDappProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BondDappProposal(ctx context.Context, in *MsgBondDappProposal, opts ...grpc.CallOption) (*MsgBondDappProposalResponse, error) {
	out := new(MsgBondDappProposalResponse)
	err := c.cc.Invoke(ctx, Msg_BondDappProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReclaimDappBondProposal(ctx context.Context, in *MsgReclaimDappBondProposal, opts ...grpc.CallOption) (*MsgReclaimDappBondProposalResponse, error) {
	out := new(MsgReclaimDappBondProposalResponse)
	err := c.cc.Invoke(ctx, Msg_ReclaimDappBondProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinDappVerifierWithBond(ctx context.Context, in *MsgJoinDappVerifierWithBond, opts ...grpc.CallOption) (*MsgJoinDappVerifierWithBondResponse, error) {
	out := new(MsgJoinDappVerifierWithBondResponse)
	err := c.cc.Invoke(ctx, Msg_JoinDappVerifierWithBond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExitDapp(ctx context.Context, in *MsgExitDapp, opts ...grpc.CallOption) (*MsgExitDappResponse, error) {
	out := new(MsgExitDappResponse)
	err := c.cc.Invoke(ctx, Msg_ExitDapp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemDappPoolTx(ctx context.Context, in *MsgRedeemDappPoolTx, opts ...grpc.CallOption) (*MsgRedeemDappPoolTxResponse, error) {
	out := new(MsgRedeemDappPoolTxResponse)
	err := c.cc.Invoke(ctx, Msg_RedeemDappPoolTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SwapDappPoolTx(ctx context.Context, in *MsgSwapDappPoolTx, opts ...grpc.CallOption) (*MsgSwapDappPoolTxResponse, error) {
	out := new(MsgSwapDappPoolTxResponse)
	err := c.cc.Invoke(ctx, Msg_SwapDappPoolTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertDappPoolTx(ctx context.Context, in *MsgConvertDappPoolTx, opts ...grpc.CallOption) (*MsgConvertDappPoolTxResponse, error) {
	out := new(MsgConvertDappPoolTxResponse)
	err := c.cc.Invoke(ctx, Msg_ConvertDappPoolTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseDappTx(ctx context.Context, in *MsgPauseDappTx, opts ...grpc.CallOption) (*MsgPauseDappTxResponse, error) {
	out := new(MsgPauseDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_PauseDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnPauseDappTx(ctx context.Context, in *MsgUnPauseDappTx, opts ...grpc.CallOption) (*MsgUnPauseDappTxResponse, error) {
	out := new(MsgUnPauseDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_UnPauseDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReactivateDappTx(ctx context.Context, in *MsgReactivateDappTx, opts ...grpc.CallOption) (*MsgReactivateDappTxResponse, error) {
	out := new(MsgReactivateDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_ReactivateDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteDappTx(ctx context.Context, in *MsgExecuteDappTx, opts ...grpc.CallOption) (*MsgExecuteDappTxResponse, error) {
	out := new(MsgExecuteDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_ExecuteDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DenounceLeaderTx(ctx context.Context, in *MsgDenounceLeaderTx, opts ...grpc.CallOption) (*MsgDenounceLeaderTxResponse, error) {
	out := new(MsgDenounceLeaderTxResponse)
	err := c.cc.Invoke(ctx, Msg_DenounceLeaderTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransitionDappTx(ctx context.Context, in *MsgTransitionDappTx, opts ...grpc.CallOption) (*MsgTransitionDappTxResponse, error) {
	out := new(MsgTransitionDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_TransitionDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveDappTransitionTx(ctx context.Context, in *MsgApproveDappTransitionTx, opts ...grpc.CallOption) (*MsgApproveDappTransitionTxResponse, error) {
	out := new(MsgApproveDappTransitionTxResponse)
	err := c.cc.Invoke(ctx, Msg_ApproveDappTransitionTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectDappTransitionTx(ctx context.Context, in *MsgRejectDappTransitionTx, opts ...grpc.CallOption) (*MsgRejectDappTransitionTxResponse, error) {
	out := new(MsgRejectDappTransitionTxResponse)
	err := c.cc.Invoke(ctx, Msg_RejectDappTransitionTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferDappTx(ctx context.Context, in *MsgTransferDappTx, opts ...grpc.CallOption) (*MsgTransferDappTxResponse, error) {
	out := new(MsgTransferDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_TransferDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AckTransferDappTx(ctx context.Context, in *MsgAckTransferDappTx, opts ...grpc.CallOption) (*MsgAckTransferDappTxResponse, error) {
	out := new(MsgAckTransferDappTxResponse)
	err := c.cc.Invoke(ctx, Msg_AckTransferDappTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCreateFtTx(ctx context.Context, in *MsgMintCreateFtTx, opts ...grpc.CallOption) (*MsgMintCreateFtTxResponse, error) {
	out := new(MsgMintCreateFtTxResponse)
	err := c.cc.Invoke(ctx, Msg_MintCreateFtTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCreateNftTx(ctx context.Context, in *MsgMintCreateNftTx, opts ...grpc.CallOption) (*MsgMintCreateNftTxResponse, error) {
	out := new(MsgMintCreateNftTxResponse)
	err := c.cc.Invoke(ctx, Msg_MintCreateNftTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintIssueTx(ctx context.Context, in *MsgMintIssueTx, opts ...grpc.CallOption) (*MsgMintIssueTxResponse, error) {
	out := new(MsgMintIssueTxResponse)
	err := c.cc.Invoke(ctx, Msg_MintIssueTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintBurnTx(ctx context.Context, in *MsgMintBurnTx, opts ...grpc.CallOption) (*MsgMintBurnTxResponse, error) {
	out := new(MsgMintBurnTxResponse)
	err := c.cc.Invoke(ctx, Msg_MintBurnTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateDappProposal(context.Context, *MsgCreateDappProposal) (*MsgCreateDappProposalResponse, error)
	BondDappProposal(context.Context, *MsgBondDappProposal) (*MsgBondDappProposalResponse, error)
	ReclaimDappBondProposal(context.Context, *MsgReclaimDappBondProposal) (*MsgReclaimDappBondProposalResponse, error)
	JoinDappVerifierWithBond(context.Context, *MsgJoinDappVerifierWithBond) (*MsgJoinDappVerifierWithBondResponse, error)
	ExitDapp(context.Context, *MsgExitDapp) (*MsgExitDappResponse, error)
	RedeemDappPoolTx(context.Context, *MsgRedeemDappPoolTx) (*MsgRedeemDappPoolTxResponse, error)
	SwapDappPoolTx(context.Context, *MsgSwapDappPoolTx) (*MsgSwapDappPoolTxResponse, error)
	ConvertDappPoolTx(context.Context, *MsgConvertDappPoolTx) (*MsgConvertDappPoolTxResponse, error)
	PauseDappTx(context.Context, *MsgPauseDappTx) (*MsgPauseDappTxResponse, error)
	UnPauseDappTx(context.Context, *MsgUnPauseDappTx) (*MsgUnPauseDappTxResponse, error)
	ReactivateDappTx(context.Context, *MsgReactivateDappTx) (*MsgReactivateDappTxResponse, error)
	ExecuteDappTx(context.Context, *MsgExecuteDappTx) (*MsgExecuteDappTxResponse, error)
	DenounceLeaderTx(context.Context, *MsgDenounceLeaderTx) (*MsgDenounceLeaderTxResponse, error)
	TransitionDappTx(context.Context, *MsgTransitionDappTx) (*MsgTransitionDappTxResponse, error)
	ApproveDappTransitionTx(context.Context, *MsgApproveDappTransitionTx) (*MsgApproveDappTransitionTxResponse, error)
	RejectDappTransitionTx(context.Context, *MsgRejectDappTransitionTx) (*MsgRejectDappTransitionTxResponse, error)
	TransferDappTx(context.Context, *MsgTransferDappTx) (*MsgTransferDappTxResponse, error)
	AckTransferDappTx(context.Context, *MsgAckTransferDappTx) (*MsgAckTransferDappTxResponse, error)
	MintCreateFtTx(context.Context, *MsgMintCreateFtTx) (*MsgMintCreateFtTxResponse, error)
	MintCreateNftTx(context.Context, *MsgMintCreateNftTx) (*MsgMintCreateNftTxResponse, error)
	MintIssueTx(context.Context, *MsgMintIssueTx) (*MsgMintIssueTxResponse, error)
	MintBurnTx(context.Context, *MsgMintBurnTx) (*MsgMintBurnTxResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateDappProposal(context.Context, *MsgCreateDappProposal) (*MsgCreateDappProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDappProposal not implemented")
}
func (UnimplementedMsgServer) BondDappProposal(context.Context, *MsgBondDappProposal) (*MsgBondDappProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondDappProposal not implemented")
}
func (UnimplementedMsgServer) ReclaimDappBondProposal(context.Context, *MsgReclaimDappBondProposal) (*MsgReclaimDappBondProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReclaimDappBondProposal not implemented")
}
func (UnimplementedMsgServer) JoinDappVerifierWithBond(context.Context, *MsgJoinDappVerifierWithBond) (*MsgJoinDappVerifierWithBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDappVerifierWithBond not implemented")
}
func (UnimplementedMsgServer) ExitDapp(context.Context, *MsgExitDapp) (*MsgExitDappResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitDapp not implemented")
}
func (UnimplementedMsgServer) RedeemDappPoolTx(context.Context, *MsgRedeemDappPoolTx) (*MsgRedeemDappPoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemDappPoolTx not implemented")
}
func (UnimplementedMsgServer) SwapDappPoolTx(context.Context, *MsgSwapDappPoolTx) (*MsgSwapDappPoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapDappPoolTx not implemented")
}
func (UnimplementedMsgServer) ConvertDappPoolTx(context.Context, *MsgConvertDappPoolTx) (*MsgConvertDappPoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertDappPoolTx not implemented")
}
func (UnimplementedMsgServer) PauseDappTx(context.Context, *MsgPauseDappTx) (*MsgPauseDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseDappTx not implemented")
}
func (UnimplementedMsgServer) UnPauseDappTx(context.Context, *MsgUnPauseDappTx) (*MsgUnPauseDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPauseDappTx not implemented")
}
func (UnimplementedMsgServer) ReactivateDappTx(context.Context, *MsgReactivateDappTx) (*MsgReactivateDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateDappTx not implemented")
}
func (UnimplementedMsgServer) ExecuteDappTx(context.Context, *MsgExecuteDappTx) (*MsgExecuteDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDappTx not implemented")
}
func (UnimplementedMsgServer) DenounceLeaderTx(context.Context, *MsgDenounceLeaderTx) (*MsgDenounceLeaderTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenounceLeaderTx not implemented")
}
func (UnimplementedMsgServer) TransitionDappTx(context.Context, *MsgTransitionDappTx) (*MsgTransitionDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitionDappTx not implemented")
}
func (UnimplementedMsgServer) ApproveDappTransitionTx(context.Context, *MsgApproveDappTransitionTx) (*MsgApproveDappTransitionTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDappTransitionTx not implemented")
}
func (UnimplementedMsgServer) RejectDappTransitionTx(context.Context, *MsgRejectDappTransitionTx) (*MsgRejectDappTransitionTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectDappTransitionTx not implemented")
}
func (UnimplementedMsgServer) TransferDappTx(context.Context, *MsgTransferDappTx) (*MsgTransferDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferDappTx not implemented")
}
func (UnimplementedMsgServer) AckTransferDappTx(context.Context, *MsgAckTransferDappTx) (*MsgAckTransferDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckTransferDappTx not implemented")
}
func (UnimplementedMsgServer) MintCreateFtTx(context.Context, *MsgMintCreateFtTx) (*MsgMintCreateFtTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCreateFtTx not implemented")
}
func (UnimplementedMsgServer) MintCreateNftTx(context.Context, *MsgMintCreateNftTx) (*MsgMintCreateNftTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCreateNftTx not implemented")
}
func (UnimplementedMsgServer) MintIssueTx(context.Context, *MsgMintIssueTx) (*MsgMintIssueTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintIssueTx not implemented")
}
func (UnimplementedMsgServer) MintBurnTx(context.Context, *MsgMintBurnTx) (*MsgMintBurnTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintBurnTx not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateDappProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDappProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDappProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateDappProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDappProposal(ctx, req.(*MsgCreateDappProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BondDappProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBondDappProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BondDappProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BondDappProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BondDappProposal(ctx, req.(*MsgBondDappProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReclaimDappBondProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReclaimDappBondProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReclaimDappBondProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReclaimDappBondProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReclaimDappBondProposal(ctx, req.(*MsgReclaimDappBondProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinDappVerifierWithBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinDappVerifierWithBond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinDappVerifierWithBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_JoinDappVerifierWithBond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinDappVerifierWithBond(ctx, req.(*MsgJoinDappVerifierWithBond))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExitDapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExitDapp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExitDapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ExitDapp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExitDapp(ctx, req.(*MsgExitDapp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemDappPoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemDappPoolTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemDappPoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RedeemDappPoolTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemDappPoolTx(ctx, req.(*MsgRedeemDappPoolTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SwapDappPoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapDappPoolTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SwapDappPoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SwapDappPoolTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SwapDappPoolTx(ctx, req.(*MsgSwapDappPoolTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertDappPoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertDappPoolTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertDappPoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ConvertDappPoolTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertDappPoolTx(ctx, req.(*MsgConvertDappPoolTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PauseDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseDappTx(ctx, req.(*MsgPauseDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnPauseDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnPauseDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnPauseDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnPauseDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnPauseDappTx(ctx, req.(*MsgUnPauseDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReactivateDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReactivateDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReactivateDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReactivateDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReactivateDappTx(ctx, req.(*MsgReactivateDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ExecuteDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteDappTx(ctx, req.(*MsgExecuteDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DenounceLeaderTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDenounceLeaderTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DenounceLeaderTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DenounceLeaderTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DenounceLeaderTx(ctx, req.(*MsgDenounceLeaderTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransitionDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransitionDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransitionDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransitionDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransitionDappTx(ctx, req.(*MsgTransitionDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveDappTransitionTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveDappTransitionTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveDappTransitionTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ApproveDappTransitionTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveDappTransitionTx(ctx, req.(*MsgApproveDappTransitionTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectDappTransitionTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRejectDappTransitionTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectDappTransitionTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RejectDappTransitionTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectDappTransitionTx(ctx, req.(*MsgRejectDappTransitionTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferDappTx(ctx, req.(*MsgTransferDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AckTransferDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAckTransferDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AckTransferDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AckTransferDappTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AckTransferDappTx(ctx, req.(*MsgAckTransferDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCreateFtTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCreateFtTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCreateFtTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintCreateFtTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCreateFtTx(ctx, req.(*MsgMintCreateFtTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCreateNftTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCreateNftTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCreateNftTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintCreateNftTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCreateNftTx(ctx, req.(*MsgMintCreateNftTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintIssueTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintIssueTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintIssueTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintIssueTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintIssueTx(ctx, req.(*MsgMintIssueTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintBurnTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintBurnTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintBurnTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintBurnTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintBurnTx(ctx, req.(*MsgMintBurnTx))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.layer2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDappProposal",
			Handler:    _Msg_CreateDappProposal_Handler,
		},
		{
			MethodName: "BondDappProposal",
			Handler:    _Msg_BondDappProposal_Handler,
		},
		{
			MethodName: "ReclaimDappBondProposal",
			Handler:    _Msg_ReclaimDappBondProposal_Handler,
		},
		{
			MethodName: "JoinDappVerifierWithBond",
			Handler:    _Msg_JoinDappVerifierWithBond_Handler,
		},
		{
			MethodName: "ExitDapp",
			Handler:    _Msg_ExitDapp_Handler,
		},
		{
			MethodName: "RedeemDappPoolTx",
			Handler:    _Msg_RedeemDappPoolTx_Handler,
		},
		{
			MethodName: "SwapDappPoolTx",
			Handler:    _Msg_SwapDappPoolTx_Handler,
		},
		{
			MethodName: "ConvertDappPoolTx",
			Handler:    _Msg_ConvertDappPoolTx_Handler,
		},
		{
			MethodName: "PauseDappTx",
			Handler:    _Msg_PauseDappTx_Handler,
		},
		{
			MethodName: "UnPauseDappTx",
			Handler:    _Msg_UnPauseDappTx_Handler,
		},
		{
			MethodName: "ReactivateDappTx",
			Handler:    _Msg_ReactivateDappTx_Handler,
		},
		{
			MethodName: "ExecuteDappTx",
			Handler:    _Msg_ExecuteDappTx_Handler,
		},
		{
			MethodName: "DenounceLeaderTx",
			Handler:    _Msg_DenounceLeaderTx_Handler,
		},
		{
			MethodName: "TransitionDappTx",
			Handler:    _Msg_TransitionDappTx_Handler,
		},
		{
			MethodName: "ApproveDappTransitionTx",
			Handler:    _Msg_ApproveDappTransitionTx_Handler,
		},
		{
			MethodName: "RejectDappTransitionTx",
			Handler:    _Msg_RejectDappTransitionTx_Handler,
		},
		{
			MethodName: "TransferDappTx",
			Handler:    _Msg_TransferDappTx_Handler,
		},
		{
			MethodName: "AckTransferDappTx",
			Handler:    _Msg_AckTransferDappTx_Handler,
		},
		{
			MethodName: "MintCreateFtTx",
			Handler:    _Msg_MintCreateFtTx_Handler,
		},
		{
			MethodName: "MintCreateNftTx",
			Handler:    _Msg_MintCreateNftTx_Handler,
		},
		{
			MethodName: "MintIssueTx",
			Handler:    _Msg_MintIssueTx_Handler,
		},
		{
			MethodName: "MintBurnTx",
			Handler:    _Msg_MintBurnTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/layer2/tx.proto",
}
