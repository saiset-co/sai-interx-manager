// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/custody/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_CustodyByAddress_FullMethodName             = "/kira.custody.Query/CustodyByAddress"
	Query_CustodyPoolByAddress_FullMethodName         = "/kira.custody.Query/CustodyPoolByAddress"
	Query_CustodyCustodiansByAddress_FullMethodName   = "/kira.custody.Query/CustodyCustodiansByAddress"
	Query_CustodyWhiteListByAddress_FullMethodName    = "/kira.custody.Query/CustodyWhiteListByAddress"
	Query_CustodyLimitsByAddress_FullMethodName       = "/kira.custody.Query/CustodyLimitsByAddress"
	Query_CustodyLimitsStatusByAddress_FullMethodName = "/kira.custody.Query/CustodyLimitsStatusByAddress"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	CustodyByAddress(ctx context.Context, in *CustodyByAddressRequest, opts ...grpc.CallOption) (*CustodyByAddressResponse, error)
	CustodyPoolByAddress(ctx context.Context, in *CustodyPoolByAddressRequest, opts ...grpc.CallOption) (*CustodyPoolByAddressResponse, error)
	CustodyCustodiansByAddress(ctx context.Context, in *CustodyCustodiansByAddressRequest, opts ...grpc.CallOption) (*CustodyCustodiansByAddressResponse, error)
	CustodyWhiteListByAddress(ctx context.Context, in *CustodyWhiteListByAddressRequest, opts ...grpc.CallOption) (*CustodyWhiteListByAddressResponse, error)
	CustodyLimitsByAddress(ctx context.Context, in *CustodyLimitsByAddressRequest, opts ...grpc.CallOption) (*CustodyLimitsByAddressResponse, error)
	CustodyLimitsStatusByAddress(ctx context.Context, in *CustodyLimitsStatusByAddressRequest, opts ...grpc.CallOption) (*CustodyLimitsStatusByAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CustodyByAddress(ctx context.Context, in *CustodyByAddressRequest, opts ...grpc.CallOption) (*CustodyByAddressResponse, error) {
	out := new(CustodyByAddressResponse)
	err := c.cc.Invoke(ctx, Query_CustodyByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustodyPoolByAddress(ctx context.Context, in *CustodyPoolByAddressRequest, opts ...grpc.CallOption) (*CustodyPoolByAddressResponse, error) {
	out := new(CustodyPoolByAddressResponse)
	err := c.cc.Invoke(ctx, Query_CustodyPoolByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustodyCustodiansByAddress(ctx context.Context, in *CustodyCustodiansByAddressRequest, opts ...grpc.CallOption) (*CustodyCustodiansByAddressResponse, error) {
	out := new(CustodyCustodiansByAddressResponse)
	err := c.cc.Invoke(ctx, Query_CustodyCustodiansByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustodyWhiteListByAddress(ctx context.Context, in *CustodyWhiteListByAddressRequest, opts ...grpc.CallOption) (*CustodyWhiteListByAddressResponse, error) {
	out := new(CustodyWhiteListByAddressResponse)
	err := c.cc.Invoke(ctx, Query_CustodyWhiteListByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustodyLimitsByAddress(ctx context.Context, in *CustodyLimitsByAddressRequest, opts ...grpc.CallOption) (*CustodyLimitsByAddressResponse, error) {
	out := new(CustodyLimitsByAddressResponse)
	err := c.cc.Invoke(ctx, Query_CustodyLimitsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CustodyLimitsStatusByAddress(ctx context.Context, in *CustodyLimitsStatusByAddressRequest, opts ...grpc.CallOption) (*CustodyLimitsStatusByAddressResponse, error) {
	out := new(CustodyLimitsStatusByAddressResponse)
	err := c.cc.Invoke(ctx, Query_CustodyLimitsStatusByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	CustodyByAddress(context.Context, *CustodyByAddressRequest) (*CustodyByAddressResponse, error)
	CustodyPoolByAddress(context.Context, *CustodyPoolByAddressRequest) (*CustodyPoolByAddressResponse, error)
	CustodyCustodiansByAddress(context.Context, *CustodyCustodiansByAddressRequest) (*CustodyCustodiansByAddressResponse, error)
	CustodyWhiteListByAddress(context.Context, *CustodyWhiteListByAddressRequest) (*CustodyWhiteListByAddressResponse, error)
	CustodyLimitsByAddress(context.Context, *CustodyLimitsByAddressRequest) (*CustodyLimitsByAddressResponse, error)
	CustodyLimitsStatusByAddress(context.Context, *CustodyLimitsStatusByAddressRequest) (*CustodyLimitsStatusByAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) CustodyByAddress(context.Context, *CustodyByAddressRequest) (*CustodyByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodyByAddress not implemented")
}
func (UnimplementedQueryServer) CustodyPoolByAddress(context.Context, *CustodyPoolByAddressRequest) (*CustodyPoolByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodyPoolByAddress not implemented")
}
func (UnimplementedQueryServer) CustodyCustodiansByAddress(context.Context, *CustodyCustodiansByAddressRequest) (*CustodyCustodiansByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodyCustodiansByAddress not implemented")
}
func (UnimplementedQueryServer) CustodyWhiteListByAddress(context.Context, *CustodyWhiteListByAddressRequest) (*CustodyWhiteListByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodyWhiteListByAddress not implemented")
}
func (UnimplementedQueryServer) CustodyLimitsByAddress(context.Context, *CustodyLimitsByAddressRequest) (*CustodyLimitsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodyLimitsByAddress not implemented")
}
func (UnimplementedQueryServer) CustodyLimitsStatusByAddress(context.Context, *CustodyLimitsStatusByAddressRequest) (*CustodyLimitsStatusByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustodyLimitsStatusByAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_CustodyByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustodyByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustodyByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustodyByAddress(ctx, req.(*CustodyByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustodyPoolByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyPoolByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustodyPoolByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustodyPoolByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustodyPoolByAddress(ctx, req.(*CustodyPoolByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustodyCustodiansByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyCustodiansByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustodyCustodiansByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustodyCustodiansByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustodyCustodiansByAddress(ctx, req.(*CustodyCustodiansByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustodyWhiteListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyWhiteListByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustodyWhiteListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustodyWhiteListByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustodyWhiteListByAddress(ctx, req.(*CustodyWhiteListByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustodyLimitsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyLimitsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustodyLimitsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustodyLimitsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustodyLimitsByAddress(ctx, req.(*CustodyLimitsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CustodyLimitsStatusByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyLimitsStatusByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CustodyLimitsStatusByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CustodyLimitsStatusByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CustodyLimitsStatusByAddress(ctx, req.(*CustodyLimitsStatusByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.custody.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustodyByAddress",
			Handler:    _Query_CustodyByAddress_Handler,
		},
		{
			MethodName: "CustodyPoolByAddress",
			Handler:    _Query_CustodyPoolByAddress_Handler,
		},
		{
			MethodName: "CustodyCustodiansByAddress",
			Handler:    _Query_CustodyCustodiansByAddress_Handler,
		},
		{
			MethodName: "CustodyWhiteListByAddress",
			Handler:    _Query_CustodyWhiteListByAddress_Handler,
		},
		{
			MethodName: "CustodyLimitsByAddress",
			Handler:    _Query_CustodyLimitsByAddress_Handler,
		},
		{
			MethodName: "CustodyLimitsStatusByAddress",
			Handler:    _Query_CustodyLimitsStatusByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/custody/query.proto",
}
