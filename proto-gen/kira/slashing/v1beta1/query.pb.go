// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: kira/slashing/v1beta1/query.proto

package types

import (
	types1 "github.com/KiraCore/sekai/x/gov/types"
	types2 "github.com/KiraCore/sekai/x/multistaking/types"
	types "github.com/KiraCore/sekai/x/staking/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryParamsRequest) Reset() {
	*x = QueryParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsRequest) ProtoMessage() {}

func (x *QueryParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamsRequest.ProtoReflect.Descriptor instead.
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{0}
}

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryParamsResponse) Reset() {
	*x = QueryParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsResponse) ProtoMessage() {}

func (x *QueryParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamsResponse.ProtoReflect.Descriptor instead.
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryParamsResponse) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

type IdentityRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Infos     map[string]string      `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Date      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	Verifiers []string               `protobuf:"bytes,5,rep,name=verifiers,proto3" json:"verifiers,omitempty"`
}

func (x *IdentityRecord) Reset() {
	*x = IdentityRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityRecord) ProtoMessage() {}

func (x *IdentityRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityRecord.ProtoReflect.Descriptor instead.
func (*IdentityRecord) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{2}
}

func (x *IdentityRecord) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdentityRecord) GetInfos() map[string]string {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *IdentityRecord) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *IdentityRecord) GetVerifiers() []string {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

// QuerySigningInfoRequest is the request type for the Query/SigningInfo RPC
// method
type QuerySigningInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cons_address is the address to query signing info of
	ConsAddress string `protobuf:"bytes,1,opt,name=cons_address,json=consAddress,proto3" json:"cons_address,omitempty"`
	// include_validators is the flag to include validators info while querying signing info
	IncludeValidator bool `protobuf:"varint,2,opt,name=include_validator,json=includeValidator,proto3" json:"include_validator,omitempty"`
}

func (x *QuerySigningInfoRequest) Reset() {
	*x = QuerySigningInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySigningInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySigningInfoRequest) ProtoMessage() {}

func (x *QuerySigningInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySigningInfoRequest.ProtoReflect.Descriptor instead.
func (*QuerySigningInfoRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QuerySigningInfoRequest) GetConsAddress() string {
	if x != nil {
		return x.ConsAddress
	}
	return ""
}

func (x *QuerySigningInfoRequest) GetIncludeValidator() bool {
	if x != nil {
		return x.IncludeValidator
	}
	return false
}

// QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
// method
type QuerySigningInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// val_signing_info is the signing info of requested val cons address
	ValSigningInfo *ValidatorSigningInfo `protobuf:"bytes,1,opt,name=val_signing_info,json=valSigningInfo,proto3" json:"val_signing_info,omitempty"`
	// validator is the main info saved on native validator object
	Validator *types.QueryValidator `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *QuerySigningInfoResponse) Reset() {
	*x = QuerySigningInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySigningInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySigningInfoResponse) ProtoMessage() {}

func (x *QuerySigningInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySigningInfoResponse.ProtoReflect.Descriptor instead.
func (*QuerySigningInfoResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QuerySigningInfoResponse) GetValSigningInfo() *ValidatorSigningInfo {
	if x != nil {
		return x.ValSigningInfo
	}
	return nil
}

func (x *QuerySigningInfoResponse) GetValidator() *types.QueryValidator {
	if x != nil {
		return x.Validator
	}
	return nil
}

// QuerySigningInfosRequest is the request type for the Query/SigningInfos RPC
// method
type QuerySigningInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// include_validators is the flag to include validators info while querying signing info
	IncludeValidator bool `protobuf:"varint,2,opt,name=include_validator,json=includeValidator,proto3" json:"include_validator,omitempty"`
}

func (x *QuerySigningInfosRequest) Reset() {
	*x = QuerySigningInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySigningInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySigningInfosRequest) ProtoMessage() {}

func (x *QuerySigningInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySigningInfosRequest.ProtoReflect.Descriptor instead.
func (*QuerySigningInfosRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QuerySigningInfosRequest) GetPagination() *query.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QuerySigningInfosRequest) GetIncludeValidator() bool {
	if x != nil {
		return x.IncludeValidator
	}
	return false
}

// QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
// method
type QuerySigningInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// info is the signing info of all validators
	Info []*ValidatorSigningInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	// validator is the main info saved on native validator object
	Validators []*types.QueryValidator `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	Pagination *query.PageResponse     `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QuerySigningInfosResponse) Reset() {
	*x = QuerySigningInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySigningInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySigningInfosResponse) ProtoMessage() {}

func (x *QuerySigningInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySigningInfosResponse.ProtoReflect.Descriptor instead.
func (*QuerySigningInfosResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{6}
}

func (x *QuerySigningInfosResponse) GetInfo() []*ValidatorSigningInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *QuerySigningInfosResponse) GetValidators() []*types.QueryValidator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *QuerySigningInfosResponse) GetPagination() *query.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// list all active slashing proposals
type QuerySlashProposalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuerySlashProposalsRequest) Reset() {
	*x = QuerySlashProposalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySlashProposalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySlashProposalsRequest) ProtoMessage() {}

func (x *QuerySlashProposalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySlashProposalsRequest.ProtoReflect.Descriptor instead.
func (*QuerySlashProposalsRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{7}
}

type QuerySlashProposalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*types1.Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *QuerySlashProposalsResponse) Reset() {
	*x = QuerySlashProposalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySlashProposalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySlashProposalsResponse) ProtoMessage() {}

func (x *QuerySlashProposalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySlashProposalsResponse.ProtoReflect.Descriptor instead.
func (*QuerySlashProposalsResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{8}
}

func (x *QuerySlashProposalsResponse) GetProposals() []*types1.Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

// list all staking pools that were slashed
type QuerySlashedStakingPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuerySlashedStakingPoolsRequest) Reset() {
	*x = QuerySlashedStakingPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySlashedStakingPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySlashedStakingPoolsRequest) ProtoMessage() {}

func (x *QuerySlashedStakingPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySlashedStakingPoolsRequest.ProtoReflect.Descriptor instead.
func (*QuerySlashedStakingPoolsRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{9}
}

type QuerySlashedStakingPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*types2.StakingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *QuerySlashedStakingPoolsResponse) Reset() {
	*x = QuerySlashedStakingPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySlashedStakingPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySlashedStakingPoolsResponse) ProtoMessage() {}

func (x *QuerySlashedStakingPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySlashedStakingPoolsResponse.ProtoReflect.Descriptor instead.
func (*QuerySlashedStakingPoolsResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{10}
}

func (x *QuerySlashedStakingPoolsResponse) GetPools() []*types2.StakingPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

// list all staking pools to which tokens can be delegated
type QueryActiveStakingPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryActiveStakingPoolsRequest) Reset() {
	*x = QueryActiveStakingPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryActiveStakingPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryActiveStakingPoolsRequest) ProtoMessage() {}

func (x *QueryActiveStakingPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryActiveStakingPoolsRequest.ProtoReflect.Descriptor instead.
func (*QueryActiveStakingPoolsRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{11}
}

type QueryActiveStakingPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*types2.StakingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *QueryActiveStakingPoolsResponse) Reset() {
	*x = QueryActiveStakingPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryActiveStakingPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryActiveStakingPoolsResponse) ProtoMessage() {}

func (x *QueryActiveStakingPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryActiveStakingPoolsResponse.ProtoReflect.Descriptor instead.
func (*QueryActiveStakingPoolsResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{12}
}

func (x *QueryActiveStakingPoolsResponse) GetPools() []*types2.StakingPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

// list all staking pools to which tokens can NOT be delegated because validator
// is not active
type QueryInactiveStakingPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryInactiveStakingPoolsRequest) Reset() {
	*x = QueryInactiveStakingPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInactiveStakingPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInactiveStakingPoolsRequest) ProtoMessage() {}

func (x *QueryInactiveStakingPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInactiveStakingPoolsRequest.ProtoReflect.Descriptor instead.
func (*QueryInactiveStakingPoolsRequest) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{13}
}

type QueryInactiveStakingPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*types2.StakingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *QueryInactiveStakingPoolsResponse) Reset() {
	*x = QueryInactiveStakingPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInactiveStakingPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInactiveStakingPoolsResponse) ProtoMessage() {}

func (x *QueryInactiveStakingPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_slashing_v1beta1_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInactiveStakingPoolsResponse.ProtoReflect.Descriptor instead.
func (*QueryInactiveStakingPoolsResponse) Descriptor() ([]byte, []int) {
	return file_kira_slashing_v1beta1_query_proto_rawDescGZIP(), []int{14}
}

func (x *QueryInactiveStakingPoolsResponse) GetPools() []*types2.StakingPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

var File_kira_slashing_v1beta1_query_proto protoreflect.FileDescriptor

var file_kira_slashing_v1beta1_query_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6b, 0x69, 0x72, 0x61, 0x2f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x69,
	0x72, 0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x17, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x0b, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x64, 0x61, 0x74, 0x65, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x38,
	0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x69,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xca, 0x01,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x38, 0xfa, 0xde, 0x1f, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xa3, 0x02, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0xfa, 0xde, 0x1f, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x1c, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55,
	0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1f, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x69, 0x72, 0x61, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a,
	0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f,
	0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x32, 0xc6,
	0x07, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x12, 0x33, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x27, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x12, 0x24, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x53, 0x6c, 0x61,
	0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x6b, 0x69,
	0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x6b, 0x69, 0x72,
	0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x2d, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0xa8, 0x01, 0x0a,
	0x14, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2f, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73,
	0x65, 0x6b, 0x61, 0x69, 0x2f, 0x78, 0x2f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_slashing_v1beta1_query_proto_rawDescOnce sync.Once
	file_kira_slashing_v1beta1_query_proto_rawDescData = file_kira_slashing_v1beta1_query_proto_rawDesc
)

func file_kira_slashing_v1beta1_query_proto_rawDescGZIP() []byte {
	file_kira_slashing_v1beta1_query_proto_rawDescOnce.Do(func() {
		file_kira_slashing_v1beta1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_slashing_v1beta1_query_proto_rawDescData)
	})
	return file_kira_slashing_v1beta1_query_proto_rawDescData
}

var file_kira_slashing_v1beta1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_kira_slashing_v1beta1_query_proto_goTypes = []interface{}{
	(*QueryParamsRequest)(nil),                // 0: kira.slashing.QueryParamsRequest
	(*QueryParamsResponse)(nil),               // 1: kira.slashing.QueryParamsResponse
	(*IdentityRecord)(nil),                    // 2: kira.slashing.IdentityRecord
	(*QuerySigningInfoRequest)(nil),           // 3: kira.slashing.QuerySigningInfoRequest
	(*QuerySigningInfoResponse)(nil),          // 4: kira.slashing.QuerySigningInfoResponse
	(*QuerySigningInfosRequest)(nil),          // 5: kira.slashing.QuerySigningInfosRequest
	(*QuerySigningInfosResponse)(nil),         // 6: kira.slashing.QuerySigningInfosResponse
	(*QuerySlashProposalsRequest)(nil),        // 7: kira.slashing.QuerySlashProposalsRequest
	(*QuerySlashProposalsResponse)(nil),       // 8: kira.slashing.QuerySlashProposalsResponse
	(*QuerySlashedStakingPoolsRequest)(nil),   // 9: kira.slashing.QuerySlashedStakingPoolsRequest
	(*QuerySlashedStakingPoolsResponse)(nil),  // 10: kira.slashing.QuerySlashedStakingPoolsResponse
	(*QueryActiveStakingPoolsRequest)(nil),    // 11: kira.slashing.QueryActiveStakingPoolsRequest
	(*QueryActiveStakingPoolsResponse)(nil),   // 12: kira.slashing.QueryActiveStakingPoolsResponse
	(*QueryInactiveStakingPoolsRequest)(nil),  // 13: kira.slashing.QueryInactiveStakingPoolsRequest
	(*QueryInactiveStakingPoolsResponse)(nil), // 14: kira.slashing.QueryInactiveStakingPoolsResponse
	nil,                           // 15: kira.slashing.IdentityRecord.InfosEntry
	(*Params)(nil),                // 16: kira.slashing.Params
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*ValidatorSigningInfo)(nil),  // 18: kira.slashing.ValidatorSigningInfo
	(*types.QueryValidator)(nil),  // 19: kira.staking.QueryValidator
	(*query.PageRequest)(nil),     // 20: cosmos.base.query.v1beta1.PageRequest
	(*query.PageResponse)(nil),    // 21: cosmos.base.query.v1beta1.PageResponse
	(*types1.Proposal)(nil),       // 22: kira.gov.Proposal
	(*types2.StakingPool)(nil),    // 23: kira.multistaking.StakingPool
}
var file_kira_slashing_v1beta1_query_proto_depIdxs = []int32{
	16, // 0: kira.slashing.QueryParamsResponse.params:type_name -> kira.slashing.Params
	15, // 1: kira.slashing.IdentityRecord.infos:type_name -> kira.slashing.IdentityRecord.InfosEntry
	17, // 2: kira.slashing.IdentityRecord.date:type_name -> google.protobuf.Timestamp
	18, // 3: kira.slashing.QuerySigningInfoResponse.val_signing_info:type_name -> kira.slashing.ValidatorSigningInfo
	19, // 4: kira.slashing.QuerySigningInfoResponse.validator:type_name -> kira.staking.QueryValidator
	20, // 5: kira.slashing.QuerySigningInfosRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	18, // 6: kira.slashing.QuerySigningInfosResponse.info:type_name -> kira.slashing.ValidatorSigningInfo
	19, // 7: kira.slashing.QuerySigningInfosResponse.validators:type_name -> kira.staking.QueryValidator
	21, // 8: kira.slashing.QuerySigningInfosResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	22, // 9: kira.slashing.QuerySlashProposalsResponse.proposals:type_name -> kira.gov.Proposal
	23, // 10: kira.slashing.QuerySlashedStakingPoolsResponse.pools:type_name -> kira.multistaking.StakingPool
	23, // 11: kira.slashing.QueryActiveStakingPoolsResponse.pools:type_name -> kira.multistaking.StakingPool
	23, // 12: kira.slashing.QueryInactiveStakingPoolsResponse.pools:type_name -> kira.multistaking.StakingPool
	3,  // 13: kira.slashing.Query.SigningInfo:input_type -> kira.slashing.QuerySigningInfoRequest
	5,  // 14: kira.slashing.Query.SigningInfos:input_type -> kira.slashing.QuerySigningInfosRequest
	7,  // 15: kira.slashing.Query.SlashProposals:input_type -> kira.slashing.QuerySlashProposalsRequest
	9,  // 16: kira.slashing.Query.SlashedStakingPools:input_type -> kira.slashing.QuerySlashedStakingPoolsRequest
	11, // 17: kira.slashing.Query.ActiveStakingPools:input_type -> kira.slashing.QueryActiveStakingPoolsRequest
	13, // 18: kira.slashing.Query.InactiveStakingPools:input_type -> kira.slashing.QueryInactiveStakingPoolsRequest
	4,  // 19: kira.slashing.Query.SigningInfo:output_type -> kira.slashing.QuerySigningInfoResponse
	6,  // 20: kira.slashing.Query.SigningInfos:output_type -> kira.slashing.QuerySigningInfosResponse
	8,  // 21: kira.slashing.Query.SlashProposals:output_type -> kira.slashing.QuerySlashProposalsResponse
	10, // 22: kira.slashing.Query.SlashedStakingPools:output_type -> kira.slashing.QuerySlashedStakingPoolsResponse
	12, // 23: kira.slashing.Query.ActiveStakingPools:output_type -> kira.slashing.QueryActiveStakingPoolsResponse
	14, // 24: kira.slashing.Query.InactiveStakingPools:output_type -> kira.slashing.QueryInactiveStakingPoolsResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_kira_slashing_v1beta1_query_proto_init() }
func file_kira_slashing_v1beta1_query_proto_init() {
	if File_kira_slashing_v1beta1_query_proto != nil {
		return
	}
	file_kira_slashing_v1beta1_slashing_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kira_slashing_v1beta1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySigningInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySigningInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySigningInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySigningInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySlashProposalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySlashProposalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySlashedStakingPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySlashedStakingPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryActiveStakingPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryActiveStakingPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInactiveStakingPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_slashing_v1beta1_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInactiveStakingPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_slashing_v1beta1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kira_slashing_v1beta1_query_proto_goTypes,
		DependencyIndexes: file_kira_slashing_v1beta1_query_proto_depIdxs,
		MessageInfos:      file_kira_slashing_v1beta1_query_proto_msgTypes,
	}.Build()
	File_kira_slashing_v1beta1_query_proto = out.File
	file_kira_slashing_v1beta1_query_proto_rawDesc = nil
	file_kira_slashing_v1beta1_query_proto_goTypes = nil
	file_kira_slashing_v1beta1_query_proto_depIdxs = nil
}
