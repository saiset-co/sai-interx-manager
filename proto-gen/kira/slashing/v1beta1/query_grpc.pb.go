// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/slashing/v1beta1/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_SigningInfo_FullMethodName          = "/kira.slashing.Query/SigningInfo"
	Query_SigningInfos_FullMethodName         = "/kira.slashing.Query/SigningInfos"
	Query_SlashProposals_FullMethodName       = "/kira.slashing.Query/SlashProposals"
	Query_SlashedStakingPools_FullMethodName  = "/kira.slashing.Query/SlashedStakingPools"
	Query_ActiveStakingPools_FullMethodName   = "/kira.slashing.Query/ActiveStakingPools"
	Query_InactiveStakingPools_FullMethodName = "/kira.slashing.Query/InactiveStakingPools"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// SigningInfo queries the signing info of given cons address
	SigningInfo(ctx context.Context, in *QuerySigningInfoRequest, opts ...grpc.CallOption) (*QuerySigningInfoResponse, error)
	// SigningInfos queries signing info of all validators
	SigningInfos(ctx context.Context, in *QuerySigningInfosRequest, opts ...grpc.CallOption) (*QuerySigningInfosResponse, error)
	// list all active slashing proposals
	SlashProposals(ctx context.Context, in *QuerySlashProposalsRequest, opts ...grpc.CallOption) (*QuerySlashProposalsResponse, error)
	// list all staking pools that were slashed
	SlashedStakingPools(ctx context.Context, in *QuerySlashedStakingPoolsRequest, opts ...grpc.CallOption) (*QuerySlashedStakingPoolsResponse, error)
	// list all staking pools to which tokens can be delegated
	ActiveStakingPools(ctx context.Context, in *QueryActiveStakingPoolsRequest, opts ...grpc.CallOption) (*QueryActiveStakingPoolsResponse, error)
	// list all staking pools to which tokens can NOT be delegated because validator is not active
	InactiveStakingPools(ctx context.Context, in *QueryInactiveStakingPoolsRequest, opts ...grpc.CallOption) (*QueryInactiveStakingPoolsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SigningInfo(ctx context.Context, in *QuerySigningInfoRequest, opts ...grpc.CallOption) (*QuerySigningInfoResponse, error) {
	out := new(QuerySigningInfoResponse)
	err := c.cc.Invoke(ctx, Query_SigningInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SigningInfos(ctx context.Context, in *QuerySigningInfosRequest, opts ...grpc.CallOption) (*QuerySigningInfosResponse, error) {
	out := new(QuerySigningInfosResponse)
	err := c.cc.Invoke(ctx, Query_SigningInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashProposals(ctx context.Context, in *QuerySlashProposalsRequest, opts ...grpc.CallOption) (*QuerySlashProposalsResponse, error) {
	out := new(QuerySlashProposalsResponse)
	err := c.cc.Invoke(ctx, Query_SlashProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashedStakingPools(ctx context.Context, in *QuerySlashedStakingPoolsRequest, opts ...grpc.CallOption) (*QuerySlashedStakingPoolsResponse, error) {
	out := new(QuerySlashedStakingPoolsResponse)
	err := c.cc.Invoke(ctx, Query_SlashedStakingPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveStakingPools(ctx context.Context, in *QueryActiveStakingPoolsRequest, opts ...grpc.CallOption) (*QueryActiveStakingPoolsResponse, error) {
	out := new(QueryActiveStakingPoolsResponse)
	err := c.cc.Invoke(ctx, Query_ActiveStakingPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InactiveStakingPools(ctx context.Context, in *QueryInactiveStakingPoolsRequest, opts ...grpc.CallOption) (*QueryInactiveStakingPoolsResponse, error) {
	out := new(QueryInactiveStakingPoolsResponse)
	err := c.cc.Invoke(ctx, Query_InactiveStakingPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// SigningInfo queries the signing info of given cons address
	SigningInfo(context.Context, *QuerySigningInfoRequest) (*QuerySigningInfoResponse, error)
	// SigningInfos queries signing info of all validators
	SigningInfos(context.Context, *QuerySigningInfosRequest) (*QuerySigningInfosResponse, error)
	// list all active slashing proposals
	SlashProposals(context.Context, *QuerySlashProposalsRequest) (*QuerySlashProposalsResponse, error)
	// list all staking pools that were slashed
	SlashedStakingPools(context.Context, *QuerySlashedStakingPoolsRequest) (*QuerySlashedStakingPoolsResponse, error)
	// list all staking pools to which tokens can be delegated
	ActiveStakingPools(context.Context, *QueryActiveStakingPoolsRequest) (*QueryActiveStakingPoolsResponse, error)
	// list all staking pools to which tokens can NOT be delegated because validator is not active
	InactiveStakingPools(context.Context, *QueryInactiveStakingPoolsRequest) (*QueryInactiveStakingPoolsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) SigningInfo(context.Context, *QuerySigningInfoRequest) (*QuerySigningInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningInfo not implemented")
}
func (UnimplementedQueryServer) SigningInfos(context.Context, *QuerySigningInfosRequest) (*QuerySigningInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningInfos not implemented")
}
func (UnimplementedQueryServer) SlashProposals(context.Context, *QuerySlashProposalsRequest) (*QuerySlashProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashProposals not implemented")
}
func (UnimplementedQueryServer) SlashedStakingPools(context.Context, *QuerySlashedStakingPoolsRequest) (*QuerySlashedStakingPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashedStakingPools not implemented")
}
func (UnimplementedQueryServer) ActiveStakingPools(context.Context, *QueryActiveStakingPoolsRequest) (*QueryActiveStakingPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveStakingPools not implemented")
}
func (UnimplementedQueryServer) InactiveStakingPools(context.Context, *QueryInactiveStakingPoolsRequest) (*QueryInactiveStakingPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactiveStakingPools not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_SigningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SigningInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningInfo(ctx, req.(*QuerySigningInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SigningInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SigningInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningInfos(ctx, req.(*QuerySigningInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SlashProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashProposals(ctx, req.(*QuerySlashProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashedStakingPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashedStakingPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashedStakingPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SlashedStakingPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashedStakingPools(ctx, req.(*QuerySlashedStakingPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveStakingPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveStakingPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveStakingPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActiveStakingPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveStakingPools(ctx, req.(*QueryActiveStakingPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InactiveStakingPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInactiveStakingPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InactiveStakingPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InactiveStakingPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InactiveStakingPools(ctx, req.(*QueryInactiveStakingPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.slashing.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SigningInfo",
			Handler:    _Query_SigningInfo_Handler,
		},
		{
			MethodName: "SigningInfos",
			Handler:    _Query_SigningInfos_Handler,
		},
		{
			MethodName: "SlashProposals",
			Handler:    _Query_SlashProposals_Handler,
		},
		{
			MethodName: "SlashedStakingPools",
			Handler:    _Query_SlashedStakingPools_Handler,
		},
		{
			MethodName: "ActiveStakingPools",
			Handler:    _Query_ActiveStakingPools_Handler,
		},
		{
			MethodName: "InactiveStakingPools",
			Handler:    _Query_InactiveStakingPools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/slashing/v1beta1/query.proto",
}
