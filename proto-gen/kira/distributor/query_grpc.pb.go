// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: kira/distributor/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_FeesTreasury_FullMethodName              = "/kira.distributor.Query/FeesTreasury"
	Query_SnapshotPeriod_FullMethodName            = "/kira.distributor.Query/SnapshotPeriod"
	Query_SnapshotPeriodPerformance_FullMethodName = "/kira.distributor.Query/SnapshotPeriodPerformance"
	Query_YearStartSnapshot_FullMethodName         = "/kira.distributor.Query/YearStartSnapshot"
	Query_PeriodicSnapshot_FullMethodName          = "/kira.distributor.Query/PeriodicSnapshot"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// FeesTreasury queries fee treasury
	FeesTreasury(ctx context.Context, in *QueryFeesTreasuryRequest, opts ...grpc.CallOption) (*QueryFeesTreasuryResponse, error)
	// SnapshotPeriod queries number of blocks considered for reward calculation
	SnapshotPeriod(ctx context.Context, in *QuerySnapshotPeriodRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodResponse, error)
	// SnapPeriodPerformance queries number of blocks signed during the snap period
	SnapshotPeriodPerformance(ctx context.Context, in *QuerySnapshotPeriodPerformanceRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodPerformanceResponse, error)
	// Year start snapshot query
	YearStartSnapshot(ctx context.Context, in *QueryYearStartSnapshotRequest, opts ...grpc.CallOption) (*QueryYearStartSnapshotResponse, error)
	// Periodic snapshot query
	PeriodicSnapshot(ctx context.Context, in *QueryPeriodicSnapshotRequest, opts ...grpc.CallOption) (*QueryPeriodicSnapshotResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FeesTreasury(ctx context.Context, in *QueryFeesTreasuryRequest, opts ...grpc.CallOption) (*QueryFeesTreasuryResponse, error) {
	out := new(QueryFeesTreasuryResponse)
	err := c.cc.Invoke(ctx, Query_FeesTreasury_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SnapshotPeriod(ctx context.Context, in *QuerySnapshotPeriodRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodResponse, error) {
	out := new(QuerySnapshotPeriodResponse)
	err := c.cc.Invoke(ctx, Query_SnapshotPeriod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SnapshotPeriodPerformance(ctx context.Context, in *QuerySnapshotPeriodPerformanceRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodPerformanceResponse, error) {
	out := new(QuerySnapshotPeriodPerformanceResponse)
	err := c.cc.Invoke(ctx, Query_SnapshotPeriodPerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YearStartSnapshot(ctx context.Context, in *QueryYearStartSnapshotRequest, opts ...grpc.CallOption) (*QueryYearStartSnapshotResponse, error) {
	out := new(QueryYearStartSnapshotResponse)
	err := c.cc.Invoke(ctx, Query_YearStartSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PeriodicSnapshot(ctx context.Context, in *QueryPeriodicSnapshotRequest, opts ...grpc.CallOption) (*QueryPeriodicSnapshotResponse, error) {
	out := new(QueryPeriodicSnapshotResponse)
	err := c.cc.Invoke(ctx, Query_PeriodicSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// FeesTreasury queries fee treasury
	FeesTreasury(context.Context, *QueryFeesTreasuryRequest) (*QueryFeesTreasuryResponse, error)
	// SnapshotPeriod queries number of blocks considered for reward calculation
	SnapshotPeriod(context.Context, *QuerySnapshotPeriodRequest) (*QuerySnapshotPeriodResponse, error)
	// SnapPeriodPerformance queries number of blocks signed during the snap period
	SnapshotPeriodPerformance(context.Context, *QuerySnapshotPeriodPerformanceRequest) (*QuerySnapshotPeriodPerformanceResponse, error)
	// Year start snapshot query
	YearStartSnapshot(context.Context, *QueryYearStartSnapshotRequest) (*QueryYearStartSnapshotResponse, error)
	// Periodic snapshot query
	PeriodicSnapshot(context.Context, *QueryPeriodicSnapshotRequest) (*QueryPeriodicSnapshotResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) FeesTreasury(context.Context, *QueryFeesTreasuryRequest) (*QueryFeesTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesTreasury not implemented")
}
func (UnimplementedQueryServer) SnapshotPeriod(context.Context, *QuerySnapshotPeriodRequest) (*QuerySnapshotPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotPeriod not implemented")
}
func (UnimplementedQueryServer) SnapshotPeriodPerformance(context.Context, *QuerySnapshotPeriodPerformanceRequest) (*QuerySnapshotPeriodPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotPeriodPerformance not implemented")
}
func (UnimplementedQueryServer) YearStartSnapshot(context.Context, *QueryYearStartSnapshotRequest) (*QueryYearStartSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YearStartSnapshot not implemented")
}
func (UnimplementedQueryServer) PeriodicSnapshot(context.Context, *QueryPeriodicSnapshotRequest) (*QueryPeriodicSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodicSnapshot not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_FeesTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeesTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeesTreasury_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesTreasury(ctx, req.(*QueryFeesTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SnapshotPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySnapshotPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SnapshotPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SnapshotPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SnapshotPeriod(ctx, req.(*QuerySnapshotPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SnapshotPeriodPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySnapshotPeriodPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SnapshotPeriodPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SnapshotPeriodPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SnapshotPeriodPerformance(ctx, req.(*QuerySnapshotPeriodPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YearStartSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYearStartSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YearStartSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_YearStartSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YearStartSnapshot(ctx, req.(*QueryYearStartSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PeriodicSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPeriodicSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PeriodicSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PeriodicSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PeriodicSnapshot(ctx, req.(*QueryPeriodicSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kira.distributor.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeesTreasury",
			Handler:    _Query_FeesTreasury_Handler,
		},
		{
			MethodName: "SnapshotPeriod",
			Handler:    _Query_SnapshotPeriod_Handler,
		},
		{
			MethodName: "SnapshotPeriodPerformance",
			Handler:    _Query_SnapshotPeriodPerformance_Handler,
		},
		{
			MethodName: "YearStartSnapshot",
			Handler:    _Query_YearStartSnapshot_Handler,
		},
		{
			MethodName: "PeriodicSnapshot",
			Handler:    _Query_PeriodicSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/distributor/query.proto",
}
