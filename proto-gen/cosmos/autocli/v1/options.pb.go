// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: cosmos/autocli/v1/options.proto

package cliv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ModuleOptions describes the CLI options for a Cosmos SDK module.
type ModuleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tx describes the tx command for the module.
	Tx *ServiceCommandDescriptor `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// query describes the tx command for the module.
	Query *ServiceCommandDescriptor `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ModuleOptions) Reset() {
	*x = ModuleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_autocli_v1_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleOptions) ProtoMessage() {}

func (x *ModuleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cosmos_autocli_v1_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleOptions.ProtoReflect.Descriptor instead.
func (*ModuleOptions) Descriptor() ([]byte, []int) {
	return file_cosmos_autocli_v1_options_proto_rawDescGZIP(), []int{0}
}

func (x *ModuleOptions) GetTx() *ServiceCommandDescriptor {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ModuleOptions) GetQuery() *ServiceCommandDescriptor {
	if x != nil {
		return x.Query
	}
	return nil
}

// ServiceCommandDescriptor describes a CLI command based on a protobuf service.
type ServiceCommandDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service is the fully qualified name of the protobuf service to build
	// the command from. It can be left empty if sub_commands are used instead
	// which may be the case if a module provides multiple tx and/or query services.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// rpc_command_options are options for commands generated from rpc methods.
	// If no options are specified for a given rpc method on the service, a
	// command will be generated for that method with the default options.
	RpcCommandOptions []*RpcCommandOptions `protobuf:"bytes,2,rep,name=rpc_command_options,json=rpcCommandOptions,proto3" json:"rpc_command_options,omitempty"`
	// sub_commands is a map of optional sub-commands for this command based on
	// different protobuf services. The map key is used as the name of the
	// sub-command.
	SubCommands map[string]*ServiceCommandDescriptor `protobuf:"bytes,3,rep,name=sub_commands,json=subCommands,proto3" json:"sub_commands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceCommandDescriptor) Reset() {
	*x = ServiceCommandDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_autocli_v1_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCommandDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCommandDescriptor) ProtoMessage() {}

func (x *ServiceCommandDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_cosmos_autocli_v1_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCommandDescriptor.ProtoReflect.Descriptor instead.
func (*ServiceCommandDescriptor) Descriptor() ([]byte, []int) {
	return file_cosmos_autocli_v1_options_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceCommandDescriptor) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceCommandDescriptor) GetRpcCommandOptions() []*RpcCommandOptions {
	if x != nil {
		return x.RpcCommandOptions
	}
	return nil
}

func (x *ServiceCommandDescriptor) GetSubCommands() map[string]*ServiceCommandDescriptor {
	if x != nil {
		return x.SubCommands
	}
	return nil
}

// RpcCommandOptions specifies options for commands generated from protobuf
// rpc methods.
type RpcCommandOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rpc_method is short name of the protobuf rpc method that this command is
	// generated from.
	RpcMethod string `protobuf:"bytes,1,opt,name=rpc_method,json=rpcMethod,proto3" json:"rpc_method,omitempty"`
	// use is the one-line usage method. It also allows specifying an alternate
	// name for the command as the first word of the usage text.
	//
	// By default the name of an rpc command is the kebab-case short name of the
	// rpc method.
	Use string `protobuf:"bytes,2,opt,name=use,proto3" json:"use,omitempty"`
	// long is the long message shown in the 'help <this-command>' output.
	Long string `protobuf:"bytes,3,opt,name=long,proto3" json:"long,omitempty"`
	// short is the short description shown in the 'help' output.
	Short string `protobuf:"bytes,4,opt,name=short,proto3" json:"short,omitempty"`
	// example is examples of how to use the command.
	Example string `protobuf:"bytes,5,opt,name=example,proto3" json:"example,omitempty"`
	// alias is an array of aliases that can be used instead of the first word in Use.
	Alias []string `protobuf:"bytes,6,rep,name=alias,proto3" json:"alias,omitempty"`
	// suggest_for is an array of command names for which this command will be suggested -
	// similar to aliases but only suggests.
	SuggestFor []string `protobuf:"bytes,7,rep,name=suggest_for,json=suggestFor,proto3" json:"suggest_for,omitempty"`
	// deprecated defines, if this command is deprecated and should print this string when used.
	Deprecated string `protobuf:"bytes,8,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// version defines the version for this command. If this value is non-empty and the command does not
	// define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
	// will print content of the "Version" variable. A shorthand "v" flag will also be added if the
	// command does not define one.
	Version string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	// flag_options are options for flags generated from rpc request fields.
	// By default all request fields are configured as flags. They can
	// also be configured as positional args instead using positional_args.
	FlagOptions map[string]*FlagOptions `protobuf:"bytes,10,rep,name=flag_options,json=flagOptions,proto3" json:"flag_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// positional_args specifies positional arguments for the command.
	PositionalArgs []*PositionalArgDescriptor `protobuf:"bytes,11,rep,name=positional_args,json=positionalArgs,proto3" json:"positional_args,omitempty"`
	// skip specifies whether to skip this rpc method when generating commands.
	Skip bool `protobuf:"varint,12,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *RpcCommandOptions) Reset() {
	*x = RpcCommandOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_autocli_v1_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcCommandOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcCommandOptions) ProtoMessage() {}

func (x *RpcCommandOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cosmos_autocli_v1_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcCommandOptions.ProtoReflect.Descriptor instead.
func (*RpcCommandOptions) Descriptor() ([]byte, []int) {
	return file_cosmos_autocli_v1_options_proto_rawDescGZIP(), []int{2}
}

func (x *RpcCommandOptions) GetRpcMethod() string {
	if x != nil {
		return x.RpcMethod
	}
	return ""
}

func (x *RpcCommandOptions) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *RpcCommandOptions) GetLong() string {
	if x != nil {
		return x.Long
	}
	return ""
}

func (x *RpcCommandOptions) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *RpcCommandOptions) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *RpcCommandOptions) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RpcCommandOptions) GetSuggestFor() []string {
	if x != nil {
		return x.SuggestFor
	}
	return nil
}

func (x *RpcCommandOptions) GetDeprecated() string {
	if x != nil {
		return x.Deprecated
	}
	return ""
}

func (x *RpcCommandOptions) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RpcCommandOptions) GetFlagOptions() map[string]*FlagOptions {
	if x != nil {
		return x.FlagOptions
	}
	return nil
}

func (x *RpcCommandOptions) GetPositionalArgs() []*PositionalArgDescriptor {
	if x != nil {
		return x.PositionalArgs
	}
	return nil
}

func (x *RpcCommandOptions) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

// FlagOptions are options for flags generated from rpc request fields.
// By default, all request fields are configured as flags based on the
// kebab-case name of the field. Fields can be turned into positional arguments
// instead by using RpcCommandOptions.positional_args.
type FlagOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an alternate name to use for the field flag.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// shorthand is a one-letter abbreviated flag.
	Shorthand string `protobuf:"bytes,2,opt,name=shorthand,proto3" json:"shorthand,omitempty"`
	// usage is the help message.
	Usage string `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	// default_value is the default value as text.
	DefaultValue string `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// default value is the default value as text if the flag is used without any value.
	NoOptDefaultValue string `protobuf:"bytes,5,opt,name=no_opt_default_value,json=noOptDefaultValue,proto3" json:"no_opt_default_value,omitempty"`
	// deprecated is the usage text to show if this flag is deprecated.
	Deprecated string `protobuf:"bytes,6,opt,name=deprecated,proto3" json:"deprecated,omitempty"`
	// shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
	ShorthandDeprecated string `protobuf:"bytes,7,opt,name=shorthand_deprecated,json=shorthandDeprecated,proto3" json:"shorthand_deprecated,omitempty"`
	// hidden hides the flag from help/usage text
	Hidden bool `protobuf:"varint,8,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *FlagOptions) Reset() {
	*x = FlagOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_autocli_v1_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagOptions) ProtoMessage() {}

func (x *FlagOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cosmos_autocli_v1_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagOptions.ProtoReflect.Descriptor instead.
func (*FlagOptions) Descriptor() ([]byte, []int) {
	return file_cosmos_autocli_v1_options_proto_rawDescGZIP(), []int{3}
}

func (x *FlagOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlagOptions) GetShorthand() string {
	if x != nil {
		return x.Shorthand
	}
	return ""
}

func (x *FlagOptions) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *FlagOptions) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FlagOptions) GetNoOptDefaultValue() string {
	if x != nil {
		return x.NoOptDefaultValue
	}
	return ""
}

func (x *FlagOptions) GetDeprecated() string {
	if x != nil {
		return x.Deprecated
	}
	return ""
}

func (x *FlagOptions) GetShorthandDeprecated() string {
	if x != nil {
		return x.ShorthandDeprecated
	}
	return ""
}

func (x *FlagOptions) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

// PositionalArgDescriptor describes a positional argument.
type PositionalArgDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// proto_field specifies the proto field to use as the positional arg. Any
	// fields used as positional args will not have a flag generated.
	ProtoField string `protobuf:"bytes,1,opt,name=proto_field,json=protoField,proto3" json:"proto_field,omitempty"`
	// varargs makes a positional parameter a varargs parameter. This can only be
	// applied to last positional parameter and the proto_field must a repeated
	// field.
	Varargs bool `protobuf:"varint,2,opt,name=varargs,proto3" json:"varargs,omitempty"`
}

func (x *PositionalArgDescriptor) Reset() {
	*x = PositionalArgDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cosmos_autocli_v1_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionalArgDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionalArgDescriptor) ProtoMessage() {}

func (x *PositionalArgDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_cosmos_autocli_v1_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionalArgDescriptor.ProtoReflect.Descriptor instead.
func (*PositionalArgDescriptor) Descriptor() ([]byte, []int) {
	return file_cosmos_autocli_v1_options_proto_rawDescGZIP(), []int{4}
}

func (x *PositionalArgDescriptor) GetProtoField() string {
	if x != nil {
		return x.ProtoField
	}
	return ""
}

func (x *PositionalArgDescriptor) GetVarargs() bool {
	if x != nil {
		return x.Varargs
	}
	return false
}

var File_cosmos_autocli_v1_options_proto protoreflect.FileDescriptor

var file_cosmos_autocli_v1_options_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c,
	0x69, 0x2e, 0x76, 0x31, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x41, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xd8, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x13, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x11, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x1a, 0x6b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9c, 0x04, 0x0a, 0x11, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x70, 0x63,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x0c, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x72, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6b, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70,
	0x1a, 0x5e, 0x0a, 0x10, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x96, 0x02, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x68, 0x61,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x6e, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x6f, 0x4f,
	0x70, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x17, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x61, 0x72, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x2b, 0x5a, 0x29, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x63, 0x6c, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x69, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cosmos_autocli_v1_options_proto_rawDescOnce sync.Once
	file_cosmos_autocli_v1_options_proto_rawDescData = file_cosmos_autocli_v1_options_proto_rawDesc
)

func file_cosmos_autocli_v1_options_proto_rawDescGZIP() []byte {
	file_cosmos_autocli_v1_options_proto_rawDescOnce.Do(func() {
		file_cosmos_autocli_v1_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_cosmos_autocli_v1_options_proto_rawDescData)
	})
	return file_cosmos_autocli_v1_options_proto_rawDescData
}

var file_cosmos_autocli_v1_options_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cosmos_autocli_v1_options_proto_goTypes = []interface{}{
	(*ModuleOptions)(nil),            // 0: cosmos.autocli.v1.ModuleOptions
	(*ServiceCommandDescriptor)(nil), // 1: cosmos.autocli.v1.ServiceCommandDescriptor
	(*RpcCommandOptions)(nil),        // 2: cosmos.autocli.v1.RpcCommandOptions
	(*FlagOptions)(nil),              // 3: cosmos.autocli.v1.FlagOptions
	(*PositionalArgDescriptor)(nil),  // 4: cosmos.autocli.v1.PositionalArgDescriptor
	nil,                              // 5: cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry
	nil,                              // 6: cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry
}
var file_cosmos_autocli_v1_options_proto_depIdxs = []int32{
	1, // 0: cosmos.autocli.v1.ModuleOptions.tx:type_name -> cosmos.autocli.v1.ServiceCommandDescriptor
	1, // 1: cosmos.autocli.v1.ModuleOptions.query:type_name -> cosmos.autocli.v1.ServiceCommandDescriptor
	2, // 2: cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options:type_name -> cosmos.autocli.v1.RpcCommandOptions
	5, // 3: cosmos.autocli.v1.ServiceCommandDescriptor.sub_commands:type_name -> cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry
	6, // 4: cosmos.autocli.v1.RpcCommandOptions.flag_options:type_name -> cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry
	4, // 5: cosmos.autocli.v1.RpcCommandOptions.positional_args:type_name -> cosmos.autocli.v1.PositionalArgDescriptor
	1, // 6: cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry.value:type_name -> cosmos.autocli.v1.ServiceCommandDescriptor
	3, // 7: cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry.value:type_name -> cosmos.autocli.v1.FlagOptions
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_cosmos_autocli_v1_options_proto_init() }
func file_cosmos_autocli_v1_options_proto_init() {
	if File_cosmos_autocli_v1_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cosmos_autocli_v1_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_autocli_v1_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCommandDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_autocli_v1_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcCommandOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_autocli_v1_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cosmos_autocli_v1_options_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionalArgDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cosmos_autocli_v1_options_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cosmos_autocli_v1_options_proto_goTypes,
		DependencyIndexes: file_cosmos_autocli_v1_options_proto_depIdxs,
		MessageInfos:      file_cosmos_autocli_v1_options_proto_msgTypes,
	}.Build()
	File_cosmos_autocli_v1_options_proto = out.File
	file_cosmos_autocli_v1_options_proto_rawDesc = nil
	file_cosmos_autocli_v1_options_proto_goTypes = nil
	file_cosmos_autocli_v1_options_proto_depIdxs = nil
}
